
// Generated by Cadence Genus(TM) Synthesis Solution 18.14-s037_1
// Generated on: Jan 28 2021 19:51:06 CST (Jan 29 2021 01:51:06 UTC)

// Verification Directory fv/CPU 

module ALUctrl(ALUop, funct, Control);
  input [1:0] ALUop;
  input [5:0] funct;
  output [3:0] Control;
  wire [1:0] ALUop;
  wire [5:0] funct;
  wire [3:0] Control;
  wire [3:0] R_C;
  wire [3:0] temp;
  wire nf0, nf1, nf2, nf3, t1, t2, t3, t4;
  wire t5, t6, t7, t8;
  and_gate ac_andg0(.x (nf3), .y (nf2), .z (t3));
  and_gate ac_andg1(.x (t3), .y (nf1), .z (t4));
  and_gate ac_andg2(.x (nf2), .y (funct[1]), .z (t5));
  and_gate ac_andg3(.x (t5), .y (funct[0]), .z (t6));
  and_gate ac_andg4(.x (t7), .y (funct[5]), .z (R_C[1]));
  and_gate ac_andg5(.x (funct[1]), .y (nf2), .z (R_C[2]));
  mux_n_n4 ac_mux0(.sel (ALUop[1]), .src0 (temp), .src1 (4'b0100), .z
       (Control));
  mux_n_n4 ac_mux1(.sel (ALUop[0]), .src0 (R_C), .src1 (4'b0011), .z
       (temp));
  not_gate ac_notg0(.x (funct[5]), .z (R_C[3]));
  not_gate ac_notg1(.x (funct[3]), .z (nf3));
  not_gate ac_notg2(.x (funct[2]), .z (nf2));
  not_gate ac_notg3(.x (funct[1]), .z (nf1));
  not_gate ac_notg4(.x (funct[0]), .z (nf0));
  not_gate ac_notg5(.x (t8), .z (R_C[0]));
  or_gate ac_org0(.x (t4), .y (t6), .z (t7));
  xor_gate ac_xorg0(.x (funct[3]), .y (funct[2]), .z (t1));
  xor_gate ac_xorg1(.x (t1), .y (funct[1]), .z (t2));
  xor_gate ac_xorg2(.x (t2), .y (funct[0]), .z (t8));
endmodule

module and_6_1(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_2(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_3(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_4(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_6(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_7(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_8(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_5(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module Control(clk, Opcode, funct, RegDst, ALUSrc, MemtoReg, RegWrite,
     MemWrite, Branch, Extop, ALUop, valid);
  input clk, valid;
  input [5:0] Opcode, funct;
  output RegDst, MemtoReg, RegWrite, MemWrite, Branch, Extop;
  output [1:0] ALUSrc, ALUop;
  wire clk, valid;
  wire [5:0] Opcode, funct;
  wire RegDst, MemtoReg, RegWrite, MemWrite, Branch, Extop;
  wire [1:0] ALUSrc, ALUop;
  wire [5:0] NotOp;
  wire [5:0] Notfunct;
  wire [1:0] temp;
  wire Branch1, Branch2, Branch2_new, Branch3, Branch3_new, Branch_pre,
       addi_as, beq_br;
  wire bgtz_br, bne_br, is_sll, taken;
  or_gate Branch_cancle1(.x (Branch1), .y (Branch2), .z (Branch2_new));
  or_gate Branch_cancle2(.x (Branch2_new), .y (Branch3), .z
       (Branch3_new));
  and_gate and_0(.x (Branch_pre), .y (valid), .z (taken));
  and_gate cdang0(.x (is_sll), .y (RegDst), .z (ALUSrc[1]));
  and_6_1 csand0(.a (NotOp[5]), .b (NotOp[4]), .c (NotOp[3]), .d
       (NotOp[2]), .e (NotOp[1]), .f (NotOp[0]), .z (RegDst));
  and_6_2 csand1(.a (NotOp[5]), .b (NotOp[4]), .c (Opcode[3]), .d
       (NotOp[2]), .e (NotOp[1]), .f (NotOp[0]), .z (addi_as));
  and_6_3 csand2(.a (Opcode[5]), .b (NotOp[4]), .c (NotOp[3]), .d
       (NotOp[2]), .e (Opcode[1]), .f (Opcode[0]), .z (MemtoReg));
  and_6_4 csand3(.a (Opcode[5]), .b (NotOp[4]), .c (Opcode[3]), .d
       (NotOp[2]), .e (Opcode[1]), .f (Opcode[0]), .z (MemWrite));
  and_6_6 csand4(.a (NotOp[5]), .b (NotOp[4]), .c (NotOp[3]), .d
       (Opcode[2]), .e (NotOp[1]), .f (NotOp[0]), .z (beq_br));
  and_6_7 csand5(.a (NotOp[5]), .b (NotOp[4]), .c (NotOp[3]), .d
       (Opcode[2]), .e (NotOp[1]), .f (Opcode[0]), .z (bne_br));
  and_6_8 csand6(.a (NotOp[5]), .b (NotOp[4]), .c (NotOp[3]), .d
       (Opcode[2]), .e (Opcode[1]), .f (Opcode[0]), .z (bgtz_br));
  and_6_5 csand9(.a (Notfunct[0]), .b (Notfunct[4]), .c (Notfunct[3]),
       .d (Notfunct[2]), .e (Notfunct[1]), .f (Notfunct[0]), .z
       (is_sll));
  mux_n_n2 csmux0(.sel (Branch), .src0 (2'b01), .src1 (2'b10), .z
       (temp));
  mux_n_n2 csmux1(.sel (RegDst), .src0 (temp), .src1 (2'b00), .z
       (ALUop));
  not_gate_n_n6 csnotg0(.x (Opcode), .z (NotOp));
  not_gate_n_n6 csnotg8(.x (funct), .z (Notfunct));
  mux mux_cancle(.sel (Branch3_new), .src0 (Branch_pre), .src1 (1'b0),
       .z (Branch));
  dff reg_Branch1(.clk (clk), .d (taken), .q (Branch1));
  dff reg_Branch2(.clk (clk), .d (Branch1), .q (Branch2));
  dff reg_Branch3(.clk (clk), .d (Branch2), .q (Branch3));
  OR3_X1 g36__8780(.A1 (bgtz_br), .A2 (beq_br), .A3 (bne_br), .ZN
       (Branch_pre));
  OR3_X1 g46__4296(.A1 (addi_as), .A2 (MemWrite), .A3 (MemtoReg), .ZN
       (ALUSrc[0]));
  OR3_X1 g47__3772(.A1 (addi_as), .A2 (MemtoReg), .A3 (RegDst), .ZN
       (RegWrite));
endmodule

module alu_unit(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_1(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_2(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_3(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_4(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_5(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_6(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_7(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_8(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_9(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_10(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_11(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_12(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_13(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_14(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_15(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_16(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_17(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_18(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_19(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_20(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_21(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_22(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_23(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_24(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_25(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_26(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_27(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_28(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_29(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_30(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_msb(A, B, Op, Carryout, Carryin, usum, Overflow, Set);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum, Overflow, Set;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum, Overflow, Set;
  wire B_inv, B_slt, Carryout_0, Overflow_0, t1, t2, t3, t4;
  wire t5, t6, t7, t8, t9, t10, t11, t_add;
  wire t_carry, t_not, t_overflow, t_slt, t_slt0, t_sltu, t_sltu0,
       t_sum1;
  wire t_sum2, uadd, uand, uor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate and_slt3(.x (t8), .y (t6), .z (t9));
  and_gate and_sltu3(.x (t10), .y (t7), .z (t11));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  and_gate andoverflow(.x (t_overflow), .y (Overflow_0), .z (Overflow));
  and_gate andslt1(.x (Op[0]), .y (Op[2]), .z (t6));
  and_gate andslt2(.x (t9), .y (t_slt0), .z (t_slt));
  and_gate andsltu1(.x (Op[1]), .y (Op[2]), .z (t7));
  and_gate andsltu2(.x (t11), .y (t_sltu0), .z (t_sltu));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  not_gate not_slt(.x (Op[1]), .z (t8));
  not_gate not_sltu(.x (Carryout), .z (t_sltu0));
  not_gate not_sltu1(.x (Op[0]), .z (t10));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  or_gate orset(.x (t_slt), .y (t_sltu), .z (Set));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
  xor_gate xor_overflow(.x (Carryout), .y (Carryin), .z (Overflow_0));
  xor_gate xor_setlabel(.x (t_add), .y (Op[2]), .z (t_overflow));
  xor_gate xorslt(.x (usum), .y (Overflow), .z (t_slt0));
endmodule

module alu_32(A, B, Op, Carryout, Overflow, Final_result, Set);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow, Set;
  output [31:0] Final_result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow, Set;
  wire [31:0] Final_result;
  wire [30:0] ucarryout;
  wire [31:0] Result;
  wire [31:0] result0;
  wire UNCONNECTED_HIER_Z, UNCONNECTED_HIER_Z0, UNCONNECTED_HIER_Z1,
       UNCONNECTED_HIER_Z2, UNCONNECTED_HIER_Z3, UNCONNECTED_HIER_Z4,
       UNCONNECTED_HIER_Z5, UNCONNECTED_HIER_Z6;
  wire UNCONNECTED_HIER_Z7, UNCONNECTED_HIER_Z8, UNCONNECTED_HIER_Z9,
       UNCONNECTED_HIER_Z10, UNCONNECTED_HIER_Z11,
       UNCONNECTED_HIER_Z12, UNCONNECTED_HIER_Z13, UNCONNECTED_HIER_Z14;
  wire UNCONNECTED_HIER_Z15, UNCONNECTED_HIER_Z16,
       UNCONNECTED_HIER_Z17, UNCONNECTED_HIER_Z18,
       UNCONNECTED_HIER_Z19, UNCONNECTED_HIER_Z20,
       UNCONNECTED_HIER_Z21, UNCONNECTED_HIER_Z22;
  wire UNCONNECTED_HIER_Z23, UNCONNECTED_HIER_Z24,
       UNCONNECTED_HIER_Z25, UNCONNECTED_HIER_Z26,
       UNCONNECTED_HIER_Z27, UNCONNECTED_HIER_Z28,
       UNCONNECTED_HIER_Z29, UNCONNECTED_HIER_Z30;
  wire n_104, n_105, n_106, n_107, n_108, n_109, n_110, n_111;
  wire n_112, n_113, n_114, n_115, n_116, n_117, n_118, n_119;
  wire n_120, n_121, n_122, n_123, n_124, n_125, n_126, n_127;
  wire n_128, n_129, n_130, n_131, n_132, n_133, n_134, t6;
  wire t7, t8, t10, t_slt, t_sltu;
  assign n_134 = 1'b0;
  assign n_133 = 1'b0;
  assign n_132 = 1'b0;
  assign n_131 = 1'b0;
  assign n_130 = 1'b0;
  assign n_129 = 1'b0;
  assign n_128 = 1'b0;
  assign n_127 = 1'b0;
  assign n_126 = 1'b0;
  assign n_125 = 1'b0;
  assign n_124 = 1'b0;
  assign n_123 = 1'b0;
  assign n_122 = 1'b0;
  assign n_121 = 1'b0;
  assign n_120 = 1'b0;
  assign n_119 = 1'b0;
  assign n_118 = 1'b0;
  assign n_117 = 1'b0;
  assign n_116 = 1'b0;
  assign n_115 = 1'b0;
  assign n_114 = 1'b0;
  assign n_113 = 1'b0;
  assign n_112 = 1'b0;
  assign n_111 = 1'b0;
  assign n_110 = 1'b0;
  assign n_109 = 1'b0;
  assign n_108 = 1'b0;
  assign n_107 = 1'b0;
  assign n_106 = 1'b0;
  assign n_105 = 1'b0;
  assign n_104 = 1'b0;
  alu_unit alu_unit0(.A (A[0]), .B (B[0]), .Op ({UNCONNECTED_HIER_Z,
       Op[2:0]}), .Carryout (ucarryout[0]), .Carryin (Op[2]), .usum
       (Result[0]));
  alu_unit_1 alu_unit1(.A (A[1]), .B (B[1]), .Op ({UNCONNECTED_HIER_Z0,
       Op[2:0]}), .Carryout (ucarryout[1]), .Carryin (ucarryout[0]),
       .usum (Result[1]));
  alu_unit_2 alu_unit2(.A (A[2]), .B (B[2]), .Op ({UNCONNECTED_HIER_Z1,
       Op[2:0]}), .Carryout (ucarryout[2]), .Carryin (ucarryout[1]),
       .usum (Result[2]));
  alu_unit_3 alu_unit3(.A (A[3]), .B (B[3]), .Op ({UNCONNECTED_HIER_Z2,
       Op[2:0]}), .Carryout (ucarryout[3]), .Carryin (ucarryout[2]),
       .usum (Result[3]));
  alu_unit_4 alu_unit4(.A (A[4]), .B (B[4]), .Op ({UNCONNECTED_HIER_Z3,
       Op[2:0]}), .Carryout (ucarryout[4]), .Carryin (ucarryout[3]),
       .usum (Result[4]));
  alu_unit_5 alu_unit5(.A (A[5]), .B (B[5]), .Op ({UNCONNECTED_HIER_Z4,
       Op[2:0]}), .Carryout (ucarryout[5]), .Carryin (ucarryout[4]),
       .usum (Result[5]));
  alu_unit_6 alu_unit6(.A (A[6]), .B (B[6]), .Op ({UNCONNECTED_HIER_Z5,
       Op[2:0]}), .Carryout (ucarryout[6]), .Carryin (ucarryout[5]),
       .usum (Result[6]));
  alu_unit_7 alu_unit7(.A (A[7]), .B (B[7]), .Op ({UNCONNECTED_HIER_Z6,
       Op[2:0]}), .Carryout (ucarryout[7]), .Carryin (ucarryout[6]),
       .usum (Result[7]));
  alu_unit_8 alu_unit8(.A (A[8]), .B (B[8]), .Op ({UNCONNECTED_HIER_Z7,
       Op[2:0]}), .Carryout (ucarryout[8]), .Carryin (ucarryout[7]),
       .usum (Result[8]));
  alu_unit_9 alu_unit9(.A (A[9]), .B (B[9]), .Op ({UNCONNECTED_HIER_Z8,
       Op[2:0]}), .Carryout (ucarryout[9]), .Carryin (ucarryout[8]),
       .usum (Result[9]));
  alu_unit_10 alu_unit10(.A (A[10]), .B (B[10]), .Op
       ({UNCONNECTED_HIER_Z9, Op[2:0]}), .Carryout (ucarryout[10]),
       .Carryin (ucarryout[9]), .usum (Result[10]));
  alu_unit_11 alu_unit11(.A (A[11]), .B (B[11]), .Op
       ({UNCONNECTED_HIER_Z10, Op[2:0]}), .Carryout (ucarryout[11]),
       .Carryin (ucarryout[10]), .usum (Result[11]));
  alu_unit_12 alu_unit12(.A (A[12]), .B (B[12]), .Op
       ({UNCONNECTED_HIER_Z11, Op[2:0]}), .Carryout (ucarryout[12]),
       .Carryin (ucarryout[11]), .usum (Result[12]));
  alu_unit_13 alu_unit13(.A (A[13]), .B (B[13]), .Op
       ({UNCONNECTED_HIER_Z12, Op[2:0]}), .Carryout (ucarryout[13]),
       .Carryin (ucarryout[12]), .usum (Result[13]));
  alu_unit_14 alu_unit14(.A (A[14]), .B (B[14]), .Op
       ({UNCONNECTED_HIER_Z13, Op[2:0]}), .Carryout (ucarryout[14]),
       .Carryin (ucarryout[13]), .usum (Result[14]));
  alu_unit_15 alu_unit15(.A (A[15]), .B (B[15]), .Op
       ({UNCONNECTED_HIER_Z14, Op[2:0]}), .Carryout (ucarryout[15]),
       .Carryin (ucarryout[14]), .usum (Result[15]));
  alu_unit_16 alu_unit16(.A (A[16]), .B (B[16]), .Op
       ({UNCONNECTED_HIER_Z15, Op[2:0]}), .Carryout (ucarryout[16]),
       .Carryin (ucarryout[15]), .usum (Result[16]));
  alu_unit_17 alu_unit17(.A (A[17]), .B (B[17]), .Op
       ({UNCONNECTED_HIER_Z16, Op[2:0]}), .Carryout (ucarryout[17]),
       .Carryin (ucarryout[16]), .usum (Result[17]));
  alu_unit_18 alu_unit18(.A (A[18]), .B (B[18]), .Op
       ({UNCONNECTED_HIER_Z17, Op[2:0]}), .Carryout (ucarryout[18]),
       .Carryin (ucarryout[17]), .usum (Result[18]));
  alu_unit_19 alu_unit19(.A (A[19]), .B (B[19]), .Op
       ({UNCONNECTED_HIER_Z18, Op[2:0]}), .Carryout (ucarryout[19]),
       .Carryin (ucarryout[18]), .usum (Result[19]));
  alu_unit_20 alu_unit20(.A (A[20]), .B (B[20]), .Op
       ({UNCONNECTED_HIER_Z19, Op[2:0]}), .Carryout (ucarryout[20]),
       .Carryin (ucarryout[19]), .usum (Result[20]));
  alu_unit_21 alu_unit21(.A (A[21]), .B (B[21]), .Op
       ({UNCONNECTED_HIER_Z20, Op[2:0]}), .Carryout (ucarryout[21]),
       .Carryin (ucarryout[20]), .usum (Result[21]));
  alu_unit_22 alu_unit22(.A (A[22]), .B (B[22]), .Op
       ({UNCONNECTED_HIER_Z21, Op[2:0]}), .Carryout (ucarryout[22]),
       .Carryin (ucarryout[21]), .usum (Result[22]));
  alu_unit_23 alu_unit23(.A (A[23]), .B (B[23]), .Op
       ({UNCONNECTED_HIER_Z22, Op[2:0]}), .Carryout (ucarryout[23]),
       .Carryin (ucarryout[22]), .usum (Result[23]));
  alu_unit_24 alu_unit24(.A (A[24]), .B (B[24]), .Op
       ({UNCONNECTED_HIER_Z23, Op[2:0]}), .Carryout (ucarryout[24]),
       .Carryin (ucarryout[23]), .usum (Result[24]));
  alu_unit_25 alu_unit25(.A (A[25]), .B (B[25]), .Op
       ({UNCONNECTED_HIER_Z24, Op[2:0]}), .Carryout (ucarryout[25]),
       .Carryin (ucarryout[24]), .usum (Result[25]));
  alu_unit_26 alu_unit26(.A (A[26]), .B (B[26]), .Op
       ({UNCONNECTED_HIER_Z25, Op[2:0]}), .Carryout (ucarryout[26]),
       .Carryin (ucarryout[25]), .usum (Result[26]));
  alu_unit_27 alu_unit27(.A (A[27]), .B (B[27]), .Op
       ({UNCONNECTED_HIER_Z26, Op[2:0]}), .Carryout (ucarryout[27]),
       .Carryin (ucarryout[26]), .usum (Result[27]));
  alu_unit_28 alu_unit28(.A (A[28]), .B (B[28]), .Op
       ({UNCONNECTED_HIER_Z27, Op[2:0]}), .Carryout (ucarryout[28]),
       .Carryin (ucarryout[27]), .usum (Result[28]));
  alu_unit_29 alu_unit29(.A (A[29]), .B (B[29]), .Op
       ({UNCONNECTED_HIER_Z28, Op[2:0]}), .Carryout (ucarryout[29]),
       .Carryin (ucarryout[28]), .usum (Result[29]));
  alu_unit_30 alu_unit30(.A (A[30]), .B (B[30]), .Op
       ({UNCONNECTED_HIER_Z29, Op[2:0]}), .Carryout (ucarryout[30]),
       .Carryin (ucarryout[29]), .usum (Result[30]));
  alu_msb alu_unit31(.A (A[31]), .B (B[31]), .Op
       ({UNCONNECTED_HIER_Z30, Op[2:0]}), .Carryout (Carryout),
       .Carryin (ucarryout[30]), .usum (Result[31]), .Overflow
       (Overflow), .Set (Set));
  and_gate and_slt3(.x (t8), .y (t6), .z (t_slt));
  and_gate and_sltu3(.x (t10), .y (t7), .z (t_sltu));
  and_gate andslt1(.x (Op[0]), .y (Op[2]), .z (t6));
  and_gate andsltu1(.x (Op[1]), .y (Op[2]), .z (t7));
  mux_32 muxslt1(.sel (t_slt), .src0 (Result), .src1 ({n_104, n_105,
       n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113, n_114,
       n_115, n_116, n_117, n_118, n_119, n_120, n_121, n_122, n_123,
       n_124, n_125, n_126, n_127, n_128, n_129, n_130, n_131, n_132,
       n_133, n_134, Set}), .z (result0));
  mux_32 muxsltu1(.sel (t_sltu), .src0 (result0), .src1 ({n_104, n_105,
       n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113, n_114,
       n_115, n_116, n_117, n_118, n_119, n_120, n_121, n_122, n_123,
       n_124, n_125, n_126, n_127, n_128, n_129, n_130, n_131, n_132,
       n_133, n_134, Set}), .z (Final_result));
  not_gate not_slt(.x (Op[1]), .z (t8));
  not_gate not_sltu1(.x (Op[0]), .z (t10));
endmodule

module sll(A, B, Op, Carryout, Overflow, Result);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow;
  wire [31:0] Result;
  wire [31:0] S0;
  wire [31:0] S0_out;
  wire [31:0] S1;
  wire [31:0] S1_out;
  wire [31:0] S2;
  wire [31:0] S2_out;
  wire [31:0] S3;
  wire [31:0] S3_out;
  wire [31:0] S4;
  mux_32 mux_1(.sel (B[0]), .src0 (A), .src1 (S0), .z (S0_out));
  mux_32 mux_2(.sel (B[1]), .src0 (S0_out), .src1 (S1), .z (S1_out));
  mux_32 mux_3(.sel (B[2]), .src0 (S1_out), .src1 (S2), .z (S2_out));
  mux_32 mux_4(.sel (B[3]), .src0 (S2_out), .src1 (S3), .z (S3_out));
  mux_32 mux_5(.sel (B[4]), .src0 (S3_out), .src1 (S4), .z (Result));
  or_gate_32 ors0(.x ({A[30:0], 1'b0}), .y
       (32'b00000000000000000000000000000000), .z (S0));
  or_gate_32 ors1(.x ({S0_out[29:0], 2'b00}), .y
       (32'b00000000000000000000000000000000), .z (S1));
  or_gate_32 ors2(.x ({S1_out[27:0], 4'b0000}), .y
       (32'b00000000000000000000000000000000), .z (S2));
  or_gate_32 ors3(.x ({S2_out[23:0], 8'b00000000}), .y
       (32'b00000000000000000000000000000000), .z (S3));
  or_gate_32 ors4(.x ({S3_out[15:0], 16'b0000000000000000}), .y
       (32'b00000000000000000000000000000000), .z (S4));
endmodule

module srl(A, B, Op, Carryout, Overflow, Result);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow;
  wire [31:0] Result;
  wire [31:0] S0;
  wire [31:0] S0_out;
  wire [31:0] S1;
  wire [31:0] S1_out;
  wire [31:0] S2;
  wire [31:0] S2_out;
  wire [31:0] S3;
  wire [31:0] S3_out;
  wire [31:0] S4;
  mux_32 mux_1(.sel (B[0]), .src0 (A), .src1 (S0), .z (S0_out));
  mux_32 mux_2(.sel (B[1]), .src0 (S0_out), .src1 (S1), .z (S1_out));
  mux_32 mux_3(.sel (B[2]), .src0 (S1_out), .src1 (S2), .z (S2_out));
  mux_32 mux_4(.sel (B[3]), .src0 (S2_out), .src1 (S3), .z (S3_out));
  mux_32 mux_5(.sel (B[4]), .src0 (S3_out), .src1 (S4), .z (Result));
  or_gate_32 ors0(.x ({1'b0, A[31:1]}), .y
       (32'b00000000000000000000000000000000), .z (S0));
  or_gate_32 ors1(.x ({2'b00, S0_out[31:2]}), .y
       (32'b00000000000000000000000000000000), .z (S1));
  or_gate_32 ors2(.x ({4'b0000, S1_out[31:4]}), .y
       (32'b00000000000000000000000000000000), .z (S2));
  or_gate_32 ors3(.x ({8'b00000000, S2_out[31:8]}), .y
       (32'b00000000000000000000000000000000), .z (S3));
  or_gate_32 ors4(.x ({16'b0000000000000000, S3_out[31:16]}), .y
       (32'b00000000000000000000000000000000), .z (S4));
endmodule

module alu(A, B, Op, Carryout, Overflow, Zero, Result, Set);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow, Zero, Set;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow, Zero, Set;
  wire [31:0] Result;
  wire [31:0] Result_andsub;
  wire [31:0] Result_sll;
  wire [31:0] t4;
  wire [31:0] Result_srl;
  wire Carryout_andsub, Carryout_sll, Carryout_srl, Overflow_andsub,
       Overflow_sll, Overflow_srl, UNCONNECTED_HIER_Z31,
       UNCONNECTED_HIER_Z32;
  wire UNCONNECTED_HIER_Z33, UNCONNECTED_HIER_Z34,
       UNCONNECTED_HIER_Z35, UNCONNECTED_HIER_Z36,
       UNCONNECTED_HIER_Z37, UNCONNECTED_HIER_Z38,
       UNCONNECTED_HIER_Z39, UNCONNECTED_HIER_Z40;
  wire UNCONNECTED_HIER_Z41, UNCONNECTED_HIER_Z42,
       UNCONNECTED_HIER_Z43, UNCONNECTED_HIER_Z44,
       UNCONNECTED_HIER_Z45, UNCONNECTED_HIER_Z46,
       UNCONNECTED_HIER_Z47, UNCONNECTED_HIER_Z48;
  wire UNCONNECTED_HIER_Z49, UNCONNECTED_HIER_Z50,
       UNCONNECTED_HIER_Z51, UNCONNECTED_HIER_Z52,
       UNCONNECTED_HIER_Z53, UNCONNECTED_HIER_Z54,
       UNCONNECTED_HIER_Z55, UNCONNECTED_HIER_Z56;
  wire UNCONNECTED_HIER_Z57, UNCONNECTED_HIER_Z58,
       UNCONNECTED_HIER_Z59, UNCONNECTED_HIER_Z60,
       UNCONNECTED_HIER_Z61, UNCONNECTED_HIER_Z62,
       UNCONNECTED_HIER_Z63, UNCONNECTED_HIER_Z64;
  wire UNCONNECTED_HIER_Z65, UNCONNECTED_HIER_Z66,
       UNCONNECTED_HIER_Z67, UNCONNECTED_HIER_Z68,
       UNCONNECTED_HIER_Z69, UNCONNECTED_HIER_Z70,
       UNCONNECTED_HIER_Z71, UNCONNECTED_HIER_Z72;
  wire UNCONNECTED_HIER_Z73, UNCONNECTED_HIER_Z74,
       UNCONNECTED_HIER_Z75, UNCONNECTED_HIER_Z76,
       UNCONNECTED_HIER_Z77, UNCONNECTED_HIER_Z78,
       UNCONNECTED_HIER_Z79, UNCONNECTED_HIER_Z80;
  wire UNCONNECTED_HIER_Z81, UNCONNECTED_HIER_Z82,
       UNCONNECTED_HIER_Z83, UNCONNECTED_HIER_Z84,
       UNCONNECTED_HIER_Z85, UNCONNECTED_HIER_Z86,
       UNCONNECTED_HIER_Z87, UNCONNECTED_HIER_Z88;
  wire UNCONNECTED_HIER_Z89, UNCONNECTED_HIER_Z90,
       UNCONNECTED_HIER_Z91, UNCONNECTED_HIER_Z92,
       UNCONNECTED_HIER_Z93, t1, t2, t3;
  wire z1, z2, z3, z4, z5, z6, z7, z8;
  wire z9, z10, z11, z12, z13, z14, z15, z16;
  wire z17, z18, z19, z20, z21, z22, z23, z24;
  wire z25, z26, z27, z28, z29, z30, z31;
  and_gate andcarry(.x (t3), .y (Carryout_andsub), .z (Carryout));
  and_gate andover(.x (t3), .y (Overflow_andsub), .z (Overflow));
  and_gate andsll1(.x (Op[3]), .y (Op[0]), .z (t1));
  and_gate andsrl1(.x (Op[3]), .y (Op[1]), .z (t2));
  alu_32 andsub(.A (A), .B (B), .Op ({UNCONNECTED_HIER_Z31, Op[2:0]}),
       .Carryout (Carryout_andsub), .Overflow (Overflow_andsub),
       .Final_result (Result_andsub), .Set (Set));
  mux_32 mux1(.sel (Op[3]), .src0 (Result_andsub), .src1 (Result_sll),
       .z (t4));
  mux_32 mux2(.sel (t2), .src0 (t4), .src1 (Result_srl), .z (Result));
  not_gate notop3(.x (Op[3]), .z (t3));
  or_gate orz1(.x (Result[0]), .y (Result[1]), .z (z1));
  or_gate orz2(.x (z1), .y (Result[2]), .z (z2));
  or_gate orz3(.x (z2), .y (Result[3]), .z (z3));
  or_gate orz4(.x (z3), .y (Result[4]), .z (z4));
  or_gate orz5(.x (z4), .y (Result[5]), .z (z5));
  or_gate orz6(.x (z5), .y (Result[6]), .z (z6));
  or_gate orz7(.x (z6), .y (Result[7]), .z (z7));
  or_gate orz8(.x (z7), .y (Result[8]), .z (z8));
  or_gate orz9(.x (z8), .y (Result[9]), .z (z9));
  or_gate orz10(.x (z9), .y (Result[10]), .z (z10));
  or_gate orz11(.x (z10), .y (Result[11]), .z (z11));
  or_gate orz12(.x (z11), .y (Result[12]), .z (z12));
  or_gate orz13(.x (z12), .y (Result[13]), .z (z13));
  or_gate orz14(.x (z13), .y (Result[14]), .z (z14));
  or_gate orz15(.x (z14), .y (Result[15]), .z (z15));
  or_gate orz16(.x (z15), .y (Result[16]), .z (z16));
  or_gate orz17(.x (z16), .y (Result[17]), .z (z17));
  or_gate orz18(.x (z17), .y (Result[18]), .z (z18));
  or_gate orz19(.x (z18), .y (Result[19]), .z (z19));
  or_gate orz20(.x (z19), .y (Result[20]), .z (z20));
  or_gate orz21(.x (z20), .y (Result[21]), .z (z21));
  or_gate orz22(.x (z21), .y (Result[22]), .z (z22));
  or_gate orz23(.x (z22), .y (Result[23]), .z (z23));
  or_gate orz24(.x (z23), .y (Result[24]), .z (z24));
  or_gate orz25(.x (z24), .y (Result[25]), .z (z25));
  or_gate orz26(.x (z25), .y (Result[26]), .z (z26));
  or_gate orz27(.x (z26), .y (Result[27]), .z (z27));
  or_gate orz28(.x (z27), .y (Result[28]), .z (z28));
  or_gate orz29(.x (z28), .y (Result[29]), .z (z29));
  or_gate orz30(.x (z29), .y (Result[30]), .z (z30));
  or_gate orz31(.x (z30), .y (Result[31]), .z (z31));
  sll sll_instance(.A (A), .B ({UNCONNECTED_HIER_Z58,
       UNCONNECTED_HIER_Z57, UNCONNECTED_HIER_Z56,
       UNCONNECTED_HIER_Z55, UNCONNECTED_HIER_Z54,
       UNCONNECTED_HIER_Z53, UNCONNECTED_HIER_Z52,
       UNCONNECTED_HIER_Z51, UNCONNECTED_HIER_Z50,
       UNCONNECTED_HIER_Z49, UNCONNECTED_HIER_Z48,
       UNCONNECTED_HIER_Z47, UNCONNECTED_HIER_Z46,
       UNCONNECTED_HIER_Z45, UNCONNECTED_HIER_Z44,
       UNCONNECTED_HIER_Z43, UNCONNECTED_HIER_Z42,
       UNCONNECTED_HIER_Z41, UNCONNECTED_HIER_Z40,
       UNCONNECTED_HIER_Z39, UNCONNECTED_HIER_Z38,
       UNCONNECTED_HIER_Z37, UNCONNECTED_HIER_Z36,
       UNCONNECTED_HIER_Z35, UNCONNECTED_HIER_Z34,
       UNCONNECTED_HIER_Z33, UNCONNECTED_HIER_Z32, B[4:0]}), .Op
       ({UNCONNECTED_HIER_Z62, UNCONNECTED_HIER_Z61,
       UNCONNECTED_HIER_Z60, UNCONNECTED_HIER_Z59}), .Carryout
       (Carryout_sll), .Overflow (Overflow_sll), .Result (Result_sll));
  srl srl_instance(.A (A), .B ({UNCONNECTED_HIER_Z89,
       UNCONNECTED_HIER_Z88, UNCONNECTED_HIER_Z87,
       UNCONNECTED_HIER_Z86, UNCONNECTED_HIER_Z85,
       UNCONNECTED_HIER_Z84, UNCONNECTED_HIER_Z83,
       UNCONNECTED_HIER_Z82, UNCONNECTED_HIER_Z81,
       UNCONNECTED_HIER_Z80, UNCONNECTED_HIER_Z79,
       UNCONNECTED_HIER_Z78, UNCONNECTED_HIER_Z77,
       UNCONNECTED_HIER_Z76, UNCONNECTED_HIER_Z75,
       UNCONNECTED_HIER_Z74, UNCONNECTED_HIER_Z73,
       UNCONNECTED_HIER_Z72, UNCONNECTED_HIER_Z71,
       UNCONNECTED_HIER_Z70, UNCONNECTED_HIER_Z69,
       UNCONNECTED_HIER_Z68, UNCONNECTED_HIER_Z67,
       UNCONNECTED_HIER_Z66, UNCONNECTED_HIER_Z65,
       UNCONNECTED_HIER_Z64, UNCONNECTED_HIER_Z63, B[4:0]}), .Op
       ({UNCONNECTED_HIER_Z93, UNCONNECTED_HIER_Z92,
       UNCONNECTED_HIER_Z91, UNCONNECTED_HIER_Z90}), .Carryout
       (Carryout_srl), .Overflow (Overflow_srl), .Result (Result_srl));
  not_gate zero(.x (z31), .z (Zero));
endmodule

module and_6_9(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module and_6_10(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module forwarding_ex(clk, rs, rt, ALUSrc, towrite_ex, towrite_mem,
     result, result_mem, A, B, opA, opB, lw_stall_ex,
     Branch_stall_forwarding, sw_ex, sw_mem, Branch_ex);
  input clk, lw_stall_ex, Branch_stall_forwarding, sw_ex, sw_mem,
       Branch_ex;
  input [4:0] rs, rt, towrite_ex, towrite_mem;
  input [1:0] ALUSrc;
  input [31:0] result, result_mem, A, B;
  output [31:0] opA, opB;
  wire clk, lw_stall_ex, Branch_stall_forwarding, sw_ex, sw_mem,
       Branch_ex;
  wire [4:0] rs, rt, towrite_ex, towrite_mem;
  wire [1:0] ALUSrc;
  wire [31:0] result, result_mem, A, B;
  wire [31:0] opA, opB;
  wire [4:0] compareA_ex;
  wire [4:0] compareA_mem;
  wire [4:0] compareB_ex;
  wire [4:0] compareB_mem;
  wire [31:0] result_A;
  wire [31:0] opA_new;
  wire [31:0] opB_tmp3;
  wire [31:0] opB_tmp2;
  wire [31:0] result_B;
  wire [31:0] opB_tmp1;
  wire [31:0] opA_tmp1;
  wire [31:0] opB_new;
  wire [31:0] opA_lw;
  wire [31:0] opB_lw;
  wire Branch_mem_forwarding, ex, mem, r0_ex, r0_mem, r1_ex, r1_mem,
       r2_ex;
  wire r2_mem, sel_A, sel_A_ex, sel_A_ex_pre, sel_A_mem, sel_A_mem_pre,
       sel_B, sel_B_ex;
  wire sel_B_ex_pre, sel_B_mem, sel_B_mem_pre, w0_ex, w0_mem, w1_ex,
       w1_mem, w2_ex;
  wire w2_mem;
  or_gate A_or_gate0_ex(.x (compareA_ex[0]), .y (compareA_ex[1]), .z
       (w0_ex));
  or_gate A_or_gate0_mem(.x (compareA_mem[0]), .y (compareA_mem[1]), .z
       (w0_mem));
  or_gate A_or_gate1_ex(.x (compareA_ex[2]), .y (w0_ex), .z (w1_ex));
  or_gate A_or_gate1_mem(.x (compareA_mem[2]), .y (w0_mem), .z
       (w1_mem));
  or_gate A_or_gate2_ex(.x (compareA_ex[3]), .y (w1_ex), .z (w2_ex));
  or_gate A_or_gate2_mem(.x (compareA_mem[3]), .y (w1_mem), .z
       (w2_mem));
  or_gate A_or_gate3_ex(.x (compareA_ex[4]), .y (w2_ex), .z
       (sel_A_ex_pre));
  or_gate A_or_gate3_mem(.x (compareA_mem[4]), .y (w2_mem), .z
       (sel_A_mem_pre));
  or_gate B_or_gate0_ex(.x (compareB_ex[0]), .y (compareB_ex[1]), .z
       (r0_ex));
  or_gate B_or_gate0_mem(.x (compareB_mem[0]), .y (compareB_mem[1]), .z
       (r0_mem));
  or_gate B_or_gate1_ex(.x (compareB_ex[2]), .y (r0_ex), .z (r1_ex));
  or_gate B_or_gate1_mem(.x (compareB_mem[2]), .y (r0_mem), .z
       (r1_mem));
  or_gate B_or_gate2_ex(.x (compareB_ex[3]), .y (r1_ex), .z (r2_ex));
  or_gate B_or_gate2_mem(.x (compareB_mem[3]), .y (r1_mem), .z
       (r2_mem));
  or_gate B_or_gate3_ex(.x (compareB_ex[4]), .y (r2_ex), .z
       (sel_B_ex_pre));
  or_gate B_or_gate3_mem(.x (compareB_mem[4]), .y (r2_mem), .z
       (sel_B_mem_pre));
  xor_gate \genblk1[0].A_compare_ex (.x (rs[0]), .y (towrite_ex[0]), .z
       (compareA_ex[0]));
  xor_gate \genblk1[0].B_compare_ex (.x (rt[0]), .y (towrite_ex[0]), .z
       (compareB_ex[0]));
  xor_gate \genblk1[1].A_compare_ex (.x (rs[1]), .y (towrite_ex[1]), .z
       (compareA_ex[1]));
  xor_gate \genblk1[1].B_compare_ex (.x (rt[1]), .y (towrite_ex[1]), .z
       (compareB_ex[1]));
  xor_gate \genblk1[2].A_compare_ex (.x (rs[2]), .y (towrite_ex[2]), .z
       (compareA_ex[2]));
  xor_gate \genblk1[2].B_compare_ex (.x (rt[2]), .y (towrite_ex[2]), .z
       (compareB_ex[2]));
  xor_gate \genblk1[3].A_compare_ex (.x (rs[3]), .y (towrite_ex[3]), .z
       (compareA_ex[3]));
  xor_gate \genblk1[3].B_compare_ex (.x (rt[3]), .y (towrite_ex[3]), .z
       (compareB_ex[3]));
  xor_gate \genblk1[4].A_compare_ex (.x (rs[4]), .y (towrite_ex[4]), .z
       (compareA_ex[4]));
  xor_gate \genblk1[4].B_compare_ex (.x (rt[4]), .y (towrite_ex[4]), .z
       (compareB_ex[4]));
  xor_gate \genblk2[0].A_compare_mem (.x (rs[0]), .y (towrite_mem[0]),
       .z (compareA_mem[0]));
  xor_gate \genblk2[0].B_compare_mem (.x (rt[0]), .y (towrite_mem[0]),
       .z (compareB_mem[0]));
  xor_gate \genblk2[1].A_compare_mem (.x (rs[1]), .y (towrite_mem[1]),
       .z (compareA_mem[1]));
  xor_gate \genblk2[1].B_compare_mem (.x (rt[1]), .y (towrite_mem[1]),
       .z (compareB_mem[1]));
  xor_gate \genblk2[2].A_compare_mem (.x (rs[2]), .y (towrite_mem[2]),
       .z (compareA_mem[2]));
  xor_gate \genblk2[2].B_compare_mem (.x (rt[2]), .y (towrite_mem[2]),
       .z (compareB_mem[2]));
  xor_gate \genblk2[3].A_compare_mem (.x (rs[3]), .y (towrite_mem[3]),
       .z (compareA_mem[3]));
  xor_gate \genblk2[3].B_compare_mem (.x (rt[3]), .y (towrite_mem[3]),
       .z (compareB_mem[3]));
  xor_gate \genblk2[4].A_compare_mem (.x (rs[4]), .y (towrite_mem[4]),
       .z (compareA_mem[4]));
  xor_gate \genblk2[4].B_compare_mem (.x (rt[4]), .y (towrite_mem[4]),
       .z (compareB_mem[4]));
  mux_32 mux_32_A(.sel (sel_A), .src0 (result_A), .src1 (A), .z
       (opA_new));
  mux_32 mux_32_ALUSrc1(.sel (ALUSrc[0]), .src0 (opB_tmp3), .src1 (B),
       .z (opB_tmp2));
  mux_32 mux_32_ALUSrc2(.sel (ALUSrc[1]), .src0 (opB_tmp2), .src1 (B),
       .z (opB));
  mux_32 mux_32_B(.sel (sel_B), .src0 (result_B), .src1 (B), .z
       (opB_tmp1));
  mux mux_A(.sel (sel_A_ex), .src0 (sel_A_ex), .src1 (sel_A_mem), .z
       (sel_A));
  mux mux_A_sw1(.sel (ex), .src0 (sel_A_ex_pre), .src1 (1'b1), .z
       (sel_A_ex));
  mux mux_A_sw2(.sel (mem), .src0 (sel_A_mem_pre), .src1 (1'b1), .z
       (sel_A_mem));
  mux mux_B(.sel (sel_B_ex), .src0 (sel_B_ex), .src1 (sel_B_mem), .z
       (sel_B));
  mux mux_B_sw1(.sel (ex), .src0 (sel_B_ex_pre), .src1 (1'b1), .z
       (sel_B_ex));
  mux mux_B_sw2(.sel (mem), .src0 (sel_B_mem_pre), .src1 (1'b1), .z
       (sel_B_mem));
  mux_32 mux_branch0(.sel (Branch_stall_forwarding), .src0 (opA_tmp1),
       .src1 (A), .z (opA));
  mux_32 mux_branch1(.sel (Branch_stall_forwarding), .src0 (opB_new),
       .src1 (B), .z (opB_tmp3));
  mux_32 mux_lw0(.sel (lw_stall_ex), .src0 (opA_new), .src1 (opA_lw),
       .z (opA_tmp1));
  mux_32 mux_lw1(.sel (lw_stall_ex), .src0 (opB_tmp1), .src1 (opB_lw),
       .z (opB_new));
  mux_32 mux_resultA0(.sel (sel_A_ex), .src0 (result), .src1
       (result_mem), .z (result_A));
  mux_32 mux_resultA1(.sel (sel_A_mem), .src0 (result_mem), .src1 (A),
       .z (opA_lw));
  mux_32 mux_resultB0(.sel (sel_B_ex), .src0 (result), .src1
       (result_mem), .z (result_B));
  mux_32 mux_resultB1(.sel (sel_B_mem), .src0 (result_mem), .src1 (B),
       .z (opB_lw));
  or_gate or_gate4_ex(.x (sw_ex), .y (Branch_ex), .z (ex));
  or_gate or_gate4_mem(.x (sw_mem), .y (Branch_mem_forwarding), .z
       (mem));
  dff reg_branch_mem(.clk (clk), .d (Branch_ex), .q
       (Branch_mem_forwarding));
endmodule

module EX_stage(clk, A, B, Op, Carryout, Overflow, Zero, Result,
     result_mem, Set, immed, immed_ex, opcode, opcode_ex, Branch,
     MemtoReg, RegWrite, MemWrite, Branch_ex, MemtoReg_ex, RegWrite_ex,
     MemWrite_ex, towrite, towrite_ex, towrite_mem, mem_data,
     mem_data_ex, rs, rt, ALUSrc, lw_stall_id, Branch_stall_forwarding,
     initPC_delay4, initPC_delay6, valid);
  input clk, Branch, MemtoReg, RegWrite, MemWrite, lw_stall_id,
       Branch_stall_forwarding, initPC_delay4, initPC_delay6;
  input [31:0] A, B, result_mem, mem_data;
  input [3:0] Op;
  input [15:0] immed;
  input [5:0] opcode;
  input [4:0] towrite, towrite_mem, rs, rt;
  input [1:0] ALUSrc;
  output Carryout, Overflow, Zero, Set, Branch_ex, MemtoReg_ex,
       RegWrite_ex, MemWrite_ex, valid;
  output [31:0] Result, mem_data_ex;
  output [15:0] immed_ex;
  output [5:0] opcode_ex;
  output [4:0] towrite_ex;
  wire clk, Branch, MemtoReg, RegWrite, MemWrite, lw_stall_id,
       Branch_stall_forwarding, initPC_delay4, initPC_delay6;
  wire [31:0] A, B, result_mem, mem_data;
  wire [3:0] Op;
  wire [15:0] immed;
  wire [5:0] opcode;
  wire [4:0] towrite, towrite_mem, rs, rt;
  wire [1:0] ALUSrc;
  wire Carryout, Overflow, Zero, Set, Branch_ex, MemtoReg_ex,
       RegWrite_ex, MemWrite_ex, valid;
  wire [31:0] Result, mem_data_ex;
  wire [15:0] immed_ex;
  wire [5:0] opcode_ex;
  wire [4:0] towrite_ex;
  wire [31:0] opA;
  wire [31:0] opB;
  wire [31:0] Result_tmp;
  wire [5:0] NotOp_ex;
  wire [5:0] opcode_mem;
  wire [5:0] NotOp_mem;
  wire Carryout_tmp, NotinitPC_delay4, NotinitPC_delay6, Overflow_tmp,
       Set_tmp, Zero_tmp, invZero, lw_stall_delay;
  wire lw_stall_ex, n_53, n_56, sw_ex, sw_ex_new, sw_mem, sw_mem_new,
       sw_mem_new2;
  wire valid_beyond, valid_bgtz, valid_zero;
  and_gate and0(.x (sw_ex), .y (NotinitPC_delay4), .z (sw_ex_new));
  and_gate and1(.x (sw_mem), .y (NotinitPC_delay6), .z (sw_mem_new));
  and_gate and2(.x (sw_mem_new), .y (NotinitPC_delay4), .z
       (sw_mem_new2));
  and_gate and_bgtz(.x (valid_beyond), .y (invZero), .z (valid_bgtz));
  alu cpu_alu(.A (opA), .B (opB), .Op (Op), .Carryout (Carryout_tmp),
       .Overflow (Overflow_tmp), .Zero (Zero_tmp), .Result
       (Result_tmp), .Set (Set_tmp));
  and_6_9 csand4(.a (opcode_ex[5]), .b (NotOp_ex[4]), .c
       (opcode_ex[3]), .d (NotOp_ex[2]), .e (opcode_ex[1]), .f
       (opcode_ex[0]), .z (sw_ex));
  and_6_10 csand5(.a (opcode_mem[5]), .b (NotOp_mem[4]), .c
       (opcode_mem[3]), .d (NotOp_mem[2]), .e (opcode_mem[1]), .f
       (opcode_mem[0]), .z (sw_mem));
  forwarding_ex forwarding_ex(.clk (clk), .rs (rs), .rt (rt), .ALUSrc
       (ALUSrc), .towrite_ex (towrite_ex), .towrite_mem (towrite_mem),
       .result (Result), .result_mem (result_mem), .A (A), .B (B), .opA
       (opA), .opB (opB), .lw_stall_ex (lw_stall_delay),
       .Branch_stall_forwarding (Branch_stall_forwarding), .sw_ex
       (sw_ex_new), .sw_mem (sw_mem_new2), .Branch_ex (Branch_ex));
  dff \genblk1[0].reg32_Ex (.clk (clk), .d (Result_tmp[0]), .q
       (Result[0]));
  dff \genblk1[0].reg32_mem_data (.clk (clk), .d (mem_data[0]), .q
       (mem_data_ex[0]));
  dff \genblk1[1].reg32_Ex (.clk (clk), .d (Result_tmp[1]), .q
       (Result[1]));
  dff \genblk1[1].reg32_mem_data (.clk (clk), .d (mem_data[1]), .q
       (mem_data_ex[1]));
  dff \genblk1[2].reg32_Ex (.clk (clk), .d (Result_tmp[2]), .q
       (Result[2]));
  dff \genblk1[2].reg32_mem_data (.clk (clk), .d (mem_data[2]), .q
       (mem_data_ex[2]));
  dff \genblk1[3].reg32_Ex (.clk (clk), .d (Result_tmp[3]), .q
       (Result[3]));
  dff \genblk1[3].reg32_mem_data (.clk (clk), .d (mem_data[3]), .q
       (mem_data_ex[3]));
  dff \genblk1[4].reg32_Ex (.clk (clk), .d (Result_tmp[4]), .q
       (Result[4]));
  dff \genblk1[4].reg32_mem_data (.clk (clk), .d (mem_data[4]), .q
       (mem_data_ex[4]));
  dff \genblk1[5].reg32_Ex (.clk (clk), .d (Result_tmp[5]), .q
       (Result[5]));
  dff \genblk1[5].reg32_mem_data (.clk (clk), .d (mem_data[5]), .q
       (mem_data_ex[5]));
  dff \genblk1[6].reg32_Ex (.clk (clk), .d (Result_tmp[6]), .q
       (Result[6]));
  dff \genblk1[6].reg32_mem_data (.clk (clk), .d (mem_data[6]), .q
       (mem_data_ex[6]));
  dff \genblk1[7].reg32_Ex (.clk (clk), .d (Result_tmp[7]), .q
       (Result[7]));
  dff \genblk1[7].reg32_mem_data (.clk (clk), .d (mem_data[7]), .q
       (mem_data_ex[7]));
  dff \genblk1[8].reg32_Ex (.clk (clk), .d (Result_tmp[8]), .q
       (Result[8]));
  dff \genblk1[8].reg32_mem_data (.clk (clk), .d (mem_data[8]), .q
       (mem_data_ex[8]));
  dff \genblk1[9].reg32_Ex (.clk (clk), .d (Result_tmp[9]), .q
       (Result[9]));
  dff \genblk1[9].reg32_mem_data (.clk (clk), .d (mem_data[9]), .q
       (mem_data_ex[9]));
  dff \genblk1[10].reg32_Ex (.clk (clk), .d (Result_tmp[10]), .q
       (Result[10]));
  dff \genblk1[10].reg32_mem_data (.clk (clk), .d (mem_data[10]), .q
       (mem_data_ex[10]));
  dff \genblk1[11].reg32_Ex (.clk (clk), .d (Result_tmp[11]), .q
       (Result[11]));
  dff \genblk1[11].reg32_mem_data (.clk (clk), .d (mem_data[11]), .q
       (mem_data_ex[11]));
  dff \genblk1[12].reg32_Ex (.clk (clk), .d (Result_tmp[12]), .q
       (Result[12]));
  dff \genblk1[12].reg32_mem_data (.clk (clk), .d (mem_data[12]), .q
       (mem_data_ex[12]));
  dff \genblk1[13].reg32_Ex (.clk (clk), .d (Result_tmp[13]), .q
       (Result[13]));
  dff \genblk1[13].reg32_mem_data (.clk (clk), .d (mem_data[13]), .q
       (mem_data_ex[13]));
  dff \genblk1[14].reg32_Ex (.clk (clk), .d (Result_tmp[14]), .q
       (Result[14]));
  dff \genblk1[14].reg32_mem_data (.clk (clk), .d (mem_data[14]), .q
       (mem_data_ex[14]));
  dff \genblk1[15].reg32_Ex (.clk (clk), .d (Result_tmp[15]), .q
       (Result[15]));
  dff \genblk1[15].reg32_mem_data (.clk (clk), .d (mem_data[15]), .q
       (mem_data_ex[15]));
  dff \genblk1[16].reg32_Ex (.clk (clk), .d (Result_tmp[16]), .q
       (Result[16]));
  dff \genblk1[16].reg32_mem_data (.clk (clk), .d (mem_data[16]), .q
       (mem_data_ex[16]));
  dff \genblk1[17].reg32_Ex (.clk (clk), .d (Result_tmp[17]), .q
       (Result[17]));
  dff \genblk1[17].reg32_mem_data (.clk (clk), .d (mem_data[17]), .q
       (mem_data_ex[17]));
  dff \genblk1[18].reg32_Ex (.clk (clk), .d (Result_tmp[18]), .q
       (Result[18]));
  dff \genblk1[18].reg32_mem_data (.clk (clk), .d (mem_data[18]), .q
       (mem_data_ex[18]));
  dff \genblk1[19].reg32_Ex (.clk (clk), .d (Result_tmp[19]), .q
       (Result[19]));
  dff \genblk1[19].reg32_mem_data (.clk (clk), .d (mem_data[19]), .q
       (mem_data_ex[19]));
  dff \genblk1[20].reg32_Ex (.clk (clk), .d (Result_tmp[20]), .q
       (Result[20]));
  dff \genblk1[20].reg32_mem_data (.clk (clk), .d (mem_data[20]), .q
       (mem_data_ex[20]));
  dff \genblk1[21].reg32_Ex (.clk (clk), .d (Result_tmp[21]), .q
       (Result[21]));
  dff \genblk1[21].reg32_mem_data (.clk (clk), .d (mem_data[21]), .q
       (mem_data_ex[21]));
  dff \genblk1[22].reg32_Ex (.clk (clk), .d (Result_tmp[22]), .q
       (Result[22]));
  dff \genblk1[22].reg32_mem_data (.clk (clk), .d (mem_data[22]), .q
       (mem_data_ex[22]));
  dff \genblk1[23].reg32_Ex (.clk (clk), .d (Result_tmp[23]), .q
       (Result[23]));
  dff \genblk1[23].reg32_mem_data (.clk (clk), .d (mem_data[23]), .q
       (mem_data_ex[23]));
  dff \genblk1[24].reg32_Ex (.clk (clk), .d (Result_tmp[24]), .q
       (Result[24]));
  dff \genblk1[24].reg32_mem_data (.clk (clk), .d (mem_data[24]), .q
       (mem_data_ex[24]));
  dff \genblk1[25].reg32_Ex (.clk (clk), .d (Result_tmp[25]), .q
       (Result[25]));
  dff \genblk1[25].reg32_mem_data (.clk (clk), .d (mem_data[25]), .q
       (mem_data_ex[25]));
  dff \genblk1[26].reg32_Ex (.clk (clk), .d (Result_tmp[26]), .q
       (Result[26]));
  dff \genblk1[26].reg32_mem_data (.clk (clk), .d (mem_data[26]), .q
       (mem_data_ex[26]));
  dff \genblk1[27].reg32_Ex (.clk (clk), .d (Result_tmp[27]), .q
       (Result[27]));
  dff \genblk1[27].reg32_mem_data (.clk (clk), .d (mem_data[27]), .q
       (mem_data_ex[27]));
  dff \genblk1[28].reg32_Ex (.clk (clk), .d (Result_tmp[28]), .q
       (Result[28]));
  dff \genblk1[28].reg32_mem_data (.clk (clk), .d (mem_data[28]), .q
       (mem_data_ex[28]));
  dff \genblk1[29].reg32_Ex (.clk (clk), .d (Result_tmp[29]), .q
       (Result[29]));
  dff \genblk1[29].reg32_mem_data (.clk (clk), .d (mem_data[29]), .q
       (mem_data_ex[29]));
  dff \genblk1[30].reg32_Ex (.clk (clk), .d (Result_tmp[30]), .q
       (Result[30]));
  dff \genblk1[30].reg32_mem_data (.clk (clk), .d (mem_data[30]), .q
       (mem_data_ex[30]));
  dff \genblk1[31].reg32_Ex (.clk (clk), .d (Result_tmp[31]), .q
       (Result[31]));
  dff \genblk1[31].reg32_mem_data (.clk (clk), .d (mem_data[31]), .q
       (mem_data_ex[31]));
  dff \genblk2[0].reg_opcode0 (.clk (clk), .d (opcode[0]), .q
       (opcode_ex[0]));
  dff \genblk2[0].reg_opcode2 (.clk (clk), .d (opcode_ex[0]), .q
       (opcode_mem[0]));
  dff \genblk2[0].reg_towrite (.clk (clk), .d (towrite[0]), .q
       (towrite_ex[0]));
  dff \genblk2[1].reg_opcode0 (.clk (clk), .d (opcode[1]), .q
       (opcode_ex[1]));
  dff \genblk2[1].reg_opcode2 (.clk (clk), .d (opcode_ex[1]), .q
       (opcode_mem[1]));
  dff \genblk2[1].reg_towrite (.clk (clk), .d (towrite[1]), .q
       (towrite_ex[1]));
  dff \genblk2[2].reg_opcode0 (.clk (clk), .d (opcode[2]), .q
       (opcode_ex[2]));
  dff \genblk2[2].reg_opcode2 (.clk (clk), .d (opcode_ex[2]), .q
       (opcode_mem[2]));
  dff \genblk2[2].reg_towrite (.clk (clk), .d (towrite[2]), .q
       (towrite_ex[2]));
  dff \genblk2[3].reg_opcode0 (.clk (clk), .d (opcode[3]), .q
       (opcode_ex[3]));
  dff \genblk2[3].reg_opcode2 (.clk (clk), .d (opcode_ex[3]), .q
       (opcode_mem[3]));
  dff \genblk2[3].reg_towrite (.clk (clk), .d (towrite[3]), .q
       (towrite_ex[3]));
  dff \genblk2[4].reg_opcode0 (.clk (clk), .d (opcode[4]), .q
       (opcode_ex[4]));
  dff \genblk2[4].reg_opcode2 (.clk (clk), .d (opcode_ex[4]), .q
       (opcode_mem[4]));
  dff \genblk2[4].reg_towrite (.clk (clk), .d (towrite[4]), .q
       (towrite_ex[4]));
  dff \genblk3[0].reg_immed (.clk (clk), .d (immed[0]), .q
       (immed_ex[0]));
  dff \genblk3[1].reg_immed (.clk (clk), .d (immed[1]), .q
       (immed_ex[1]));
  dff \genblk3[2].reg_immed (.clk (clk), .d (immed[2]), .q
       (immed_ex[2]));
  dff \genblk3[3].reg_immed (.clk (clk), .d (immed[3]), .q
       (immed_ex[3]));
  dff \genblk3[4].reg_immed (.clk (clk), .d (immed[4]), .q
       (immed_ex[4]));
  dff \genblk3[5].reg_immed (.clk (clk), .d (immed[5]), .q
       (immed_ex[5]));
  dff \genblk3[6].reg_immed (.clk (clk), .d (immed[6]), .q
       (immed_ex[6]));
  dff \genblk3[7].reg_immed (.clk (clk), .d (immed[7]), .q
       (immed_ex[7]));
  dff \genblk3[8].reg_immed (.clk (clk), .d (immed[8]), .q
       (immed_ex[8]));
  dff \genblk3[9].reg_immed (.clk (clk), .d (immed[9]), .q
       (immed_ex[9]));
  dff \genblk3[10].reg_immed (.clk (clk), .d (immed[10]), .q
       (immed_ex[10]));
  dff \genblk3[11].reg_immed (.clk (clk), .d (immed[11]), .q
       (immed_ex[11]));
  dff \genblk3[12].reg_immed (.clk (clk), .d (immed[12]), .q
       (immed_ex[12]));
  dff \genblk3[13].reg_immed (.clk (clk), .d (immed[13]), .q
       (immed_ex[13]));
  dff \genblk3[14].reg_immed (.clk (clk), .d (immed[14]), .q
       (immed_ex[14]));
  dff \genblk3[15].reg_immed (.clk (clk), .d (immed[15]), .q
       (immed_ex[15]));
  mux mux_0(.sel (opcode[0]), .src0 (Zero_tmp), .src1 (invZero), .z
       (valid_zero));
  mux mux_1(.sel (opcode[1]), .src0 (valid_zero), .src1 (valid_bgtz),
       .z (valid));
  not_gate_n_n6 not0(.x (opcode_ex), .z (NotOp_ex));
  not_gate_n_n6 not1(.x (opcode_mem), .z (NotOp_mem));
  not_gate not2(.x (initPC_delay4), .z (NotinitPC_delay4));
  not_gate not3(.x (initPC_delay6), .z (NotinitPC_delay6));
  not_gate not_pc0(.x (Zero_tmp), .z (invZero));
  dff reg_Branch(.clk (clk), .d (Branch), .q (Branch_ex));
  dff reg_MemWrite(.clk (clk), .d (MemWrite), .q (MemWrite_ex));
  dff reg_MemtoReg(.clk (clk), .d (MemtoReg), .q (MemtoReg_ex));
  dff reg_Overflow(.clk (clk), .d (Overflow_tmp), .q (Overflow));
  dff reg_RegWrite(.clk (clk), .d (RegWrite), .q (RegWrite_ex));
  dff reg_Set(.clk (clk), .d (Set_tmp), .q (n_53));
  dff reg_Zero(.clk (clk), .d (Zero_tmp), .q (Zero));
  dff reg_carryout(.clk (clk), .d (Carryout_tmp), .q (n_56));
  dff reg_lw_stall_delay(.clk (clk), .d (lw_stall_ex), .q
       (lw_stall_delay));
  dff reg_lw_stall_ex(.clk (clk), .d (lw_stall_id), .q (lw_stall_ex));
  dff reg_opcode3(.clk (clk), .d (opcode[5]), .q (opcode_ex[5]));
  dff reg_opcode4(.clk (clk), .d (opcode_ex[5]), .q (opcode_mem[5]));
  xnor_gate xnor_pc0(.x (Result_tmp[31]), .y (Overflow_tmp), .z
       (valid_beyond));
endmodule

module and_6(a, b, c, d, e, f, z);
  input a, b, c, d, e, f;
  output z;
  wire a, b, c, d, e, f;
  wire z;
  wire t1, t2, t3, t4;
  and_gate aandg0(.x (a), .y (b), .z (t1));
  and_gate aandg1(.x (t1), .y (c), .z (t2));
  and_gate aandg2(.x (t2), .y (d), .z (t3));
  and_gate aandg3(.x (t3), .y (e), .z (t4));
  and_gate aandg4(.x (t4), .y (f), .z (z));
endmodule

module ID_stage(clk, opcode, opcode_if, rs, rt, rd, shamt, funct,
     funct_if, instr_if, immi, lw_stall, lw_stall_id);
  input clk;
  input [31:0] instr_if;
  output [5:0] opcode, opcode_if, funct, funct_if;
  output [4:0] rs, rt, rd, shamt;
  output [15:0] immi;
  output lw_stall, lw_stall_id;
  wire clk;
  wire [31:0] instr_if;
  wire [5:0] opcode, opcode_if, funct, funct_if;
  wire [4:0] rs, rt, rd, shamt;
  wire [15:0] immi;
  wire lw_stall, lw_stall_id;
  wire [5:0] NotOp;
  assign immi[6] = shamt[0];
  assign immi[7] = shamt[1];
  assign immi[8] = shamt[2];
  assign immi[9] = shamt[3];
  assign immi[10] = shamt[4];
  assign immi[11] = rd[0];
  assign immi[12] = rd[1];
  assign immi[13] = rd[2];
  assign immi[14] = rd[3];
  assign immi[15] = rd[4];
  assign opcode_if[0] = instr_if[26];
  assign opcode_if[1] = instr_if[27];
  assign opcode_if[2] = instr_if[28];
  assign opcode_if[3] = instr_if[29];
  assign opcode_if[4] = instr_if[30];
  assign opcode_if[5] = instr_if[31];
  and_6 csand4(.a (instr_if[31]), .b (NotOp[4]), .c (NotOp[3]), .d
       (NotOp[2]), .e (instr_if[27]), .f (instr_if[26]), .z (lw_stall));
  not_gate_n_n6 csnotg0(.x (instr_if[31:26]), .z (NotOp));
  dff \genblk1[0].reg32_instr_id (.clk (clk), .d (instr_if[0]), .q
       (funct[0]));
  dff \genblk1[1].reg32_instr_id (.clk (clk), .d (instr_if[1]), .q
       (funct[1]));
  dff \genblk1[2].reg32_instr_id (.clk (clk), .d (instr_if[2]), .q
       (funct[2]));
  dff \genblk1[3].reg32_instr_id (.clk (clk), .d (instr_if[3]), .q
       (funct[3]));
  dff \genblk1[4].reg32_instr_id (.clk (clk), .d (instr_if[4]), .q
       (funct[4]));
  dff \genblk1[5].reg32_instr_id (.clk (clk), .d (instr_if[5]), .q
       (funct[5]));
  dff \genblk1[6].reg32_instr_id (.clk (clk), .d (instr_if[6]), .q
       (shamt[0]));
  dff \genblk1[7].reg32_instr_id (.clk (clk), .d (instr_if[7]), .q
       (shamt[1]));
  dff \genblk1[8].reg32_instr_id (.clk (clk), .d (instr_if[8]), .q
       (shamt[2]));
  dff \genblk1[9].reg32_instr_id (.clk (clk), .d (instr_if[9]), .q
       (shamt[3]));
  dff \genblk1[10].reg32_instr_id (.clk (clk), .d (instr_if[10]), .q
       (shamt[4]));
  dff \genblk1[11].reg32_instr_id (.clk (clk), .d (instr_if[11]), .q
       (rd[0]));
  dff \genblk1[12].reg32_instr_id (.clk (clk), .d (instr_if[12]), .q
       (rd[1]));
  dff \genblk1[13].reg32_instr_id (.clk (clk), .d (instr_if[13]), .q
       (rd[2]));
  dff \genblk1[14].reg32_instr_id (.clk (clk), .d (instr_if[14]), .q
       (rd[3]));
  dff \genblk1[15].reg32_instr_id (.clk (clk), .d (instr_if[15]), .q
       (rd[4]));
  dff \genblk1[16].reg32_instr_id (.clk (clk), .d (instr_if[16]), .q
       (rt[0]));
  dff \genblk1[17].reg32_instr_id (.clk (clk), .d (instr_if[17]), .q
       (rt[1]));
  dff \genblk1[18].reg32_instr_id (.clk (clk), .d (instr_if[18]), .q
       (rt[2]));
  dff \genblk1[19].reg32_instr_id (.clk (clk), .d (instr_if[19]), .q
       (rt[3]));
  dff \genblk1[20].reg32_instr_id (.clk (clk), .d (instr_if[20]), .q
       (rt[4]));
  dff \genblk1[21].reg32_instr_id (.clk (clk), .d (instr_if[21]), .q
       (rs[0]));
  dff \genblk1[22].reg32_instr_id (.clk (clk), .d (instr_if[22]), .q
       (rs[1]));
  dff \genblk1[23].reg32_instr_id (.clk (clk), .d (instr_if[23]), .q
       (rs[2]));
  dff \genblk1[24].reg32_instr_id (.clk (clk), .d (instr_if[24]), .q
       (rs[3]));
  dff \genblk1[25].reg32_instr_id (.clk (clk), .d (instr_if[25]), .q
       (rs[4]));
  dff \genblk1[26].reg32_instr_id (.clk (clk), .d (instr_if[26]), .q
       (opcode[0]));
  dff \genblk1[27].reg32_instr_id (.clk (clk), .d (instr_if[27]), .q
       (opcode[1]));
  dff \genblk1[28].reg32_instr_id (.clk (clk), .d (instr_if[28]), .q
       (opcode[2]));
  dff \genblk1[29].reg32_instr_id (.clk (clk), .d (instr_if[29]), .q
       (opcode[3]));
  dff \genblk1[30].reg32_instr_id (.clk (clk), .d (instr_if[30]), .q
       (opcode[4]));
  dff \genblk1[31].reg32_instr_id (.clk (clk), .d (instr_if[31]), .q
       (opcode[5]));
  dff reg_lw_stall_id(.clk (clk), .d (lw_stall), .q (lw_stall_id));
endmodule

module
     ifetch_inst_name168h646174612f756e7369676e65645f73756d2e646174(PC,
     instruction);
  input [31:0] PC;
  output [31:0] instruction;
  wire [31:0] PC;
  wire [31:0] instruction;
  sram_mem_filex646174612f756e7369676e65645f73756d2e646174 s_ifetch(.cs
       (1'b1), .oe (1'b1), .we (1'b0), .addr (PC), .din
       (32'b00000000000000000000000000000000), .dout (instruction));
endmodule

module
     IF_stage_inst_name168h646174612f756e7369676e65645f73756d2e646174(clk,
     PC, instr_if);
  input clk;
  input [31:0] PC;
  output [31:0] instr_if;
  wire clk;
  wire [31:0] PC;
  wire [31:0] instr_if;
  wire [31:0] instruction;
  dff \genblk1[0].reg32_if (.clk (clk), .d (instruction[0]), .q
       (instr_if[0]));
  dff \genblk1[1].reg32_if (.clk (clk), .d (instruction[1]), .q
       (instr_if[1]));
  dff \genblk1[2].reg32_if (.clk (clk), .d (instruction[2]), .q
       (instr_if[2]));
  dff \genblk1[3].reg32_if (.clk (clk), .d (instruction[3]), .q
       (instr_if[3]));
  dff \genblk1[4].reg32_if (.clk (clk), .d (instruction[4]), .q
       (instr_if[4]));
  dff \genblk1[5].reg32_if (.clk (clk), .d (instruction[5]), .q
       (instr_if[5]));
  dff \genblk1[6].reg32_if (.clk (clk), .d (instruction[6]), .q
       (instr_if[6]));
  dff \genblk1[7].reg32_if (.clk (clk), .d (instruction[7]), .q
       (instr_if[7]));
  dff \genblk1[8].reg32_if (.clk (clk), .d (instruction[8]), .q
       (instr_if[8]));
  dff \genblk1[9].reg32_if (.clk (clk), .d (instruction[9]), .q
       (instr_if[9]));
  dff \genblk1[10].reg32_if (.clk (clk), .d (instruction[10]), .q
       (instr_if[10]));
  dff \genblk1[11].reg32_if (.clk (clk), .d (instruction[11]), .q
       (instr_if[11]));
  dff \genblk1[12].reg32_if (.clk (clk), .d (instruction[12]), .q
       (instr_if[12]));
  dff \genblk1[13].reg32_if (.clk (clk), .d (instruction[13]), .q
       (instr_if[13]));
  dff \genblk1[14].reg32_if (.clk (clk), .d (instruction[14]), .q
       (instr_if[14]));
  dff \genblk1[15].reg32_if (.clk (clk), .d (instruction[15]), .q
       (instr_if[15]));
  dff \genblk1[16].reg32_if (.clk (clk), .d (instruction[16]), .q
       (instr_if[16]));
  dff \genblk1[17].reg32_if (.clk (clk), .d (instruction[17]), .q
       (instr_if[17]));
  dff \genblk1[18].reg32_if (.clk (clk), .d (instruction[18]), .q
       (instr_if[18]));
  dff \genblk1[19].reg32_if (.clk (clk), .d (instruction[19]), .q
       (instr_if[19]));
  dff \genblk1[20].reg32_if (.clk (clk), .d (instruction[20]), .q
       (instr_if[20]));
  dff \genblk1[21].reg32_if (.clk (clk), .d (instruction[21]), .q
       (instr_if[21]));
  dff \genblk1[22].reg32_if (.clk (clk), .d (instruction[22]), .q
       (instr_if[22]));
  dff \genblk1[23].reg32_if (.clk (clk), .d (instruction[23]), .q
       (instr_if[23]));
  dff \genblk1[24].reg32_if (.clk (clk), .d (instruction[24]), .q
       (instr_if[24]));
  dff \genblk1[25].reg32_if (.clk (clk), .d (instruction[25]), .q
       (instr_if[25]));
  dff \genblk1[26].reg32_if (.clk (clk), .d (instruction[26]), .q
       (instr_if[26]));
  dff \genblk1[27].reg32_if (.clk (clk), .d (instruction[27]), .q
       (instr_if[27]));
  dff \genblk1[28].reg32_if (.clk (clk), .d (instruction[28]), .q
       (instr_if[28]));
  dff \genblk1[29].reg32_if (.clk (clk), .d (instruction[29]), .q
       (instr_if[29]));
  dff \genblk1[30].reg32_if (.clk (clk), .d (instruction[30]), .q
       (instr_if[30]));
  dff \genblk1[31].reg32_if (.clk (clk), .d (instruction[31]), .q
       (instr_if[31]));
  ifetch_inst_name168h646174612f756e7369676e65645f73756d2e646174
       instr_read(.PC (PC), .instruction (instruction));
endmodule

module
     Mem_stage_mem_file168h646174612f756e7369676e65645f73756d2e646174(clk,
     cs, oe, we, addr, din, dout, result_mem, MemtoReg_ex, RegWrite_ex,
     towrite_ex, MemtoReg_mem, RegWrite_mem, towrite_mem, Branch_ex,
     init_delay, Branch_stall_forwarding);
  input clk, cs, oe, we, MemtoReg_ex, RegWrite_ex, Branch_ex,
       init_delay;
  input [31:0] addr, din;
  input [4:0] towrite_ex;
  output [31:0] dout, result_mem;
  output MemtoReg_mem, RegWrite_mem, Branch_stall_forwarding;
  output [4:0] towrite_mem;
  wire clk, cs, oe, we, MemtoReg_ex, RegWrite_ex, Branch_ex, init_delay;
  wire [31:0] addr, din;
  wire [4:0] towrite_ex;
  wire [31:0] dout, result_mem;
  wire MemtoReg_mem, RegWrite_mem, Branch_stall_forwarding;
  wire [4:0] towrite_mem;
  wire [31:0] dout_tmp;
  wire Branch_mem, Branch_mem_delay0, Branch_mem_delay1,
       finalnewRegWrite_ex, invinit_delay, newRegWrite_ex, stall,
       we_new;
  and_gate and0(.x (stall), .y (invinit_delay), .z
       (Branch_stall_forwarding));
  syncram_mem_filex646174612f756e7369676e65645f73756d2e646174
       cpu_scm(.clk (clk), .cs (cs), .oe (oe), .we (we_new), .addr
       (addr), .din (din), .dout (dout_tmp));
  dff \genblk1[0].reg32_Mem (.clk (clk), .d (dout_tmp[0]), .q
       (dout[0]));
  dff \genblk1[1].reg32_Mem (.clk (clk), .d (dout_tmp[1]), .q
       (dout[1]));
  dff \genblk1[2].reg32_Mem (.clk (clk), .d (dout_tmp[2]), .q
       (dout[2]));
  dff \genblk1[3].reg32_Mem (.clk (clk), .d (dout_tmp[3]), .q
       (dout[3]));
  dff \genblk1[4].reg32_Mem (.clk (clk), .d (dout_tmp[4]), .q
       (dout[4]));
  dff \genblk1[5].reg32_Mem (.clk (clk), .d (dout_tmp[5]), .q
       (dout[5]));
  dff \genblk1[6].reg32_Mem (.clk (clk), .d (dout_tmp[6]), .q
       (dout[6]));
  dff \genblk1[7].reg32_Mem (.clk (clk), .d (dout_tmp[7]), .q
       (dout[7]));
  dff \genblk1[8].reg32_Mem (.clk (clk), .d (dout_tmp[8]), .q
       (dout[8]));
  dff \genblk1[9].reg32_Mem (.clk (clk), .d (dout_tmp[9]), .q
       (dout[9]));
  dff \genblk1[10].reg32_Mem (.clk (clk), .d (dout_tmp[10]), .q
       (dout[10]));
  dff \genblk1[11].reg32_Mem (.clk (clk), .d (dout_tmp[11]), .q
       (dout[11]));
  dff \genblk1[12].reg32_Mem (.clk (clk), .d (dout_tmp[12]), .q
       (dout[12]));
  dff \genblk1[13].reg32_Mem (.clk (clk), .d (dout_tmp[13]), .q
       (dout[13]));
  dff \genblk1[14].reg32_Mem (.clk (clk), .d (dout_tmp[14]), .q
       (dout[14]));
  dff \genblk1[15].reg32_Mem (.clk (clk), .d (dout_tmp[15]), .q
       (dout[15]));
  dff \genblk1[16].reg32_Mem (.clk (clk), .d (dout_tmp[16]), .q
       (dout[16]));
  dff \genblk1[17].reg32_Mem (.clk (clk), .d (dout_tmp[17]), .q
       (dout[17]));
  dff \genblk1[18].reg32_Mem (.clk (clk), .d (dout_tmp[18]), .q
       (dout[18]));
  dff \genblk1[19].reg32_Mem (.clk (clk), .d (dout_tmp[19]), .q
       (dout[19]));
  dff \genblk1[20].reg32_Mem (.clk (clk), .d (dout_tmp[20]), .q
       (dout[20]));
  dff \genblk1[21].reg32_Mem (.clk (clk), .d (dout_tmp[21]), .q
       (dout[21]));
  dff \genblk1[22].reg32_Mem (.clk (clk), .d (dout_tmp[22]), .q
       (dout[22]));
  dff \genblk1[23].reg32_Mem (.clk (clk), .d (dout_tmp[23]), .q
       (dout[23]));
  dff \genblk1[24].reg32_Mem (.clk (clk), .d (dout_tmp[24]), .q
       (dout[24]));
  dff \genblk1[25].reg32_Mem (.clk (clk), .d (dout_tmp[25]), .q
       (dout[25]));
  dff \genblk1[26].reg32_Mem (.clk (clk), .d (dout_tmp[26]), .q
       (dout[26]));
  dff \genblk1[27].reg32_Mem (.clk (clk), .d (dout_tmp[27]), .q
       (dout[27]));
  dff \genblk1[28].reg32_Mem (.clk (clk), .d (dout_tmp[28]), .q
       (dout[28]));
  dff \genblk1[29].reg32_Mem (.clk (clk), .d (dout_tmp[29]), .q
       (dout[29]));
  dff \genblk1[30].reg32_Mem (.clk (clk), .d (dout_tmp[30]), .q
       (dout[30]));
  dff \genblk1[31].reg32_Mem (.clk (clk), .d (dout_tmp[31]), .q
       (dout[31]));
  dff \genblk2[0].reg32_result (.clk (clk), .d (addr[0]), .q
       (result_mem[0]));
  dff \genblk2[1].reg32_result (.clk (clk), .d (addr[1]), .q
       (result_mem[1]));
  dff \genblk2[2].reg32_result (.clk (clk), .d (addr[2]), .q
       (result_mem[2]));
  dff \genblk2[3].reg32_result (.clk (clk), .d (addr[3]), .q
       (result_mem[3]));
  dff \genblk2[4].reg32_result (.clk (clk), .d (addr[4]), .q
       (result_mem[4]));
  dff \genblk2[5].reg32_result (.clk (clk), .d (addr[5]), .q
       (result_mem[5]));
  dff \genblk2[6].reg32_result (.clk (clk), .d (addr[6]), .q
       (result_mem[6]));
  dff \genblk2[7].reg32_result (.clk (clk), .d (addr[7]), .q
       (result_mem[7]));
  dff \genblk2[8].reg32_result (.clk (clk), .d (addr[8]), .q
       (result_mem[8]));
  dff \genblk2[9].reg32_result (.clk (clk), .d (addr[9]), .q
       (result_mem[9]));
  dff \genblk2[10].reg32_result (.clk (clk), .d (addr[10]), .q
       (result_mem[10]));
  dff \genblk2[11].reg32_result (.clk (clk), .d (addr[11]), .q
       (result_mem[11]));
  dff \genblk2[12].reg32_result (.clk (clk), .d (addr[12]), .q
       (result_mem[12]));
  dff \genblk2[13].reg32_result (.clk (clk), .d (addr[13]), .q
       (result_mem[13]));
  dff \genblk2[14].reg32_result (.clk (clk), .d (addr[14]), .q
       (result_mem[14]));
  dff \genblk2[15].reg32_result (.clk (clk), .d (addr[15]), .q
       (result_mem[15]));
  dff \genblk2[16].reg32_result (.clk (clk), .d (addr[16]), .q
       (result_mem[16]));
  dff \genblk2[17].reg32_result (.clk (clk), .d (addr[17]), .q
       (result_mem[17]));
  dff \genblk2[18].reg32_result (.clk (clk), .d (addr[18]), .q
       (result_mem[18]));
  dff \genblk2[19].reg32_result (.clk (clk), .d (addr[19]), .q
       (result_mem[19]));
  dff \genblk2[20].reg32_result (.clk (clk), .d (addr[20]), .q
       (result_mem[20]));
  dff \genblk2[21].reg32_result (.clk (clk), .d (addr[21]), .q
       (result_mem[21]));
  dff \genblk2[22].reg32_result (.clk (clk), .d (addr[22]), .q
       (result_mem[22]));
  dff \genblk2[23].reg32_result (.clk (clk), .d (addr[23]), .q
       (result_mem[23]));
  dff \genblk2[24].reg32_result (.clk (clk), .d (addr[24]), .q
       (result_mem[24]));
  dff \genblk2[25].reg32_result (.clk (clk), .d (addr[25]), .q
       (result_mem[25]));
  dff \genblk2[26].reg32_result (.clk (clk), .d (addr[26]), .q
       (result_mem[26]));
  dff \genblk2[27].reg32_result (.clk (clk), .d (addr[27]), .q
       (result_mem[27]));
  dff \genblk2[28].reg32_result (.clk (clk), .d (addr[28]), .q
       (result_mem[28]));
  dff \genblk2[29].reg32_result (.clk (clk), .d (addr[29]), .q
       (result_mem[29]));
  dff \genblk2[30].reg32_result (.clk (clk), .d (addr[30]), .q
       (result_mem[30]));
  dff \genblk2[31].reg32_result (.clk (clk), .d (addr[31]), .q
       (result_mem[31]));
  dff \genblk3[0].reg_towrite (.clk (clk), .d (towrite_ex[0]), .q
       (towrite_mem[0]));
  dff \genblk3[1].reg_towrite (.clk (clk), .d (towrite_ex[1]), .q
       (towrite_mem[1]));
  dff \genblk3[2].reg_towrite (.clk (clk), .d (towrite_ex[2]), .q
       (towrite_mem[2]));
  dff \genblk3[3].reg_towrite (.clk (clk), .d (towrite_ex[3]), .q
       (towrite_mem[3]));
  dff \genblk3[4].reg_towrite (.clk (clk), .d (towrite_ex[4]), .q
       (towrite_mem[4]));
  mux mux_stall0(.sel (stall), .src0 (we), .src1 (1'b0), .z (we_new));
  mux mux_stall1(.sel (stall), .src0 (RegWrite_ex), .src1 (1'b0), .z
       (newRegWrite_ex));
  not_gate not0(.x (init_delay), .z (invinit_delay));
  or_gate or0(.x (init_delay), .y (newRegWrite_ex), .z
       (finalnewRegWrite_ex));
  dff reg_Branch_mem0(.clk (clk), .d (Branch_ex), .q (Branch_mem));
  dff reg_Branch_mem1(.clk (clk), .d (Branch_mem), .q
       (Branch_mem_delay0));
  dff reg_Branch_mem2(.clk (clk), .d (Branch_mem_delay0), .q
       (Branch_mem_delay1));
  dff reg_MemtoReg(.clk (clk), .d (MemtoReg_ex), .q (MemtoReg_mem));
  dff reg_RegWrite(.clk (clk), .d (finalnewRegWrite_ex), .q
       (RegWrite_mem));
  OR3_X1 g22__1474(.A1 (Branch_mem_delay1), .A2 (Branch_mem), .A3
       (Branch_mem_delay0), .ZN (stall));
endmodule

module alu_unit_31(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_32(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_33(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_34(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_35(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_36(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_37(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_38(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_39(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_40(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_41(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_42(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_43(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_44(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_45(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_46(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_47(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_48(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_49(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_50(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_51(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_52(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_53(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_54(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_55(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_56(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_57(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_58(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_59(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_60(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_61(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_msb_1(A, B, Op, Carryout, Carryin, usum, Overflow, Set);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum, Overflow, Set;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum, Overflow, Set;
  wire B_inv, B_slt, Carryout_0, Overflow_0, t1, t2, t3, t4;
  wire t5, t6, t7, t8, t9, t10, t11, t_add;
  wire t_carry, t_not, t_overflow, t_slt, t_slt0, t_sltu, t_sltu0,
       t_sum1;
  wire t_sum2, uadd, uand, uor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate and_slt3(.x (t8), .y (t6), .z (t9));
  and_gate and_sltu3(.x (t10), .y (t7), .z (t11));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  and_gate andoverflow(.x (t_overflow), .y (Overflow_0), .z (Overflow));
  and_gate andslt1(.x (Op[0]), .y (Op[2]), .z (t6));
  and_gate andslt2(.x (t9), .y (t_slt0), .z (t_slt));
  and_gate andsltu1(.x (Op[1]), .y (Op[2]), .z (t7));
  and_gate andsltu2(.x (t11), .y (t_sltu0), .z (t_sltu));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  not_gate not_slt(.x (Op[1]), .z (t8));
  not_gate not_sltu(.x (Carryout), .z (t_sltu0));
  not_gate not_sltu1(.x (Op[0]), .z (t10));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  or_gate orset(.x (t_slt), .y (t_sltu), .z (Set));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
  xor_gate xor_overflow(.x (Carryout), .y (Carryin), .z (Overflow_0));
  xor_gate xor_setlabel(.x (t_add), .y (Op[2]), .z (t_overflow));
  xor_gate xorslt(.x (usum), .y (Overflow), .z (t_slt0));
endmodule

module alu_32_1(A, B, Op, Carryout, Overflow, Final_result, Set);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow, Set;
  output [31:0] Final_result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow, Set;
  wire [31:0] Final_result;
  wire [30:0] ucarryout;
  wire [31:0] Result;
  wire [31:0] result0;
  wire UNCONNECTED_HIER_Z94, UNCONNECTED_HIER_Z95,
       UNCONNECTED_HIER_Z96, UNCONNECTED_HIER_Z97,
       UNCONNECTED_HIER_Z98, UNCONNECTED_HIER_Z99,
       UNCONNECTED_HIER_Z100, UNCONNECTED_HIER_Z101;
  wire UNCONNECTED_HIER_Z102, UNCONNECTED_HIER_Z103,
       UNCONNECTED_HIER_Z104, UNCONNECTED_HIER_Z105,
       UNCONNECTED_HIER_Z106, UNCONNECTED_HIER_Z107,
       UNCONNECTED_HIER_Z108, UNCONNECTED_HIER_Z109;
  wire UNCONNECTED_HIER_Z110, UNCONNECTED_HIER_Z111,
       UNCONNECTED_HIER_Z112, UNCONNECTED_HIER_Z113,
       UNCONNECTED_HIER_Z114, UNCONNECTED_HIER_Z115,
       UNCONNECTED_HIER_Z116, UNCONNECTED_HIER_Z117;
  wire UNCONNECTED_HIER_Z118, UNCONNECTED_HIER_Z119,
       UNCONNECTED_HIER_Z120, UNCONNECTED_HIER_Z121,
       UNCONNECTED_HIER_Z122, UNCONNECTED_HIER_Z123,
       UNCONNECTED_HIER_Z124, UNCONNECTED_HIER_Z125;
  wire n_72, n_73, n_74, n_75, n_76, n_77, n_78, n_79;
  wire n_80, n_81, n_82, n_83, n_84, n_85, n_86, n_87;
  wire n_88, n_89, n_90, n_91, n_92, n_93, n_94, n_95;
  wire n_96, n_97, n_98, n_99, n_100, n_101, n_102, t6;
  wire t7, t8, t10, t_slt, t_sltu;
  assign n_102 = 1'b0;
  assign n_101 = 1'b0;
  assign n_100 = 1'b0;
  assign n_99 = 1'b0;
  assign n_98 = 1'b0;
  assign n_97 = 1'b0;
  assign n_96 = 1'b0;
  assign n_95 = 1'b0;
  assign n_94 = 1'b0;
  assign n_93 = 1'b0;
  assign n_92 = 1'b0;
  assign n_91 = 1'b0;
  assign n_90 = 1'b0;
  assign n_89 = 1'b0;
  assign n_88 = 1'b0;
  assign n_87 = 1'b0;
  assign n_86 = 1'b0;
  assign n_85 = 1'b0;
  assign n_84 = 1'b0;
  assign n_83 = 1'b0;
  assign n_82 = 1'b0;
  assign n_81 = 1'b0;
  assign n_80 = 1'b0;
  assign n_79 = 1'b0;
  assign n_78 = 1'b0;
  assign n_77 = 1'b0;
  assign n_76 = 1'b0;
  assign n_75 = 1'b0;
  assign n_74 = 1'b0;
  assign n_73 = 1'b0;
  assign n_72 = 1'b0;
  alu_unit_31 alu_unit0(.A (A[0]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z94, Op[2:0]}), .Carryout (ucarryout[0]),
       .Carryin (Op[2]), .usum (Result[0]));
  alu_unit_32 alu_unit1(.A (A[1]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z95, Op[2:0]}), .Carryout (ucarryout[1]),
       .Carryin (ucarryout[0]), .usum (Result[1]));
  alu_unit_33 alu_unit2(.A (A[2]), .B (1'b1), .Op
       ({UNCONNECTED_HIER_Z96, Op[2:0]}), .Carryout (ucarryout[2]),
       .Carryin (ucarryout[1]), .usum (Result[2]));
  alu_unit_34 alu_unit3(.A (A[3]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z97, Op[2:0]}), .Carryout (ucarryout[3]),
       .Carryin (ucarryout[2]), .usum (Result[3]));
  alu_unit_35 alu_unit4(.A (A[4]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z98, Op[2:0]}), .Carryout (ucarryout[4]),
       .Carryin (ucarryout[3]), .usum (Result[4]));
  alu_unit_36 alu_unit5(.A (A[5]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z99, Op[2:0]}), .Carryout (ucarryout[5]),
       .Carryin (ucarryout[4]), .usum (Result[5]));
  alu_unit_37 alu_unit6(.A (A[6]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z100, Op[2:0]}), .Carryout (ucarryout[6]),
       .Carryin (ucarryout[5]), .usum (Result[6]));
  alu_unit_38 alu_unit7(.A (A[7]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z101, Op[2:0]}), .Carryout (ucarryout[7]),
       .Carryin (ucarryout[6]), .usum (Result[7]));
  alu_unit_39 alu_unit8(.A (A[8]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z102, Op[2:0]}), .Carryout (ucarryout[8]),
       .Carryin (ucarryout[7]), .usum (Result[8]));
  alu_unit_40 alu_unit9(.A (A[9]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z103, Op[2:0]}), .Carryout (ucarryout[9]),
       .Carryin (ucarryout[8]), .usum (Result[9]));
  alu_unit_41 alu_unit10(.A (A[10]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z104, Op[2:0]}), .Carryout (ucarryout[10]),
       .Carryin (ucarryout[9]), .usum (Result[10]));
  alu_unit_42 alu_unit11(.A (A[11]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z105, Op[2:0]}), .Carryout (ucarryout[11]),
       .Carryin (ucarryout[10]), .usum (Result[11]));
  alu_unit_43 alu_unit12(.A (A[12]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z106, Op[2:0]}), .Carryout (ucarryout[12]),
       .Carryin (ucarryout[11]), .usum (Result[12]));
  alu_unit_44 alu_unit13(.A (A[13]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z107, Op[2:0]}), .Carryout (ucarryout[13]),
       .Carryin (ucarryout[12]), .usum (Result[13]));
  alu_unit_45 alu_unit14(.A (A[14]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z108, Op[2:0]}), .Carryout (ucarryout[14]),
       .Carryin (ucarryout[13]), .usum (Result[14]));
  alu_unit_46 alu_unit15(.A (A[15]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z109, Op[2:0]}), .Carryout (ucarryout[15]),
       .Carryin (ucarryout[14]), .usum (Result[15]));
  alu_unit_47 alu_unit16(.A (A[16]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z110, Op[2:0]}), .Carryout (ucarryout[16]),
       .Carryin (ucarryout[15]), .usum (Result[16]));
  alu_unit_48 alu_unit17(.A (A[17]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z111, Op[2:0]}), .Carryout (ucarryout[17]),
       .Carryin (ucarryout[16]), .usum (Result[17]));
  alu_unit_49 alu_unit18(.A (A[18]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z112, Op[2:0]}), .Carryout (ucarryout[18]),
       .Carryin (ucarryout[17]), .usum (Result[18]));
  alu_unit_50 alu_unit19(.A (A[19]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z113, Op[2:0]}), .Carryout (ucarryout[19]),
       .Carryin (ucarryout[18]), .usum (Result[19]));
  alu_unit_51 alu_unit20(.A (A[20]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z114, Op[2:0]}), .Carryout (ucarryout[20]),
       .Carryin (ucarryout[19]), .usum (Result[20]));
  alu_unit_52 alu_unit21(.A (A[21]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z115, Op[2:0]}), .Carryout (ucarryout[21]),
       .Carryin (ucarryout[20]), .usum (Result[21]));
  alu_unit_53 alu_unit22(.A (A[22]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z116, Op[2:0]}), .Carryout (ucarryout[22]),
       .Carryin (ucarryout[21]), .usum (Result[22]));
  alu_unit_54 alu_unit23(.A (A[23]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z117, Op[2:0]}), .Carryout (ucarryout[23]),
       .Carryin (ucarryout[22]), .usum (Result[23]));
  alu_unit_55 alu_unit24(.A (A[24]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z118, Op[2:0]}), .Carryout (ucarryout[24]),
       .Carryin (ucarryout[23]), .usum (Result[24]));
  alu_unit_56 alu_unit25(.A (A[25]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z119, Op[2:0]}), .Carryout (ucarryout[25]),
       .Carryin (ucarryout[24]), .usum (Result[25]));
  alu_unit_57 alu_unit26(.A (A[26]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z120, Op[2:0]}), .Carryout (ucarryout[26]),
       .Carryin (ucarryout[25]), .usum (Result[26]));
  alu_unit_58 alu_unit27(.A (A[27]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z121, Op[2:0]}), .Carryout (ucarryout[27]),
       .Carryin (ucarryout[26]), .usum (Result[27]));
  alu_unit_59 alu_unit28(.A (A[28]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z122, Op[2:0]}), .Carryout (ucarryout[28]),
       .Carryin (ucarryout[27]), .usum (Result[28]));
  alu_unit_60 alu_unit29(.A (A[29]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z123, Op[2:0]}), .Carryout (ucarryout[29]),
       .Carryin (ucarryout[28]), .usum (Result[29]));
  alu_unit_61 alu_unit30(.A (A[30]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z124, Op[2:0]}), .Carryout (ucarryout[30]),
       .Carryin (ucarryout[29]), .usum (Result[30]));
  alu_msb_1 alu_unit31(.A (A[31]), .B (1'b0), .Op
       ({UNCONNECTED_HIER_Z125, Op[2:0]}), .Carryout (Carryout),
       .Carryin (ucarryout[30]), .usum (Result[31]), .Overflow
       (Overflow), .Set (Set));
  and_gate and_slt3(.x (t8), .y (t6), .z (t_slt));
  and_gate and_sltu3(.x (t10), .y (t7), .z (t_sltu));
  and_gate andslt1(.x (Op[0]), .y (Op[2]), .z (t6));
  and_gate andsltu1(.x (Op[1]), .y (Op[2]), .z (t7));
  mux_32 muxslt1(.sel (t_slt), .src0 (Result), .src1 ({n_72, n_73,
       n_74, n_75, n_76, n_77, n_78, n_79, n_80, n_81, n_82, n_83,
       n_84, n_85, n_86, n_87, n_88, n_89, n_90, n_91, n_92, n_93,
       n_94, n_95, n_96, n_97, n_98, n_99, n_100, n_101, n_102, Set}),
       .z (result0));
  mux_32 muxsltu1(.sel (t_sltu), .src0 (result0), .src1 ({n_72, n_73,
       n_74, n_75, n_76, n_77, n_78, n_79, n_80, n_81, n_82, n_83,
       n_84, n_85, n_86, n_87, n_88, n_89, n_90, n_91, n_92, n_93,
       n_94, n_95, n_96, n_97, n_98, n_99, n_100, n_101, n_102, Set}),
       .z (Final_result));
  not_gate not_slt(.x (Op[1]), .z (t8));
  not_gate not_sltu1(.x (Op[0]), .z (t10));
endmodule

module sll_1(A, B, Op, Carryout, Overflow, Result);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow;
  wire [31:0] Result;
  wire [31:0] S0;
  wire [31:0] S0_out;
  wire [31:0] S1;
  wire [31:0] S1_out;
  wire [31:0] S2;
  wire [31:0] S2_out;
  wire [31:0] S3;
  wire [31:0] S3_out;
  wire [31:0] S4;
  mux_32 mux_1(.sel (B[0]), .src0 (A), .src1 (S0), .z (S0_out));
  mux_32 mux_2(.sel (B[1]), .src0 (S0_out), .src1 (S1), .z (S1_out));
  mux_32 mux_3(.sel (B[2]), .src0 (S1_out), .src1 (S2), .z (S2_out));
  mux_32 mux_4(.sel (B[3]), .src0 (S2_out), .src1 (S3), .z (S3_out));
  mux_32 mux_5(.sel (B[4]), .src0 (S3_out), .src1 (S4), .z (Result));
  or_gate_32 ors0(.x ({A[30:0], 1'b0}), .y
       (32'b00000000000000000000000000000000), .z (S0));
  or_gate_32 ors1(.x ({S0_out[29:0], 2'b00}), .y
       (32'b00000000000000000000000000000000), .z (S1));
  or_gate_32 ors2(.x ({S1_out[27:0], 4'b0000}), .y
       (32'b00000000000000000000000000000000), .z (S2));
  or_gate_32 ors3(.x ({S2_out[23:0], 8'b00000000}), .y
       (32'b00000000000000000000000000000000), .z (S3));
  or_gate_32 ors4(.x ({S3_out[15:0], 16'b0000000000000000}), .y
       (32'b00000000000000000000000000000000), .z (S4));
endmodule

module srl_1(A, B, Op, Carryout, Overflow, Result);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow;
  wire [31:0] Result;
  wire [31:0] S0;
  wire [31:0] S0_out;
  wire [31:0] S1;
  wire [31:0] S1_out;
  wire [31:0] S2;
  wire [31:0] S2_out;
  wire [31:0] S3;
  wire [31:0] S3_out;
  wire [31:0] S4;
  mux_32 mux_1(.sel (B[0]), .src0 (A), .src1 (S0), .z (S0_out));
  mux_32 mux_2(.sel (B[1]), .src0 (S0_out), .src1 (S1), .z (S1_out));
  mux_32 mux_3(.sel (B[2]), .src0 (S1_out), .src1 (S2), .z (S2_out));
  mux_32 mux_4(.sel (B[3]), .src0 (S2_out), .src1 (S3), .z (S3_out));
  mux_32 mux_5(.sel (B[4]), .src0 (S3_out), .src1 (S4), .z (Result));
  or_gate_32 ors0(.x ({1'b0, A[31:1]}), .y
       (32'b00000000000000000000000000000000), .z (S0));
  or_gate_32 ors1(.x ({2'b00, S0_out[31:2]}), .y
       (32'b00000000000000000000000000000000), .z (S1));
  or_gate_32 ors2(.x ({4'b0000, S1_out[31:4]}), .y
       (32'b00000000000000000000000000000000), .z (S2));
  or_gate_32 ors3(.x ({8'b00000000, S2_out[31:8]}), .y
       (32'b00000000000000000000000000000000), .z (S3));
  or_gate_32 ors4(.x ({16'b0000000000000000, S3_out[31:16]}), .y
       (32'b00000000000000000000000000000000), .z (S4));
endmodule

module alu_1(A, B, Op, Carryout, Overflow, Zero, Result, Set);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow, Zero, Set;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow, Zero, Set;
  wire [31:0] Result;
  wire [31:0] Result_andsub;
  wire [31:0] Result_sll;
  wire [31:0] t4;
  wire [31:0] Result_srl;
  wire Carryout_andsub, Carryout_sll, Carryout_srl, Overflow_andsub,
       Overflow_sll, Overflow_srl, UNCONNECTED_HIER_Z126,
       UNCONNECTED_HIER_Z127;
  wire UNCONNECTED_HIER_Z128, UNCONNECTED_HIER_Z129,
       UNCONNECTED_HIER_Z130, UNCONNECTED_HIER_Z131,
       UNCONNECTED_HIER_Z132, UNCONNECTED_HIER_Z133,
       UNCONNECTED_HIER_Z134, UNCONNECTED_HIER_Z135;
  wire UNCONNECTED_HIER_Z136, UNCONNECTED_HIER_Z137,
       UNCONNECTED_HIER_Z138, UNCONNECTED_HIER_Z139,
       UNCONNECTED_HIER_Z140, UNCONNECTED_HIER_Z141,
       UNCONNECTED_HIER_Z142, UNCONNECTED_HIER_Z143;
  wire UNCONNECTED_HIER_Z144, UNCONNECTED_HIER_Z145,
       UNCONNECTED_HIER_Z146, UNCONNECTED_HIER_Z147,
       UNCONNECTED_HIER_Z148, UNCONNECTED_HIER_Z149,
       UNCONNECTED_HIER_Z150, UNCONNECTED_HIER_Z151;
  wire UNCONNECTED_HIER_Z152, UNCONNECTED_HIER_Z153,
       UNCONNECTED_HIER_Z154, UNCONNECTED_HIER_Z155,
       UNCONNECTED_HIER_Z156, UNCONNECTED_HIER_Z157,
       UNCONNECTED_HIER_Z158, UNCONNECTED_HIER_Z159;
  wire UNCONNECTED_HIER_Z160, UNCONNECTED_HIER_Z161,
       UNCONNECTED_HIER_Z162, UNCONNECTED_HIER_Z163,
       UNCONNECTED_HIER_Z164, UNCONNECTED_HIER_Z165,
       UNCONNECTED_HIER_Z166, UNCONNECTED_HIER_Z167;
  wire UNCONNECTED_HIER_Z168, UNCONNECTED_HIER_Z169,
       UNCONNECTED_HIER_Z170, UNCONNECTED_HIER_Z171,
       UNCONNECTED_HIER_Z172, UNCONNECTED_HIER_Z173,
       UNCONNECTED_HIER_Z174, UNCONNECTED_HIER_Z175;
  wire UNCONNECTED_HIER_Z176, UNCONNECTED_HIER_Z177,
       UNCONNECTED_HIER_Z178, UNCONNECTED_HIER_Z179,
       UNCONNECTED_HIER_Z180, UNCONNECTED_HIER_Z181,
       UNCONNECTED_HIER_Z182, UNCONNECTED_HIER_Z183;
  wire UNCONNECTED_HIER_Z184, UNCONNECTED_HIER_Z185,
       UNCONNECTED_HIER_Z186, UNCONNECTED_HIER_Z187,
       UNCONNECTED_HIER_Z188, UNCONNECTED_HIER_Z189,
       UNCONNECTED_HIER_Z190, UNCONNECTED_HIER_Z191;
  wire UNCONNECTED_HIER_Z192, UNCONNECTED_HIER_Z193,
       UNCONNECTED_HIER_Z194, UNCONNECTED_HIER_Z195,
       UNCONNECTED_HIER_Z196, UNCONNECTED_HIER_Z197,
       UNCONNECTED_HIER_Z198, UNCONNECTED_HIER_Z199;
  wire UNCONNECTED_HIER_Z200, UNCONNECTED_HIER_Z201,
       UNCONNECTED_HIER_Z202, UNCONNECTED_HIER_Z203,
       UNCONNECTED_HIER_Z204, UNCONNECTED_HIER_Z205,
       UNCONNECTED_HIER_Z206, UNCONNECTED_HIER_Z207;
  wire UNCONNECTED_HIER_Z208, UNCONNECTED_HIER_Z209,
       UNCONNECTED_HIER_Z210, UNCONNECTED_HIER_Z211,
       UNCONNECTED_HIER_Z212, UNCONNECTED_HIER_Z213,
       UNCONNECTED_HIER_Z214, UNCONNECTED_HIER_Z215;
  wire UNCONNECTED_HIER_Z216, UNCONNECTED_HIER_Z217,
       UNCONNECTED_HIER_Z218, UNCONNECTED_HIER_Z219,
       UNCONNECTED_HIER_Z220, n_2, n_3, n_4;
  wire n_5, t1, t2, t3, z1, z2, z3, z4;
  wire z5, z6, z7, z8, z9, z10, z11, z12;
  wire z13, z14, z15, z16, z17, z18, z19, z20;
  wire z21, z22, z23, z24, z25, z26, z27, z28;
  wire z29, z30, z31;
  and_gate andcarry(.x (t3), .y (Carryout_andsub), .z (n_4));
  and_gate andover(.x (t3), .y (Overflow_andsub), .z (n_5));
  and_gate andsll1(.x (Op[3]), .y (Op[0]), .z (t1));
  and_gate andsrl1(.x (Op[3]), .y (Op[1]), .z (t2));
  alu_32_1 andsub(.A (A), .B ({UNCONNECTED_HIER_Z157,
       UNCONNECTED_HIER_Z156, UNCONNECTED_HIER_Z155,
       UNCONNECTED_HIER_Z154, UNCONNECTED_HIER_Z153,
       UNCONNECTED_HIER_Z152, UNCONNECTED_HIER_Z151,
       UNCONNECTED_HIER_Z150, UNCONNECTED_HIER_Z149,
       UNCONNECTED_HIER_Z148, UNCONNECTED_HIER_Z147,
       UNCONNECTED_HIER_Z146, UNCONNECTED_HIER_Z145,
       UNCONNECTED_HIER_Z144, UNCONNECTED_HIER_Z143,
       UNCONNECTED_HIER_Z142, UNCONNECTED_HIER_Z141,
       UNCONNECTED_HIER_Z140, UNCONNECTED_HIER_Z139,
       UNCONNECTED_HIER_Z138, UNCONNECTED_HIER_Z137,
       UNCONNECTED_HIER_Z136, UNCONNECTED_HIER_Z135,
       UNCONNECTED_HIER_Z134, UNCONNECTED_HIER_Z133,
       UNCONNECTED_HIER_Z132, UNCONNECTED_HIER_Z131,
       UNCONNECTED_HIER_Z130, UNCONNECTED_HIER_Z129,
       UNCONNECTED_HIER_Z128, UNCONNECTED_HIER_Z127,
       UNCONNECTED_HIER_Z126}), .Op ({UNCONNECTED_HIER_Z158, 1'b0,
       Op[1:0]}), .Carryout (Carryout_andsub), .Overflow
       (Overflow_andsub), .Final_result (Result_andsub), .Set (n_2));
  mux_32 mux1(.sel (Op[3]), .src0 (Result_andsub), .src1 (Result_sll),
       .z (t4));
  mux_32 mux2(.sel (t2), .src0 (t4), .src1 (Result_srl), .z (Result));
  not_gate notop3(.x (Op[3]), .z (t3));
  or_gate orz1(.x (Result[0]), .y (Result[1]), .z (z1));
  or_gate orz2(.x (z1), .y (Result[2]), .z (z2));
  or_gate orz3(.x (z2), .y (Result[3]), .z (z3));
  or_gate orz4(.x (z3), .y (Result[4]), .z (z4));
  or_gate orz5(.x (z4), .y (Result[5]), .z (z5));
  or_gate orz6(.x (z5), .y (Result[6]), .z (z6));
  or_gate orz7(.x (z6), .y (Result[7]), .z (z7));
  or_gate orz8(.x (z7), .y (Result[8]), .z (z8));
  or_gate orz9(.x (z8), .y (Result[9]), .z (z9));
  or_gate orz10(.x (z9), .y (Result[10]), .z (z10));
  or_gate orz11(.x (z10), .y (Result[11]), .z (z11));
  or_gate orz12(.x (z11), .y (Result[12]), .z (z12));
  or_gate orz13(.x (z12), .y (Result[13]), .z (z13));
  or_gate orz14(.x (z13), .y (Result[14]), .z (z14));
  or_gate orz15(.x (z14), .y (Result[15]), .z (z15));
  or_gate orz16(.x (z15), .y (Result[16]), .z (z16));
  or_gate orz17(.x (z16), .y (Result[17]), .z (z17));
  or_gate orz18(.x (z17), .y (Result[18]), .z (z18));
  or_gate orz19(.x (z18), .y (Result[19]), .z (z19));
  or_gate orz20(.x (z19), .y (Result[20]), .z (z20));
  or_gate orz21(.x (z20), .y (Result[21]), .z (z21));
  or_gate orz22(.x (z21), .y (Result[22]), .z (z22));
  or_gate orz23(.x (z22), .y (Result[23]), .z (z23));
  or_gate orz24(.x (z23), .y (Result[24]), .z (z24));
  or_gate orz25(.x (z24), .y (Result[25]), .z (z25));
  or_gate orz26(.x (z25), .y (Result[26]), .z (z26));
  or_gate orz27(.x (z26), .y (Result[27]), .z (z27));
  or_gate orz28(.x (z27), .y (Result[28]), .z (z28));
  or_gate orz29(.x (z28), .y (Result[29]), .z (z29));
  or_gate orz30(.x (z29), .y (Result[30]), .z (z30));
  or_gate orz31(.x (z30), .y (Result[31]), .z (z31));
  sll_1 sll_instance(.A (A), .B ({UNCONNECTED_HIER_Z185,
       UNCONNECTED_HIER_Z184, UNCONNECTED_HIER_Z183,
       UNCONNECTED_HIER_Z182, UNCONNECTED_HIER_Z181,
       UNCONNECTED_HIER_Z180, UNCONNECTED_HIER_Z179,
       UNCONNECTED_HIER_Z178, UNCONNECTED_HIER_Z177,
       UNCONNECTED_HIER_Z176, UNCONNECTED_HIER_Z175,
       UNCONNECTED_HIER_Z174, UNCONNECTED_HIER_Z173,
       UNCONNECTED_HIER_Z172, UNCONNECTED_HIER_Z171,
       UNCONNECTED_HIER_Z170, UNCONNECTED_HIER_Z169,
       UNCONNECTED_HIER_Z168, UNCONNECTED_HIER_Z167,
       UNCONNECTED_HIER_Z166, UNCONNECTED_HIER_Z165,
       UNCONNECTED_HIER_Z164, UNCONNECTED_HIER_Z163,
       UNCONNECTED_HIER_Z162, UNCONNECTED_HIER_Z161,
       UNCONNECTED_HIER_Z160, UNCONNECTED_HIER_Z159, 5'b00100}), .Op
       ({UNCONNECTED_HIER_Z189, UNCONNECTED_HIER_Z188,
       UNCONNECTED_HIER_Z187, UNCONNECTED_HIER_Z186}), .Carryout
       (Carryout_sll), .Overflow (Overflow_sll), .Result (Result_sll));
  srl_1 srl_instance(.A (A), .B ({UNCONNECTED_HIER_Z216,
       UNCONNECTED_HIER_Z215, UNCONNECTED_HIER_Z214,
       UNCONNECTED_HIER_Z213, UNCONNECTED_HIER_Z212,
       UNCONNECTED_HIER_Z211, UNCONNECTED_HIER_Z210,
       UNCONNECTED_HIER_Z209, UNCONNECTED_HIER_Z208,
       UNCONNECTED_HIER_Z207, UNCONNECTED_HIER_Z206,
       UNCONNECTED_HIER_Z205, UNCONNECTED_HIER_Z204,
       UNCONNECTED_HIER_Z203, UNCONNECTED_HIER_Z202,
       UNCONNECTED_HIER_Z201, UNCONNECTED_HIER_Z200,
       UNCONNECTED_HIER_Z199, UNCONNECTED_HIER_Z198,
       UNCONNECTED_HIER_Z197, UNCONNECTED_HIER_Z196,
       UNCONNECTED_HIER_Z195, UNCONNECTED_HIER_Z194,
       UNCONNECTED_HIER_Z193, UNCONNECTED_HIER_Z192,
       UNCONNECTED_HIER_Z191, UNCONNECTED_HIER_Z190, 5'b00100}), .Op
       ({UNCONNECTED_HIER_Z220, UNCONNECTED_HIER_Z219,
       UNCONNECTED_HIER_Z218, UNCONNECTED_HIER_Z217}), .Carryout
       (Carryout_srl), .Overflow (Overflow_srl), .Result (Result_srl));
  not_gate zero(.x (z31), .z (n_3));
endmodule

module alu_unit_62(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_63(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_64(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_65(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_66(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_67(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_68(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_69(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_70(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_71(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_72(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_73(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_74(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_75(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_76(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_77(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_78(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_79(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_80(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_81(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_82(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_83(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_84(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_85(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_86(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_87(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_88(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_89(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_90(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_91(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_unit_92(A, B, Op, Carryout, Carryin, usum);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum;
  wire B_inv, B_slt, Carryout_0, t1, t2, t3, t4, t5;
  wire t_add, t_carry, t_not, t_sum1, t_sum2, uadd, uand, uor;
  wire uxor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  xor_gate xor_1(.x (A), .y (B), .z (uxor));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
endmodule

module alu_msb_2(A, B, Op, Carryout, Carryin, usum, Overflow, Set);
  input A, B, Carryin;
  input [3:0] Op;
  output Carryout, usum, Overflow, Set;
  wire A, B, Carryin;
  wire [3:0] Op;
  wire Carryout, usum, Overflow, Set;
  wire B_inv, B_slt, Carryout_0, Overflow_0, t1, t2, t3, t4;
  wire t5, t6, t7, t8, t9, t10, t11, t_add;
  wire t_carry, t_not, t_overflow, t_slt, t_slt0, t_sltu, t_sltu0,
       t_sum1;
  wire t_sum2, uadd, uand, uor;
  and_gate and_1(.x (A), .y (B), .z (uand));
  and_gate and_add1(.x (A), .y (B_slt), .z (t2));
  and_gate and_add2(.x (A), .y (Carryin), .z (t3));
  and_gate and_add3(.x (B_slt), .y (Carryin), .z (t4));
  and_gate and_slt3(.x (t8), .y (t6), .z (t9));
  and_gate and_sltu3(.x (t10), .y (t7), .z (t11));
  and_gate andcarry(.x (t_carry), .y (Carryout_0), .z (Carryout));
  and_gate andop(.x (Op[0]), .y (Op[1]), .z (t_add));
  not_gate andop1(.x (t_add), .z (t_not));
  and_gate andoverflow(.x (t_overflow), .y (Overflow_0), .z (Overflow));
  and_gate andslt1(.x (Op[0]), .y (Op[2]), .z (t6));
  and_gate andslt2(.x (t9), .y (t_slt0), .z (t_slt));
  and_gate andsltu1(.x (Op[1]), .y (Op[2]), .z (t7));
  and_gate andsltu2(.x (t11), .y (t_sltu0), .z (t_sltu));
  mux mux_1(.sel (Op[2]), .src0 (B), .src1 (B_inv), .z (B_slt));
  mux muxop0(.sel (Op[0]), .src0 (uand), .src1 (uor), .z (t_sum1));
  mux muxop1(.sel (Op[1]), .src0 (t_sum1), .src1 (uadd), .z (t_sum2));
  mux muxop3(.sel (Op[2]), .src0 (t_sum2), .src1 (uadd), .z (usum));
  not_gate not_1(.x (B), .z (B_inv));
  not_gate not_slt(.x (Op[1]), .z (t8));
  not_gate not_sltu(.x (Carryout), .z (t_sltu0));
  not_gate not_sltu1(.x (Op[0]), .z (t10));
  or_gate or_1(.x (A), .y (B), .z (uor));
  or_gate or_add1(.x (t2), .y (t3), .z (t5));
  or_gate or_add2(.x (t5), .y (t4), .z (Carryout_0));
  or_gate orcarry(.x (Op[1]), .y (Op[2]), .z (t_carry));
  or_gate orset(.x (t_slt), .y (t_sltu), .z (Set));
  xor_gate xor_2(.x (A), .y (B_slt), .z (t1));
  xor_gate xor_3(.x (t1), .y (Carryin), .z (uadd));
  xor_gate xor_overflow(.x (Carryout), .y (Carryin), .z (Overflow_0));
  xor_gate xor_setlabel(.x (t_add), .y (Op[2]), .z (t_overflow));
  xor_gate xorslt(.x (usum), .y (Overflow), .z (t_slt0));
endmodule

module alu_32_2(A, B, Op, Carryout, Overflow, Final_result, Set);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow, Set;
  output [31:0] Final_result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow, Set;
  wire [31:0] Final_result;
  wire [30:0] ucarryout;
  wire [31:0] Result;
  wire [31:0] result0;
  wire UNCONNECTED_HIER_Z221, UNCONNECTED_HIER_Z222,
       UNCONNECTED_HIER_Z223, UNCONNECTED_HIER_Z224,
       UNCONNECTED_HIER_Z225, UNCONNECTED_HIER_Z226,
       UNCONNECTED_HIER_Z227, UNCONNECTED_HIER_Z228;
  wire UNCONNECTED_HIER_Z229, UNCONNECTED_HIER_Z230,
       UNCONNECTED_HIER_Z231, UNCONNECTED_HIER_Z232,
       UNCONNECTED_HIER_Z233, UNCONNECTED_HIER_Z234,
       UNCONNECTED_HIER_Z235, UNCONNECTED_HIER_Z236;
  wire UNCONNECTED_HIER_Z237, UNCONNECTED_HIER_Z238,
       UNCONNECTED_HIER_Z239, UNCONNECTED_HIER_Z240,
       UNCONNECTED_HIER_Z241, UNCONNECTED_HIER_Z242,
       UNCONNECTED_HIER_Z243, UNCONNECTED_HIER_Z244;
  wire UNCONNECTED_HIER_Z245, UNCONNECTED_HIER_Z246,
       UNCONNECTED_HIER_Z247, UNCONNECTED_HIER_Z248,
       UNCONNECTED_HIER_Z249, UNCONNECTED_HIER_Z250,
       UNCONNECTED_HIER_Z251, UNCONNECTED_HIER_Z252;
  wire n_104, n_105, n_106, n_107, n_108, n_109, n_110, n_111;
  wire n_112, n_113, n_114, n_115, n_116, n_117, n_118, n_119;
  wire n_120, n_121, n_122, n_123, n_124, n_125, n_126, n_127;
  wire n_128, n_129, n_130, n_131, n_132, n_133, n_134, t6;
  wire t7, t8, t10, t_slt, t_sltu;
  assign n_134 = 1'b0;
  assign n_133 = 1'b0;
  assign n_132 = 1'b0;
  assign n_131 = 1'b0;
  assign n_130 = 1'b0;
  assign n_129 = 1'b0;
  assign n_128 = 1'b0;
  assign n_127 = 1'b0;
  assign n_126 = 1'b0;
  assign n_125 = 1'b0;
  assign n_124 = 1'b0;
  assign n_123 = 1'b0;
  assign n_122 = 1'b0;
  assign n_121 = 1'b0;
  assign n_120 = 1'b0;
  assign n_119 = 1'b0;
  assign n_118 = 1'b0;
  assign n_117 = 1'b0;
  assign n_116 = 1'b0;
  assign n_115 = 1'b0;
  assign n_114 = 1'b0;
  assign n_113 = 1'b0;
  assign n_112 = 1'b0;
  assign n_111 = 1'b0;
  assign n_110 = 1'b0;
  assign n_109 = 1'b0;
  assign n_108 = 1'b0;
  assign n_107 = 1'b0;
  assign n_106 = 1'b0;
  assign n_105 = 1'b0;
  assign n_104 = 1'b0;
  alu_unit_62 alu_unit0(.A (A[0]), .B (B[0]), .Op
       ({UNCONNECTED_HIER_Z221, Op[2:0]}), .Carryout (ucarryout[0]),
       .Carryin (Op[2]), .usum (Result[0]));
  alu_unit_63 alu_unit1(.A (A[1]), .B (B[1]), .Op
       ({UNCONNECTED_HIER_Z222, Op[2:0]}), .Carryout (ucarryout[1]),
       .Carryin (ucarryout[0]), .usum (Result[1]));
  alu_unit_64 alu_unit2(.A (A[2]), .B (B[2]), .Op
       ({UNCONNECTED_HIER_Z223, Op[2:0]}), .Carryout (ucarryout[2]),
       .Carryin (ucarryout[1]), .usum (Result[2]));
  alu_unit_65 alu_unit3(.A (A[3]), .B (B[3]), .Op
       ({UNCONNECTED_HIER_Z224, Op[2:0]}), .Carryout (ucarryout[3]),
       .Carryin (ucarryout[2]), .usum (Result[3]));
  alu_unit_66 alu_unit4(.A (A[4]), .B (B[4]), .Op
       ({UNCONNECTED_HIER_Z225, Op[2:0]}), .Carryout (ucarryout[4]),
       .Carryin (ucarryout[3]), .usum (Result[4]));
  alu_unit_67 alu_unit5(.A (A[5]), .B (B[5]), .Op
       ({UNCONNECTED_HIER_Z226, Op[2:0]}), .Carryout (ucarryout[5]),
       .Carryin (ucarryout[4]), .usum (Result[5]));
  alu_unit_68 alu_unit6(.A (A[6]), .B (B[6]), .Op
       ({UNCONNECTED_HIER_Z227, Op[2:0]}), .Carryout (ucarryout[6]),
       .Carryin (ucarryout[5]), .usum (Result[6]));
  alu_unit_69 alu_unit7(.A (A[7]), .B (B[7]), .Op
       ({UNCONNECTED_HIER_Z228, Op[2:0]}), .Carryout (ucarryout[7]),
       .Carryin (ucarryout[6]), .usum (Result[7]));
  alu_unit_70 alu_unit8(.A (A[8]), .B (B[8]), .Op
       ({UNCONNECTED_HIER_Z229, Op[2:0]}), .Carryout (ucarryout[8]),
       .Carryin (ucarryout[7]), .usum (Result[8]));
  alu_unit_71 alu_unit9(.A (A[9]), .B (B[9]), .Op
       ({UNCONNECTED_HIER_Z230, Op[2:0]}), .Carryout (ucarryout[9]),
       .Carryin (ucarryout[8]), .usum (Result[9]));
  alu_unit_72 alu_unit10(.A (A[10]), .B (B[10]), .Op
       ({UNCONNECTED_HIER_Z231, Op[2:0]}), .Carryout (ucarryout[10]),
       .Carryin (ucarryout[9]), .usum (Result[10]));
  alu_unit_73 alu_unit11(.A (A[11]), .B (B[11]), .Op
       ({UNCONNECTED_HIER_Z232, Op[2:0]}), .Carryout (ucarryout[11]),
       .Carryin (ucarryout[10]), .usum (Result[11]));
  alu_unit_74 alu_unit12(.A (A[12]), .B (B[12]), .Op
       ({UNCONNECTED_HIER_Z233, Op[2:0]}), .Carryout (ucarryout[12]),
       .Carryin (ucarryout[11]), .usum (Result[12]));
  alu_unit_75 alu_unit13(.A (A[13]), .B (B[13]), .Op
       ({UNCONNECTED_HIER_Z234, Op[2:0]}), .Carryout (ucarryout[13]),
       .Carryin (ucarryout[12]), .usum (Result[13]));
  alu_unit_76 alu_unit14(.A (A[14]), .B (B[14]), .Op
       ({UNCONNECTED_HIER_Z235, Op[2:0]}), .Carryout (ucarryout[14]),
       .Carryin (ucarryout[13]), .usum (Result[14]));
  alu_unit_77 alu_unit15(.A (A[15]), .B (B[15]), .Op
       ({UNCONNECTED_HIER_Z236, Op[2:0]}), .Carryout (ucarryout[15]),
       .Carryin (ucarryout[14]), .usum (Result[15]));
  alu_unit_78 alu_unit16(.A (A[16]), .B (B[16]), .Op
       ({UNCONNECTED_HIER_Z237, Op[2:0]}), .Carryout (ucarryout[16]),
       .Carryin (ucarryout[15]), .usum (Result[16]));
  alu_unit_79 alu_unit17(.A (A[17]), .B (B[17]), .Op
       ({UNCONNECTED_HIER_Z238, Op[2:0]}), .Carryout (ucarryout[17]),
       .Carryin (ucarryout[16]), .usum (Result[17]));
  alu_unit_80 alu_unit18(.A (A[18]), .B (B[18]), .Op
       ({UNCONNECTED_HIER_Z239, Op[2:0]}), .Carryout (ucarryout[18]),
       .Carryin (ucarryout[17]), .usum (Result[18]));
  alu_unit_81 alu_unit19(.A (A[19]), .B (B[19]), .Op
       ({UNCONNECTED_HIER_Z240, Op[2:0]}), .Carryout (ucarryout[19]),
       .Carryin (ucarryout[18]), .usum (Result[19]));
  alu_unit_82 alu_unit20(.A (A[20]), .B (B[20]), .Op
       ({UNCONNECTED_HIER_Z241, Op[2:0]}), .Carryout (ucarryout[20]),
       .Carryin (ucarryout[19]), .usum (Result[20]));
  alu_unit_83 alu_unit21(.A (A[21]), .B (B[21]), .Op
       ({UNCONNECTED_HIER_Z242, Op[2:0]}), .Carryout (ucarryout[21]),
       .Carryin (ucarryout[20]), .usum (Result[21]));
  alu_unit_84 alu_unit22(.A (A[22]), .B (B[22]), .Op
       ({UNCONNECTED_HIER_Z243, Op[2:0]}), .Carryout (ucarryout[22]),
       .Carryin (ucarryout[21]), .usum (Result[22]));
  alu_unit_85 alu_unit23(.A (A[23]), .B (B[23]), .Op
       ({UNCONNECTED_HIER_Z244, Op[2:0]}), .Carryout (ucarryout[23]),
       .Carryin (ucarryout[22]), .usum (Result[23]));
  alu_unit_86 alu_unit24(.A (A[24]), .B (B[24]), .Op
       ({UNCONNECTED_HIER_Z245, Op[2:0]}), .Carryout (ucarryout[24]),
       .Carryin (ucarryout[23]), .usum (Result[24]));
  alu_unit_87 alu_unit25(.A (A[25]), .B (B[25]), .Op
       ({UNCONNECTED_HIER_Z246, Op[2:0]}), .Carryout (ucarryout[25]),
       .Carryin (ucarryout[24]), .usum (Result[25]));
  alu_unit_88 alu_unit26(.A (A[26]), .B (B[26]), .Op
       ({UNCONNECTED_HIER_Z247, Op[2:0]}), .Carryout (ucarryout[26]),
       .Carryin (ucarryout[25]), .usum (Result[26]));
  alu_unit_89 alu_unit27(.A (A[27]), .B (B[27]), .Op
       ({UNCONNECTED_HIER_Z248, Op[2:0]}), .Carryout (ucarryout[27]),
       .Carryin (ucarryout[26]), .usum (Result[27]));
  alu_unit_90 alu_unit28(.A (A[28]), .B (B[28]), .Op
       ({UNCONNECTED_HIER_Z249, Op[2:0]}), .Carryout (ucarryout[28]),
       .Carryin (ucarryout[27]), .usum (Result[28]));
  alu_unit_91 alu_unit29(.A (A[29]), .B (B[29]), .Op
       ({UNCONNECTED_HIER_Z250, Op[2:0]}), .Carryout (ucarryout[29]),
       .Carryin (ucarryout[28]), .usum (Result[29]));
  alu_unit_92 alu_unit30(.A (A[30]), .B (B[30]), .Op
       ({UNCONNECTED_HIER_Z251, Op[2:0]}), .Carryout (ucarryout[30]),
       .Carryin (ucarryout[29]), .usum (Result[30]));
  alu_msb_2 alu_unit31(.A (A[31]), .B (B[31]), .Op
       ({UNCONNECTED_HIER_Z252, Op[2:0]}), .Carryout (Carryout),
       .Carryin (ucarryout[30]), .usum (Result[31]), .Overflow
       (Overflow), .Set (Set));
  and_gate and_slt3(.x (t8), .y (t6), .z (t_slt));
  and_gate and_sltu3(.x (t10), .y (t7), .z (t_sltu));
  and_gate andslt1(.x (Op[0]), .y (Op[2]), .z (t6));
  and_gate andsltu1(.x (Op[1]), .y (Op[2]), .z (t7));
  mux_32 muxslt1(.sel (t_slt), .src0 (Result), .src1 ({n_104, n_105,
       n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113, n_114,
       n_115, n_116, n_117, n_118, n_119, n_120, n_121, n_122, n_123,
       n_124, n_125, n_126, n_127, n_128, n_129, n_130, n_131, n_132,
       n_133, n_134, Set}), .z (result0));
  mux_32 muxsltu1(.sel (t_sltu), .src0 (result0), .src1 ({n_104, n_105,
       n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113, n_114,
       n_115, n_116, n_117, n_118, n_119, n_120, n_121, n_122, n_123,
       n_124, n_125, n_126, n_127, n_128, n_129, n_130, n_131, n_132,
       n_133, n_134, Set}), .z (Final_result));
  not_gate not_slt(.x (Op[1]), .z (t8));
  not_gate not_sltu1(.x (Op[0]), .z (t10));
endmodule

module sll_2(A, B, Op, Carryout, Overflow, Result);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow;
  wire [31:0] Result;
  wire [31:0] S0;
  wire [31:0] S0_out;
  wire [31:0] S1;
  wire [31:0] S1_out;
  wire [31:0] S2;
  wire [31:0] S2_out;
  wire [31:0] S3;
  wire [31:0] S3_out;
  wire [31:0] S4;
  mux_32 mux_1(.sel (B[0]), .src0 (A), .src1 (S0), .z (S0_out));
  mux_32 mux_2(.sel (B[1]), .src0 (S0_out), .src1 (S1), .z (S1_out));
  mux_32 mux_3(.sel (B[2]), .src0 (S1_out), .src1 (S2), .z (S2_out));
  mux_32 mux_4(.sel (B[3]), .src0 (S2_out), .src1 (S3), .z (S3_out));
  mux_32 mux_5(.sel (B[4]), .src0 (S3_out), .src1 (S4), .z (Result));
  or_gate_32 ors0(.x ({A[30:0], 1'b0}), .y
       (32'b00000000000000000000000000000000), .z (S0));
  or_gate_32 ors1(.x ({S0_out[29:0], 2'b00}), .y
       (32'b00000000000000000000000000000000), .z (S1));
  or_gate_32 ors2(.x ({S1_out[27:0], 4'b0000}), .y
       (32'b00000000000000000000000000000000), .z (S2));
  or_gate_32 ors3(.x ({S2_out[23:0], 8'b00000000}), .y
       (32'b00000000000000000000000000000000), .z (S3));
  or_gate_32 ors4(.x ({S3_out[15:0], 16'b0000000000000000}), .y
       (32'b00000000000000000000000000000000), .z (S4));
endmodule

module srl_2(A, B, Op, Carryout, Overflow, Result);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow;
  wire [31:0] Result;
  wire [31:0] S0;
  wire [31:0] S0_out;
  wire [31:0] S1;
  wire [31:0] S1_out;
  wire [31:0] S2;
  wire [31:0] S2_out;
  wire [31:0] S3;
  wire [31:0] S3_out;
  wire [31:0] S4;
  mux_32 mux_1(.sel (B[0]), .src0 (A), .src1 (S0), .z (S0_out));
  mux_32 mux_2(.sel (B[1]), .src0 (S0_out), .src1 (S1), .z (S1_out));
  mux_32 mux_3(.sel (B[2]), .src0 (S1_out), .src1 (S2), .z (S2_out));
  mux_32 mux_4(.sel (B[3]), .src0 (S2_out), .src1 (S3), .z (S3_out));
  mux_32 mux_5(.sel (B[4]), .src0 (S3_out), .src1 (S4), .z (Result));
  or_gate_32 ors0(.x ({1'b0, A[31:1]}), .y
       (32'b00000000000000000000000000000000), .z (S0));
  or_gate_32 ors1(.x ({2'b00, S0_out[31:2]}), .y
       (32'b00000000000000000000000000000000), .z (S1));
  or_gate_32 ors2(.x ({4'b0000, S1_out[31:4]}), .y
       (32'b00000000000000000000000000000000), .z (S2));
  or_gate_32 ors3(.x ({8'b00000000, S2_out[31:8]}), .y
       (32'b00000000000000000000000000000000), .z (S3));
  or_gate_32 ors4(.x ({16'b0000000000000000, S3_out[31:16]}), .y
       (32'b00000000000000000000000000000000), .z (S4));
endmodule

module alu_2(A, B, Op, Carryout, Overflow, Zero, Result, Set);
  input [31:0] A, B;
  input [3:0] Op;
  output Carryout, Overflow, Zero, Set;
  output [31:0] Result;
  wire [31:0] A, B;
  wire [3:0] Op;
  wire Carryout, Overflow, Zero, Set;
  wire [31:0] Result;
  wire [31:0] Result_andsub;
  wire [31:0] Result_sll;
  wire [31:0] t4;
  wire [31:0] Result_srl;
  wire Carryout_andsub, Carryout_sll, Carryout_srl, Overflow_andsub,
       Overflow_sll, Overflow_srl, UNCONNECTED_HIER_Z253,
       UNCONNECTED_HIER_Z254;
  wire UNCONNECTED_HIER_Z255, UNCONNECTED_HIER_Z256,
       UNCONNECTED_HIER_Z257, UNCONNECTED_HIER_Z258,
       UNCONNECTED_HIER_Z259, UNCONNECTED_HIER_Z260,
       UNCONNECTED_HIER_Z261, UNCONNECTED_HIER_Z262;
  wire UNCONNECTED_HIER_Z263, UNCONNECTED_HIER_Z264,
       UNCONNECTED_HIER_Z265, UNCONNECTED_HIER_Z266,
       UNCONNECTED_HIER_Z267, UNCONNECTED_HIER_Z268,
       UNCONNECTED_HIER_Z269, UNCONNECTED_HIER_Z270;
  wire UNCONNECTED_HIER_Z271, UNCONNECTED_HIER_Z272,
       UNCONNECTED_HIER_Z273, UNCONNECTED_HIER_Z274,
       UNCONNECTED_HIER_Z275, UNCONNECTED_HIER_Z276,
       UNCONNECTED_HIER_Z277, UNCONNECTED_HIER_Z278;
  wire UNCONNECTED_HIER_Z279, UNCONNECTED_HIER_Z280,
       UNCONNECTED_HIER_Z281, UNCONNECTED_HIER_Z282,
       UNCONNECTED_HIER_Z283, UNCONNECTED_HIER_Z284,
       UNCONNECTED_HIER_Z285, UNCONNECTED_HIER_Z286;
  wire UNCONNECTED_HIER_Z287, UNCONNECTED_HIER_Z288,
       UNCONNECTED_HIER_Z289, UNCONNECTED_HIER_Z290,
       UNCONNECTED_HIER_Z291, UNCONNECTED_HIER_Z292,
       UNCONNECTED_HIER_Z293, UNCONNECTED_HIER_Z294;
  wire UNCONNECTED_HIER_Z295, UNCONNECTED_HIER_Z296,
       UNCONNECTED_HIER_Z297, UNCONNECTED_HIER_Z298,
       UNCONNECTED_HIER_Z299, UNCONNECTED_HIER_Z300,
       UNCONNECTED_HIER_Z301, UNCONNECTED_HIER_Z302;
  wire UNCONNECTED_HIER_Z303, UNCONNECTED_HIER_Z304,
       UNCONNECTED_HIER_Z305, UNCONNECTED_HIER_Z306,
       UNCONNECTED_HIER_Z307, UNCONNECTED_HIER_Z308,
       UNCONNECTED_HIER_Z309, UNCONNECTED_HIER_Z310;
  wire UNCONNECTED_HIER_Z311, UNCONNECTED_HIER_Z312,
       UNCONNECTED_HIER_Z313, UNCONNECTED_HIER_Z314,
       UNCONNECTED_HIER_Z315, n_1, n_2, n_3;
  wire n_4, t1, t2, t3, z1, z2, z3, z4;
  wire z5, z6, z7, z8, z9, z10, z11, z12;
  wire z13, z14, z15, z16, z17, z18, z19, z20;
  wire z21, z22, z23, z24, z25, z26, z27, z28;
  wire z29, z30, z31;
  and_gate andcarry(.x (t3), .y (Carryout_andsub), .z (n_3));
  and_gate andover(.x (t3), .y (Overflow_andsub), .z (n_4));
  and_gate andsll1(.x (Op[3]), .y (Op[0]), .z (t1));
  and_gate andsrl1(.x (Op[3]), .y (Op[1]), .z (t2));
  alu_32_2 andsub(.A (A), .B (B), .Op ({UNCONNECTED_HIER_Z253, 1'b0,
       Op[1:0]}), .Carryout (Carryout_andsub), .Overflow
       (Overflow_andsub), .Final_result (Result_andsub), .Set (n_1));
  mux_32 mux1(.sel (Op[3]), .src0 (Result_andsub), .src1 (Result_sll),
       .z (t4));
  mux_32 mux2(.sel (t2), .src0 (t4), .src1 (Result_srl), .z (Result));
  not_gate notop3(.x (Op[3]), .z (t3));
  or_gate orz1(.x (Result[0]), .y (Result[1]), .z (z1));
  or_gate orz2(.x (z1), .y (Result[2]), .z (z2));
  or_gate orz3(.x (z2), .y (Result[3]), .z (z3));
  or_gate orz4(.x (z3), .y (Result[4]), .z (z4));
  or_gate orz5(.x (z4), .y (Result[5]), .z (z5));
  or_gate orz6(.x (z5), .y (Result[6]), .z (z6));
  or_gate orz7(.x (z6), .y (Result[7]), .z (z7));
  or_gate orz8(.x (z7), .y (Result[8]), .z (z8));
  or_gate orz9(.x (z8), .y (Result[9]), .z (z9));
  or_gate orz10(.x (z9), .y (Result[10]), .z (z10));
  or_gate orz11(.x (z10), .y (Result[11]), .z (z11));
  or_gate orz12(.x (z11), .y (Result[12]), .z (z12));
  or_gate orz13(.x (z12), .y (Result[13]), .z (z13));
  or_gate orz14(.x (z13), .y (Result[14]), .z (z14));
  or_gate orz15(.x (z14), .y (Result[15]), .z (z15));
  or_gate orz16(.x (z15), .y (Result[16]), .z (z16));
  or_gate orz17(.x (z16), .y (Result[17]), .z (z17));
  or_gate orz18(.x (z17), .y (Result[18]), .z (z18));
  or_gate orz19(.x (z18), .y (Result[19]), .z (z19));
  or_gate orz20(.x (z19), .y (Result[20]), .z (z20));
  or_gate orz21(.x (z20), .y (Result[21]), .z (z21));
  or_gate orz22(.x (z21), .y (Result[22]), .z (z22));
  or_gate orz23(.x (z22), .y (Result[23]), .z (z23));
  or_gate orz24(.x (z23), .y (Result[24]), .z (z24));
  or_gate orz25(.x (z24), .y (Result[25]), .z (z25));
  or_gate orz26(.x (z25), .y (Result[26]), .z (z26));
  or_gate orz27(.x (z26), .y (Result[27]), .z (z27));
  or_gate orz28(.x (z27), .y (Result[28]), .z (z28));
  or_gate orz29(.x (z28), .y (Result[29]), .z (z29));
  or_gate orz30(.x (z29), .y (Result[30]), .z (z30));
  or_gate orz31(.x (z30), .y (Result[31]), .z (z31));
  sll_2 sll_instance(.A (A), .B ({UNCONNECTED_HIER_Z280,
       UNCONNECTED_HIER_Z279, UNCONNECTED_HIER_Z278,
       UNCONNECTED_HIER_Z277, UNCONNECTED_HIER_Z276,
       UNCONNECTED_HIER_Z275, UNCONNECTED_HIER_Z274,
       UNCONNECTED_HIER_Z273, UNCONNECTED_HIER_Z272,
       UNCONNECTED_HIER_Z271, UNCONNECTED_HIER_Z270,
       UNCONNECTED_HIER_Z269, UNCONNECTED_HIER_Z268,
       UNCONNECTED_HIER_Z267, UNCONNECTED_HIER_Z266,
       UNCONNECTED_HIER_Z265, UNCONNECTED_HIER_Z264,
       UNCONNECTED_HIER_Z263, UNCONNECTED_HIER_Z262,
       UNCONNECTED_HIER_Z261, UNCONNECTED_HIER_Z260,
       UNCONNECTED_HIER_Z259, UNCONNECTED_HIER_Z258,
       UNCONNECTED_HIER_Z257, UNCONNECTED_HIER_Z256,
       UNCONNECTED_HIER_Z255, UNCONNECTED_HIER_Z254, B[4:0]}), .Op
       ({UNCONNECTED_HIER_Z284, UNCONNECTED_HIER_Z283,
       UNCONNECTED_HIER_Z282, UNCONNECTED_HIER_Z281}), .Carryout
       (Carryout_sll), .Overflow (Overflow_sll), .Result (Result_sll));
  srl_2 srl_instance(.A (A), .B ({UNCONNECTED_HIER_Z311,
       UNCONNECTED_HIER_Z310, UNCONNECTED_HIER_Z309,
       UNCONNECTED_HIER_Z308, UNCONNECTED_HIER_Z307,
       UNCONNECTED_HIER_Z306, UNCONNECTED_HIER_Z305,
       UNCONNECTED_HIER_Z304, UNCONNECTED_HIER_Z303,
       UNCONNECTED_HIER_Z302, UNCONNECTED_HIER_Z301,
       UNCONNECTED_HIER_Z300, UNCONNECTED_HIER_Z299,
       UNCONNECTED_HIER_Z298, UNCONNECTED_HIER_Z297,
       UNCONNECTED_HIER_Z296, UNCONNECTED_HIER_Z295,
       UNCONNECTED_HIER_Z294, UNCONNECTED_HIER_Z293,
       UNCONNECTED_HIER_Z292, UNCONNECTED_HIER_Z291,
       UNCONNECTED_HIER_Z290, UNCONNECTED_HIER_Z289,
       UNCONNECTED_HIER_Z288, UNCONNECTED_HIER_Z287,
       UNCONNECTED_HIER_Z286, UNCONNECTED_HIER_Z285, B[4:0]}), .Op
       ({UNCONNECTED_HIER_Z315, UNCONNECTED_HIER_Z314,
       UNCONNECTED_HIER_Z313, UNCONNECTED_HIER_Z312}), .Carryout
       (Carryout_srl), .Overflow (Overflow_srl), .Result (Result_srl));
  not_gate zero(.x (z31), .z (n_2));
endmodule

module Signextend(Extop, Din, Dout);
  input Extop;
  input [15:0] Din;
  output [31:0] Dout;
  wire Extop;
  wire [15:0] Din;
  wire [31:0] Dout;
  assign Dout[0] = Din[0];
  assign Dout[1] = Din[1];
  assign Dout[2] = Din[2];
  assign Dout[3] = Din[3];
  assign Dout[4] = Din[4];
  assign Dout[5] = Din[5];
  assign Dout[6] = Din[6];
  assign Dout[7] = Din[7];
  assign Dout[8] = Din[8];
  assign Dout[9] = Din[9];
  assign Dout[10] = Din[10];
  assign Dout[11] = Din[11];
  assign Dout[12] = Din[12];
  assign Dout[13] = Din[13];
  assign Dout[14] = Din[14];
  assign Dout[15] = Din[15];
  assign Dout[16] = Dout[31];
  assign Dout[17] = Dout[31];
  assign Dout[18] = Dout[31];
  assign Dout[19] = Dout[31];
  assign Dout[20] = Dout[31];
  assign Dout[21] = Dout[31];
  assign Dout[22] = Dout[31];
  assign Dout[23] = Dout[31];
  assign Dout[24] = Dout[31];
  assign Dout[25] = Dout[31];
  assign Dout[26] = Dout[31];
  assign Dout[27] = Dout[31];
  assign Dout[28] = Dout[31];
  assign Dout[29] = Dout[31];
  assign Dout[30] = Dout[31];
  and_gate se_ag_0(.x (Extop), .y (Din[15]), .z (Dout[31]));
endmodule

module PC(clk, initPC, Branch, Zero, Overflow, Op, Immed, ALUOutput,
     CurrPC, NextPC, lw_stall, sel, initPC_delay9, initPC_delay4,
     initPC_delay6);
  input clk, initPC, Branch, Zero, Overflow, lw_stall;
  input [5:0] Op;
  input [15:0] Immed;
  input [31:0] ALUOutput, CurrPC;
  output [31:0] NextPC;
  output sel, initPC_delay9, initPC_delay4, initPC_delay6;
  wire clk, initPC, Branch, Zero, Overflow, lw_stall;
  wire [5:0] Op;
  wire [15:0] Immed;
  wire [31:0] ALUOutput, CurrPC;
  wire [31:0] NextPC;
  wire sel, initPC_delay9, initPC_delay4, initPC_delay6;
  wire [31:0] PCplus4;
  wire [31:0] PC_delay2;
  wire [31:0] immedOffset;
  wire [31:0] PCbranch;
  wire [31:0] newfinalPC;
  wire [31:0] PC_delay0;
  wire [31:0] PC_delay1;
  wire [31:0] PCbranchfinal;
  wire [31:0] CalcuPC;
  wire [31:0] finalPC;
  wire [31:0] immedExt_init;
  wire [31:0] immedExt;
  wire NotinitPC, UNCONNECTED_HIER_Z316, UNCONNECTED_HIER_Z317,
       UNCONNECTED_HIER_Z318, UNCONNECTED_HIER_Z319,
       UNCONNECTED_HIER_Z320, UNCONNECTED_HIER_Z321,
       UNCONNECTED_HIER_Z322;
  wire UNCONNECTED_HIER_Z323, UNCONNECTED_HIER_Z324,
       UNCONNECTED_HIER_Z325, UNCONNECTED_HIER_Z326,
       UNCONNECTED_HIER_Z327, UNCONNECTED_HIER_Z328,
       UNCONNECTED_HIER_Z329, UNCONNECTED_HIER_Z330;
  wire UNCONNECTED_HIER_Z331, UNCONNECTED_HIER_Z332,
       UNCONNECTED_HIER_Z333, UNCONNECTED_HIER_Z334,
       UNCONNECTED_HIER_Z335, UNCONNECTED_HIER_Z336,
       UNCONNECTED_HIER_Z337, UNCONNECTED_HIER_Z338;
  wire UNCONNECTED_HIER_Z339, UNCONNECTED_HIER_Z340,
       UNCONNECTED_HIER_Z341, UNCONNECTED_HIER_Z342,
       UNCONNECTED_HIER_Z343, UNCONNECTED_HIER_Z344,
       UNCONNECTED_HIER_Z345, UNCONNECTED_HIER_Z346;
  wire UNCONNECTED_HIER_Z347, UNCONNECTED_HIER_Z348,
       UNCONNECTED_HIER_Z349, carry_0, carry_1, finalsel,
       initPC_delay1, initPC_delay2;
  wire initPC_delay3, initPC_delay5, initPC_delay7, initPC_delay8,
       invZero, n_95, n_96, n_97;
  wire n_98, n_99, n_100, n_101, n_102, n_103, n_104, n_105;
  wire n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113;
  wire n_114, n_115, n_116, n_117, n_118, n_119, n_120, n_121;
  wire n_122, n_123, n_124, n_125, n_126, n_127, n_128, n_129;
  wire n_130, n_131, n_132, n_133, n_134, n_135, n_136, n_137;
  wire n_138, n_139, n_140, n_141, n_142, n_143, n_144, n_145;
  wire n_146, n_147, n_148, n_149, n_150, n_151, n_152, n_153;
  wire n_154, n_155, n_156, n_157, n_158, n_159, n_160, n_161;
  wire newlw_stall, ovflow_0, ovflow_1, set_0, set_1, valid,
       valid_beyond, valid_bgtz;
  wire valid_zero, zero_0, zero_1;
  assign n_128 = 1'b0;
  assign n_127 = 1'b0;
  assign n_129 = 1'b1;
  assign n_161 = 1'b0;
  assign n_160 = 1'b0;
  assign n_159 = 1'b0;
  assign n_158 = 1'b0;
  assign n_157 = 1'b0;
  assign n_156 = 1'b0;
  assign n_155 = 1'b0;
  assign n_154 = 1'b0;
  assign n_153 = 1'b0;
  assign n_152 = 1'b0;
  assign n_151 = 1'b0;
  assign n_150 = 1'b0;
  assign n_149 = 1'b0;
  assign n_148 = 1'b0;
  assign n_147 = 1'b0;
  assign n_146 = 1'b0;
  assign n_145 = 1'b0;
  assign n_144 = 1'b0;
  assign n_143 = 1'b0;
  assign n_142 = 1'b0;
  assign n_141 = 1'b0;
  assign n_140 = 1'b0;
  assign n_139 = 1'b0;
  assign n_138 = 1'b0;
  assign n_137 = 1'b0;
  assign n_136 = 1'b0;
  assign n_135 = 1'b0;
  assign n_134 = 1'b0;
  assign n_133 = 1'b0;
  assign n_132 = 1'b0;
  assign n_131 = 1'b0;
  assign n_130 = 1'b0;
  assign n_126 = 1'b0;
  assign n_125 = 1'b0;
  assign n_124 = 1'b0;
  assign n_123 = 1'b0;
  assign n_122 = 1'b0;
  assign n_121 = 1'b1;
  assign n_120 = 1'b0;
  assign n_119 = 1'b0;
  assign n_118 = 1'b0;
  assign n_117 = 1'b0;
  assign n_116 = 1'b0;
  assign n_115 = 1'b0;
  assign n_114 = 1'b0;
  assign n_113 = 1'b0;
  assign n_112 = 1'b0;
  assign n_111 = 1'b0;
  assign n_110 = 1'b0;
  assign n_109 = 1'b0;
  assign n_108 = 1'b0;
  assign n_107 = 1'b0;
  assign n_106 = 1'b0;
  assign n_105 = 1'b0;
  assign n_104 = 1'b1;
  assign n_103 = 1'b0;
  assign n_102 = 1'b0;
  assign n_101 = 1'b0;
  assign n_100 = 1'b0;
  assign n_99 = 1'b0;
  assign n_98 = 1'b0;
  assign n_97 = 1'b0;
  assign n_96 = 1'b0;
  assign n_95 = 1'b0;
  dffr PC_initdelay1(.clk (clk), .d (initPC), .q (initPC_delay1));
  dff PC_initdelay2(.clk (clk), .d (initPC_delay1), .q (initPC_delay2));
  dff PC_initdelay4(.clk (clk), .d (initPC_delay3), .q (initPC_delay4));
  dff PC_initdelay5(.clk (clk), .d (initPC_delay4), .q (initPC_delay6));
  dff PC_initdelay6(.clk (clk), .d (initPC_delay6), .q (initPC_delay7));
  dff PC_initdelay7(.clk (clk), .d (initPC_delay7), .q (initPC_delay8));
  alu_1 alu_0(.A (CurrPC), .B ({UNCONNECTED_HIER_Z347,
       UNCONNECTED_HIER_Z346, UNCONNECTED_HIER_Z345,
       UNCONNECTED_HIER_Z344, UNCONNECTED_HIER_Z343,
       UNCONNECTED_HIER_Z342, UNCONNECTED_HIER_Z341,
       UNCONNECTED_HIER_Z340, UNCONNECTED_HIER_Z339,
       UNCONNECTED_HIER_Z338, UNCONNECTED_HIER_Z337,
       UNCONNECTED_HIER_Z336, UNCONNECTED_HIER_Z335,
       UNCONNECTED_HIER_Z334, UNCONNECTED_HIER_Z333,
       UNCONNECTED_HIER_Z332, UNCONNECTED_HIER_Z331,
       UNCONNECTED_HIER_Z330, UNCONNECTED_HIER_Z329,
       UNCONNECTED_HIER_Z328, UNCONNECTED_HIER_Z327,
       UNCONNECTED_HIER_Z326, UNCONNECTED_HIER_Z325,
       UNCONNECTED_HIER_Z324, UNCONNECTED_HIER_Z323,
       UNCONNECTED_HIER_Z322, UNCONNECTED_HIER_Z321,
       UNCONNECTED_HIER_Z320, UNCONNECTED_HIER_Z319,
       UNCONNECTED_HIER_Z318, UNCONNECTED_HIER_Z317,
       UNCONNECTED_HIER_Z316}), .Op ({1'b0, UNCONNECTED_HIER_Z348,
       2'b10}), .Carryout (carry_0), .Overflow (ovflow_0), .Zero
       (zero_0), .Result (PCplus4), .Set (set_0));
  alu_2 alu_1(.A (PC_delay2), .B (immedOffset), .Op ({1'b0,
       UNCONNECTED_HIER_Z349, 2'b10}), .Carryout (carry_1), .Overflow
       (ovflow_1), .Zero (zero_1), .Result (PCbranch), .Set (set_1));
  and_gate and_0(.x (Branch), .y (valid), .z (sel));
  and_gate and_bgtz(.x (valid_beyond), .y (invZero), .z (valid_bgtz));
  and_gate and_lw_stall(.x (NotinitPC), .y (lw_stall), .z
       (newlw_stall));
  dff \genblk1[0].dff_0 (.clk (clk), .d (newfinalPC[0]), .q
       (NextPC[0]));
  dff \genblk1[0].reg_PC_delay0 (.clk (clk), .d (PCplus4[0]), .q
       (PC_delay0[0]));
  dff \genblk1[0].reg_PC_delay1 (.clk (clk), .d (PC_delay0[0]), .q
       (PC_delay1[0]));
  dff \genblk1[0].reg_PC_delay2 (.clk (clk), .d (PC_delay1[0]), .q
       (PC_delay2[0]));
  dff \genblk1[1].dff_0 (.clk (clk), .d (newfinalPC[1]), .q
       (NextPC[1]));
  dff \genblk1[1].reg_PC_delay0 (.clk (clk), .d (PCplus4[1]), .q
       (PC_delay0[1]));
  dff \genblk1[1].reg_PC_delay1 (.clk (clk), .d (PC_delay0[1]), .q
       (PC_delay1[1]));
  dff \genblk1[1].reg_PC_delay2 (.clk (clk), .d (PC_delay1[1]), .q
       (PC_delay2[1]));
  dff \genblk1[2].dff_0 (.clk (clk), .d (newfinalPC[2]), .q
       (NextPC[2]));
  dff \genblk1[2].reg_PC_delay0 (.clk (clk), .d (PCplus4[2]), .q
       (PC_delay0[2]));
  dff \genblk1[2].reg_PC_delay1 (.clk (clk), .d (PC_delay0[2]), .q
       (PC_delay1[2]));
  dff \genblk1[2].reg_PC_delay2 (.clk (clk), .d (PC_delay1[2]), .q
       (PC_delay2[2]));
  dff \genblk1[3].dff_0 (.clk (clk), .d (newfinalPC[3]), .q
       (NextPC[3]));
  dff \genblk1[3].reg_PC_delay0 (.clk (clk), .d (PCplus4[3]), .q
       (PC_delay0[3]));
  dff \genblk1[3].reg_PC_delay1 (.clk (clk), .d (PC_delay0[3]), .q
       (PC_delay1[3]));
  dff \genblk1[3].reg_PC_delay2 (.clk (clk), .d (PC_delay1[3]), .q
       (PC_delay2[3]));
  dff \genblk1[4].dff_0 (.clk (clk), .d (newfinalPC[4]), .q
       (NextPC[4]));
  dff \genblk1[4].reg_PC_delay0 (.clk (clk), .d (PCplus4[4]), .q
       (PC_delay0[4]));
  dff \genblk1[4].reg_PC_delay1 (.clk (clk), .d (PC_delay0[4]), .q
       (PC_delay1[4]));
  dff \genblk1[4].reg_PC_delay2 (.clk (clk), .d (PC_delay1[4]), .q
       (PC_delay2[4]));
  dff \genblk1[5].dff_0 (.clk (clk), .d (newfinalPC[5]), .q
       (NextPC[5]));
  dff \genblk1[5].reg_PC_delay0 (.clk (clk), .d (PCplus4[5]), .q
       (PC_delay0[5]));
  dff \genblk1[5].reg_PC_delay1 (.clk (clk), .d (PC_delay0[5]), .q
       (PC_delay1[5]));
  dff \genblk1[5].reg_PC_delay2 (.clk (clk), .d (PC_delay1[5]), .q
       (PC_delay2[5]));
  dff \genblk1[6].dff_0 (.clk (clk), .d (newfinalPC[6]), .q
       (NextPC[6]));
  dff \genblk1[6].reg_PC_delay0 (.clk (clk), .d (PCplus4[6]), .q
       (PC_delay0[6]));
  dff \genblk1[6].reg_PC_delay1 (.clk (clk), .d (PC_delay0[6]), .q
       (PC_delay1[6]));
  dff \genblk1[6].reg_PC_delay2 (.clk (clk), .d (PC_delay1[6]), .q
       (PC_delay2[6]));
  dff \genblk1[7].dff_0 (.clk (clk), .d (newfinalPC[7]), .q
       (NextPC[7]));
  dff \genblk1[7].reg_PC_delay0 (.clk (clk), .d (PCplus4[7]), .q
       (PC_delay0[7]));
  dff \genblk1[7].reg_PC_delay1 (.clk (clk), .d (PC_delay0[7]), .q
       (PC_delay1[7]));
  dff \genblk1[7].reg_PC_delay2 (.clk (clk), .d (PC_delay1[7]), .q
       (PC_delay2[7]));
  dff \genblk1[8].dff_0 (.clk (clk), .d (newfinalPC[8]), .q
       (NextPC[8]));
  dff \genblk1[8].reg_PC_delay0 (.clk (clk), .d (PCplus4[8]), .q
       (PC_delay0[8]));
  dff \genblk1[8].reg_PC_delay1 (.clk (clk), .d (PC_delay0[8]), .q
       (PC_delay1[8]));
  dff \genblk1[8].reg_PC_delay2 (.clk (clk), .d (PC_delay1[8]), .q
       (PC_delay2[8]));
  dff \genblk1[9].dff_0 (.clk (clk), .d (newfinalPC[9]), .q
       (NextPC[9]));
  dff \genblk1[9].reg_PC_delay0 (.clk (clk), .d (PCplus4[9]), .q
       (PC_delay0[9]));
  dff \genblk1[9].reg_PC_delay1 (.clk (clk), .d (PC_delay0[9]), .q
       (PC_delay1[9]));
  dff \genblk1[9].reg_PC_delay2 (.clk (clk), .d (PC_delay1[9]), .q
       (PC_delay2[9]));
  dff \genblk1[10].dff_0 (.clk (clk), .d (newfinalPC[10]), .q
       (NextPC[10]));
  dff \genblk1[10].reg_PC_delay0 (.clk (clk), .d (PCplus4[10]), .q
       (PC_delay0[10]));
  dff \genblk1[10].reg_PC_delay1 (.clk (clk), .d (PC_delay0[10]), .q
       (PC_delay1[10]));
  dff \genblk1[10].reg_PC_delay2 (.clk (clk), .d (PC_delay1[10]), .q
       (PC_delay2[10]));
  dff \genblk1[11].dff_0 (.clk (clk), .d (newfinalPC[11]), .q
       (NextPC[11]));
  dff \genblk1[11].reg_PC_delay0 (.clk (clk), .d (PCplus4[11]), .q
       (PC_delay0[11]));
  dff \genblk1[11].reg_PC_delay1 (.clk (clk), .d (PC_delay0[11]), .q
       (PC_delay1[11]));
  dff \genblk1[11].reg_PC_delay2 (.clk (clk), .d (PC_delay1[11]), .q
       (PC_delay2[11]));
  dff \genblk1[12].dff_0 (.clk (clk), .d (newfinalPC[12]), .q
       (NextPC[12]));
  dff \genblk1[12].reg_PC_delay0 (.clk (clk), .d (PCplus4[12]), .q
       (PC_delay0[12]));
  dff \genblk1[12].reg_PC_delay1 (.clk (clk), .d (PC_delay0[12]), .q
       (PC_delay1[12]));
  dff \genblk1[12].reg_PC_delay2 (.clk (clk), .d (PC_delay1[12]), .q
       (PC_delay2[12]));
  dff \genblk1[13].dff_0 (.clk (clk), .d (newfinalPC[13]), .q
       (NextPC[13]));
  dff \genblk1[13].reg_PC_delay0 (.clk (clk), .d (PCplus4[13]), .q
       (PC_delay0[13]));
  dff \genblk1[13].reg_PC_delay1 (.clk (clk), .d (PC_delay0[13]), .q
       (PC_delay1[13]));
  dff \genblk1[13].reg_PC_delay2 (.clk (clk), .d (PC_delay1[13]), .q
       (PC_delay2[13]));
  dff \genblk1[14].dff_0 (.clk (clk), .d (newfinalPC[14]), .q
       (NextPC[14]));
  dff \genblk1[14].reg_PC_delay0 (.clk (clk), .d (PCplus4[14]), .q
       (PC_delay0[14]));
  dff \genblk1[14].reg_PC_delay1 (.clk (clk), .d (PC_delay0[14]), .q
       (PC_delay1[14]));
  dff \genblk1[14].reg_PC_delay2 (.clk (clk), .d (PC_delay1[14]), .q
       (PC_delay2[14]));
  dff \genblk1[15].dff_0 (.clk (clk), .d (newfinalPC[15]), .q
       (NextPC[15]));
  dff \genblk1[15].reg_PC_delay0 (.clk (clk), .d (PCplus4[15]), .q
       (PC_delay0[15]));
  dff \genblk1[15].reg_PC_delay1 (.clk (clk), .d (PC_delay0[15]), .q
       (PC_delay1[15]));
  dff \genblk1[15].reg_PC_delay2 (.clk (clk), .d (PC_delay1[15]), .q
       (PC_delay2[15]));
  dff \genblk1[16].dff_0 (.clk (clk), .d (newfinalPC[16]), .q
       (NextPC[16]));
  dff \genblk1[16].reg_PC_delay0 (.clk (clk), .d (PCplus4[16]), .q
       (PC_delay0[16]));
  dff \genblk1[16].reg_PC_delay1 (.clk (clk), .d (PC_delay0[16]), .q
       (PC_delay1[16]));
  dff \genblk1[16].reg_PC_delay2 (.clk (clk), .d (PC_delay1[16]), .q
       (PC_delay2[16]));
  dff \genblk1[17].dff_0 (.clk (clk), .d (newfinalPC[17]), .q
       (NextPC[17]));
  dff \genblk1[17].reg_PC_delay0 (.clk (clk), .d (PCplus4[17]), .q
       (PC_delay0[17]));
  dff \genblk1[17].reg_PC_delay1 (.clk (clk), .d (PC_delay0[17]), .q
       (PC_delay1[17]));
  dff \genblk1[17].reg_PC_delay2 (.clk (clk), .d (PC_delay1[17]), .q
       (PC_delay2[17]));
  dff \genblk1[18].dff_0 (.clk (clk), .d (newfinalPC[18]), .q
       (NextPC[18]));
  dff \genblk1[18].reg_PC_delay0 (.clk (clk), .d (PCplus4[18]), .q
       (PC_delay0[18]));
  dff \genblk1[18].reg_PC_delay1 (.clk (clk), .d (PC_delay0[18]), .q
       (PC_delay1[18]));
  dff \genblk1[18].reg_PC_delay2 (.clk (clk), .d (PC_delay1[18]), .q
       (PC_delay2[18]));
  dff \genblk1[19].dff_0 (.clk (clk), .d (newfinalPC[19]), .q
       (NextPC[19]));
  dff \genblk1[19].reg_PC_delay0 (.clk (clk), .d (PCplus4[19]), .q
       (PC_delay0[19]));
  dff \genblk1[19].reg_PC_delay1 (.clk (clk), .d (PC_delay0[19]), .q
       (PC_delay1[19]));
  dff \genblk1[19].reg_PC_delay2 (.clk (clk), .d (PC_delay1[19]), .q
       (PC_delay2[19]));
  dff \genblk1[20].dff_0 (.clk (clk), .d (newfinalPC[20]), .q
       (NextPC[20]));
  dff \genblk1[20].reg_PC_delay0 (.clk (clk), .d (PCplus4[20]), .q
       (PC_delay0[20]));
  dff \genblk1[20].reg_PC_delay1 (.clk (clk), .d (PC_delay0[20]), .q
       (PC_delay1[20]));
  dff \genblk1[20].reg_PC_delay2 (.clk (clk), .d (PC_delay1[20]), .q
       (PC_delay2[20]));
  dff \genblk1[21].dff_0 (.clk (clk), .d (newfinalPC[21]), .q
       (NextPC[21]));
  dff \genblk1[21].reg_PC_delay0 (.clk (clk), .d (PCplus4[21]), .q
       (PC_delay0[21]));
  dff \genblk1[21].reg_PC_delay1 (.clk (clk), .d (PC_delay0[21]), .q
       (PC_delay1[21]));
  dff \genblk1[21].reg_PC_delay2 (.clk (clk), .d (PC_delay1[21]), .q
       (PC_delay2[21]));
  dff \genblk1[22].dff_0 (.clk (clk), .d (newfinalPC[22]), .q
       (NextPC[22]));
  dff \genblk1[22].reg_PC_delay0 (.clk (clk), .d (PCplus4[22]), .q
       (PC_delay0[22]));
  dff \genblk1[22].reg_PC_delay1 (.clk (clk), .d (PC_delay0[22]), .q
       (PC_delay1[22]));
  dff \genblk1[22].reg_PC_delay2 (.clk (clk), .d (PC_delay1[22]), .q
       (PC_delay2[22]));
  dff \genblk1[23].dff_0 (.clk (clk), .d (newfinalPC[23]), .q
       (NextPC[23]));
  dff \genblk1[23].reg_PC_delay0 (.clk (clk), .d (PCplus4[23]), .q
       (PC_delay0[23]));
  dff \genblk1[23].reg_PC_delay1 (.clk (clk), .d (PC_delay0[23]), .q
       (PC_delay1[23]));
  dff \genblk1[23].reg_PC_delay2 (.clk (clk), .d (PC_delay1[23]), .q
       (PC_delay2[23]));
  dff \genblk1[24].dff_0 (.clk (clk), .d (newfinalPC[24]), .q
       (NextPC[24]));
  dff \genblk1[24].reg_PC_delay0 (.clk (clk), .d (PCplus4[24]), .q
       (PC_delay0[24]));
  dff \genblk1[24].reg_PC_delay1 (.clk (clk), .d (PC_delay0[24]), .q
       (PC_delay1[24]));
  dff \genblk1[24].reg_PC_delay2 (.clk (clk), .d (PC_delay1[24]), .q
       (PC_delay2[24]));
  dff \genblk1[25].dff_0 (.clk (clk), .d (newfinalPC[25]), .q
       (NextPC[25]));
  dff \genblk1[25].reg_PC_delay0 (.clk (clk), .d (PCplus4[25]), .q
       (PC_delay0[25]));
  dff \genblk1[25].reg_PC_delay1 (.clk (clk), .d (PC_delay0[25]), .q
       (PC_delay1[25]));
  dff \genblk1[25].reg_PC_delay2 (.clk (clk), .d (PC_delay1[25]), .q
       (PC_delay2[25]));
  dff \genblk1[26].dff_0 (.clk (clk), .d (newfinalPC[26]), .q
       (NextPC[26]));
  dff \genblk1[26].reg_PC_delay0 (.clk (clk), .d (PCplus4[26]), .q
       (PC_delay0[26]));
  dff \genblk1[26].reg_PC_delay1 (.clk (clk), .d (PC_delay0[26]), .q
       (PC_delay1[26]));
  dff \genblk1[26].reg_PC_delay2 (.clk (clk), .d (PC_delay1[26]), .q
       (PC_delay2[26]));
  dff \genblk1[27].dff_0 (.clk (clk), .d (newfinalPC[27]), .q
       (NextPC[27]));
  dff \genblk1[27].reg_PC_delay0 (.clk (clk), .d (PCplus4[27]), .q
       (PC_delay0[27]));
  dff \genblk1[27].reg_PC_delay1 (.clk (clk), .d (PC_delay0[27]), .q
       (PC_delay1[27]));
  dff \genblk1[27].reg_PC_delay2 (.clk (clk), .d (PC_delay1[27]), .q
       (PC_delay2[27]));
  dff \genblk1[28].dff_0 (.clk (clk), .d (newfinalPC[28]), .q
       (NextPC[28]));
  dff \genblk1[28].reg_PC_delay0 (.clk (clk), .d (PCplus4[28]), .q
       (PC_delay0[28]));
  dff \genblk1[28].reg_PC_delay1 (.clk (clk), .d (PC_delay0[28]), .q
       (PC_delay1[28]));
  dff \genblk1[28].reg_PC_delay2 (.clk (clk), .d (PC_delay1[28]), .q
       (PC_delay2[28]));
  dff \genblk1[29].dff_0 (.clk (clk), .d (newfinalPC[29]), .q
       (NextPC[29]));
  dff \genblk1[29].reg_PC_delay0 (.clk (clk), .d (PCplus4[29]), .q
       (PC_delay0[29]));
  dff \genblk1[29].reg_PC_delay1 (.clk (clk), .d (PC_delay0[29]), .q
       (PC_delay1[29]));
  dff \genblk1[29].reg_PC_delay2 (.clk (clk), .d (PC_delay1[29]), .q
       (PC_delay2[29]));
  dff \genblk1[30].dff_0 (.clk (clk), .d (newfinalPC[30]), .q
       (NextPC[30]));
  dff \genblk1[30].reg_PC_delay0 (.clk (clk), .d (PCplus4[30]), .q
       (PC_delay0[30]));
  dff \genblk1[30].reg_PC_delay1 (.clk (clk), .d (PC_delay0[30]), .q
       (PC_delay1[30]));
  dff \genblk1[30].reg_PC_delay2 (.clk (clk), .d (PC_delay1[30]), .q
       (PC_delay2[30]));
  dff \genblk1[31].dff_0 (.clk (clk), .d (newfinalPC[31]), .q
       (NextPC[31]));
  dff \genblk1[31].reg_PC_delay0 (.clk (clk), .d (PCplus4[31]), .q
       (PC_delay0[31]));
  dff \genblk1[31].reg_PC_delay1 (.clk (clk), .d (PC_delay0[31]), .q
       (PC_delay1[31]));
  dff \genblk1[31].reg_PC_delay2 (.clk (clk), .d (PC_delay1[31]), .q
       (PC_delay2[31]));
  mux mux_0(.sel (Op[0]), .src0 (Zero), .src1 (invZero), .z
       (valid_zero));
  mux mux_1(.sel (Op[1]), .src0 (valid_zero), .src1 (valid_bgtz), .z
       (valid));
  mux_32 mux_2(.sel (finalsel), .src0 (PCplus4), .src1 (PCbranchfinal),
       .z (CalcuPC));
  mux_32 mux_3(.sel (initPC), .src0 (CalcuPC), .src1 ({n_95, n_96,
       n_97, n_98, n_99, n_100, n_101, n_102, n_103, n_104, n_105,
       n_106, n_107, n_108, n_109, n_110, n_111, n_112, n_113, n_114,
       n_115, n_116, n_117, n_118, n_119, n_120, n_121, n_122, n_123,
       n_124, n_125, n_126}), .z (finalPC));
  mux_32 mux_4(.sel (newlw_stall), .src0 (finalPC), .src1 (PC_delay0),
       .z (newfinalPC));
  mux_32 mux_finalbranch(.sel (initPC_delay5), .src0 (PCbranch), .src1
       (PCplus4), .z (PCbranchfinal));
  mux_32 mux_init(.sel (initPC), .src0 (immedExt_init), .src1 ({n_130,
       n_131, n_132, n_133, n_134, n_135, n_136, n_137, n_138, n_139,
       n_140, n_141, n_142, n_143, n_144, n_145, n_146, n_147, n_148,
       n_149, n_150, n_151, n_152, n_153, n_154, n_155, n_156, n_157,
       n_158, n_159, n_160, n_161}), .z (immedExt));
  mux mux_sel(.sel (initPC_delay5), .src0 (sel), .src1 (1'b0), .z
       (finalsel));
  mux_32 mux_shift(.sel (n_129), .src0 (immedExt), .src1
       ({immedExt[29:0], n_127, n_128}), .z (immedOffset));
  not_gate not_pc0(.x (Zero), .z (invZero));
  not_gate not_pc1(.x (initPC), .z (NotinitPC));
  or_gate or_init0(.x (initPC_delay1), .y (initPC_delay2), .z
       (initPC_delay3));
  or_gate or_init1(.x (initPC_delay3), .y (initPC_delay4), .z
       (initPC_delay5));
  or_gate or_init2(.x (initPC_delay7), .y (initPC_delay8), .z
       (initPC_delay9));
  Signextend se_0(.Extop (1'b1), .Din (Immed), .Dout (immedExt_init));
  xnor_gate xnor_pc0(.x (ALUOutput[31]), .y (Overflow), .z
       (valid_beyond));
endmodule

module readReg(sel, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11,
     r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24,
     r25, r26, r27, r28, r29, r30, r31, dataout);
  input [4:0] sel;
  input [31:0] r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
       r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25,
       r26, r27, r28, r29, r30, r31;
  output [31:0] dataout;
  wire [4:0] sel;
  wire [31:0] r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
       r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25,
       r26, r27, r28, r29, r30, r31;
  wire [31:0] dataout;
  wire [31:0] index;
  wire [31:0] t0;
  wire [31:0] t1;
  wire [31:0] t2;
  wire [31:0] t3;
  wire [31:0] t4;
  wire [31:0] t5;
  wire [31:0] t6;
  wire [31:0] t7;
  wire [31:0] t8;
  wire [31:0] t9;
  wire [31:0] t10;
  wire [31:0] t11;
  wire [31:0] t12;
  wire [31:0] t13;
  wire [31:0] t14;
  wire [31:0] t15;
  wire [31:0] t16;
  wire [31:0] t17;
  wire [31:0] t18;
  wire [31:0] t19;
  wire [31:0] t20;
  wire [31:0] t21;
  wire [31:0] t22;
  wire [31:0] t23;
  wire [31:0] t24;
  wire [31:0] t25;
  wire [31:0] t26;
  wire [31:0] t27;
  wire [31:0] t28;
  wire [31:0] t29;
  wire [31:0] t30;
  wire n_1029, n_1030, n_1031, n_1032, n_1033, n_1034, n_1035, n_1036;
  wire n_1037, n_1038, n_1039, n_1040, n_1041, n_1042, n_1043, n_1044;
  wire n_1045, n_1046, n_1047, n_1048, n_1049, n_1050, n_1051, n_1052;
  wire n_1053, n_1054, n_1055, n_1056, n_1057, n_1058, n_1059, n_1060;
  wire n_1061, n_1062, n_1063, n_1064, n_1065, n_1066, n_1067, n_1068;
  wire n_1069, n_1070, n_1071, n_1072, n_1073, n_1074, n_1075, n_1076;
  wire n_1077, n_1078, n_1079, n_1080, n_1081, n_1082, n_1083, n_1084;
  wire n_1085, n_1086, n_1087, n_1088, n_1089, n_1090, n_1091, n_1092;
  assign n_1060 = 1'b0;
  assign n_1059 = 1'b0;
  assign n_1058 = 1'b0;
  assign n_1057 = 1'b0;
  assign n_1056 = 1'b0;
  assign n_1055 = 1'b0;
  assign n_1054 = 1'b0;
  assign n_1053 = 1'b0;
  assign n_1052 = 1'b0;
  assign n_1051 = 1'b0;
  assign n_1050 = 1'b0;
  assign n_1049 = 1'b0;
  assign n_1048 = 1'b0;
  assign n_1047 = 1'b0;
  assign n_1046 = 1'b0;
  assign n_1045 = 1'b0;
  assign n_1044 = 1'b0;
  assign n_1043 = 1'b0;
  assign n_1042 = 1'b0;
  assign n_1041 = 1'b0;
  assign n_1040 = 1'b0;
  assign n_1039 = 1'b0;
  assign n_1038 = 1'b0;
  assign n_1037 = 1'b0;
  assign n_1036 = 1'b0;
  assign n_1035 = 1'b0;
  assign n_1034 = 1'b0;
  assign n_1033 = 1'b0;
  assign n_1032 = 1'b0;
  assign n_1031 = 1'b0;
  assign n_1030 = 1'b0;
  assign n_1029 = 1'b0;
  assign n_1092 = 1'b0;
  assign n_1091 = 1'b0;
  assign n_1090 = 1'b0;
  assign n_1089 = 1'b0;
  assign n_1088 = 1'b0;
  assign n_1087 = 1'b0;
  assign n_1086 = 1'b0;
  assign n_1085 = 1'b0;
  assign n_1084 = 1'b0;
  assign n_1083 = 1'b0;
  assign n_1082 = 1'b0;
  assign n_1081 = 1'b0;
  assign n_1080 = 1'b0;
  assign n_1079 = 1'b0;
  assign n_1078 = 1'b0;
  assign n_1077 = 1'b0;
  assign n_1076 = 1'b0;
  assign n_1075 = 1'b0;
  assign n_1074 = 1'b0;
  assign n_1073 = 1'b0;
  assign n_1072 = 1'b0;
  assign n_1071 = 1'b0;
  assign n_1070 = 1'b0;
  assign n_1069 = 1'b0;
  assign n_1068 = 1'b0;
  assign n_1067 = 1'b0;
  assign n_1066 = 1'b0;
  assign n_1065 = 1'b0;
  assign n_1064 = 1'b0;
  assign n_1063 = 1'b0;
  assign n_1062 = 1'b0;
  assign n_1061 = 1'b0;
  mux_32 r_mux0(.sel (index[0]), .src0 ({n_1061, n_1062, n_1063,
       n_1064, n_1065, n_1066, n_1067, n_1068, n_1069, n_1070, n_1071,
       n_1072, n_1073, n_1074, n_1075, n_1076, n_1077, n_1078, n_1079,
       n_1080, n_1081, n_1082, n_1083, n_1084, n_1085, n_1086, n_1087,
       n_1088, n_1089, n_1090, n_1091, n_1092}), .src1 ({n_1029,
       n_1030, n_1031, n_1032, n_1033, n_1034, n_1035, n_1036, n_1037,
       n_1038, n_1039, n_1040, n_1041, n_1042, n_1043, n_1044, n_1045,
       n_1046, n_1047, n_1048, n_1049, n_1050, n_1051, n_1052, n_1053,
       n_1054, n_1055, n_1056, n_1057, n_1058, n_1059, n_1060}), .z
       (t0));
  mux_32 r_mux1(.sel (index[1]), .src0 (t0), .src1 (r1), .z (t1));
  mux_32 r_mux2(.sel (index[2]), .src0 (t1), .src1 (r2), .z (t2));
  mux_32 r_mux3(.sel (index[3]), .src0 (t2), .src1 (r3), .z (t3));
  mux_32 r_mux4(.sel (index[4]), .src0 (t3), .src1 (r4), .z (t4));
  mux_32 r_mux5(.sel (index[5]), .src0 (t4), .src1 (r5), .z (t5));
  mux_32 r_mux6(.sel (index[6]), .src0 (t5), .src1 (r6), .z (t6));
  mux_32 r_mux7(.sel (index[7]), .src0 (t6), .src1 (r7), .z (t7));
  mux_32 r_mux8(.sel (index[8]), .src0 (t7), .src1 (r8), .z (t8));
  mux_32 r_mux9(.sel (index[9]), .src0 (t8), .src1 (r9), .z (t9));
  mux_32 r_mux10(.sel (index[10]), .src0 (t9), .src1 (r10), .z (t10));
  mux_32 r_mux11(.sel (index[11]), .src0 (t10), .src1 (r11), .z (t11));
  mux_32 r_mux12(.sel (index[12]), .src0 (t11), .src1 (r12), .z (t12));
  mux_32 r_mux13(.sel (index[13]), .src0 (t12), .src1 (r13), .z (t13));
  mux_32 r_mux14(.sel (index[14]), .src0 (t13), .src1 (r14), .z (t14));
  mux_32 r_mux15(.sel (index[15]), .src0 (t14), .src1 (r15), .z (t15));
  mux_32 r_mux16(.sel (index[16]), .src0 (t15), .src1 (r16), .z (t16));
  mux_32 r_mux17(.sel (index[17]), .src0 (t16), .src1 (r17), .z (t17));
  mux_32 r_mux18(.sel (index[18]), .src0 (t17), .src1 (r18), .z (t18));
  mux_32 r_mux19(.sel (index[19]), .src0 (t18), .src1 (r19), .z (t19));
  mux_32 r_mux20(.sel (index[20]), .src0 (t19), .src1 (r20), .z (t20));
  mux_32 r_mux21(.sel (index[21]), .src0 (t20), .src1 (r21), .z (t21));
  mux_32 r_mux22(.sel (index[22]), .src0 (t21), .src1 (r22), .z (t22));
  mux_32 r_mux23(.sel (index[23]), .src0 (t22), .src1 (r23), .z (t23));
  mux_32 r_mux24(.sel (index[24]), .src0 (t23), .src1 (r24), .z (t24));
  mux_32 r_mux25(.sel (index[25]), .src0 (t24), .src1 (r25), .z (t25));
  mux_32 r_mux26(.sel (index[26]), .src0 (t25), .src1 (r26), .z (t26));
  mux_32 r_mux27(.sel (index[27]), .src0 (t26), .src1 (r27), .z (t27));
  mux_32 r_mux28(.sel (index[28]), .src0 (t27), .src1 (r28), .z (t28));
  mux_32 r_mux29(.sel (index[29]), .src0 (t28), .src1 (r29), .z (t29));
  mux_32 r_mux30(.sel (index[30]), .src0 (t29), .src1 (r30), .z (t30));
  mux_32 r_mux31(.sel (index[31]), .src0 (t30), .src1 (r31), .z
       (dataout));
  dec_n_n5 read_dec_0(.src (sel), .z (index));
endmodule

module readReg_1(sel, r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11,
     r12, r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24,
     r25, r26, r27, r28, r29, r30, r31, dataout);
  input [4:0] sel;
  input [31:0] r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
       r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25,
       r26, r27, r28, r29, r30, r31;
  output [31:0] dataout;
  wire [4:0] sel;
  wire [31:0] r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12,
       r13, r14, r15, r16, r17, r18, r19, r20, r21, r22, r23, r24, r25,
       r26, r27, r28, r29, r30, r31;
  wire [31:0] dataout;
  wire [31:0] index;
  wire [31:0] t0;
  wire [31:0] t1;
  wire [31:0] t2;
  wire [31:0] t3;
  wire [31:0] t4;
  wire [31:0] t5;
  wire [31:0] t6;
  wire [31:0] t7;
  wire [31:0] t8;
  wire [31:0] t9;
  wire [31:0] t10;
  wire [31:0] t11;
  wire [31:0] t12;
  wire [31:0] t13;
  wire [31:0] t14;
  wire [31:0] t15;
  wire [31:0] t16;
  wire [31:0] t17;
  wire [31:0] t18;
  wire [31:0] t19;
  wire [31:0] t20;
  wire [31:0] t21;
  wire [31:0] t22;
  wire [31:0] t23;
  wire [31:0] t24;
  wire [31:0] t25;
  wire [31:0] t26;
  wire [31:0] t27;
  wire [31:0] t28;
  wire [31:0] t29;
  wire [31:0] t30;
  wire n_1029, n_1030, n_1031, n_1032, n_1033, n_1034, n_1035, n_1036;
  wire n_1037, n_1038, n_1039, n_1040, n_1041, n_1042, n_1043, n_1044;
  wire n_1045, n_1046, n_1047, n_1048, n_1049, n_1050, n_1051, n_1052;
  wire n_1053, n_1054, n_1055, n_1056, n_1057, n_1058, n_1059, n_1060;
  wire n_1061, n_1062, n_1063, n_1064, n_1065, n_1066, n_1067, n_1068;
  wire n_1069, n_1070, n_1071, n_1072, n_1073, n_1074, n_1075, n_1076;
  wire n_1077, n_1078, n_1079, n_1080, n_1081, n_1082, n_1083, n_1084;
  wire n_1085, n_1086, n_1087, n_1088, n_1089, n_1090, n_1091, n_1092;
  assign n_1060 = 1'b0;
  assign n_1059 = 1'b0;
  assign n_1058 = 1'b0;
  assign n_1057 = 1'b0;
  assign n_1056 = 1'b0;
  assign n_1055 = 1'b0;
  assign n_1054 = 1'b0;
  assign n_1053 = 1'b0;
  assign n_1052 = 1'b0;
  assign n_1051 = 1'b0;
  assign n_1050 = 1'b0;
  assign n_1049 = 1'b0;
  assign n_1048 = 1'b0;
  assign n_1047 = 1'b0;
  assign n_1046 = 1'b0;
  assign n_1045 = 1'b0;
  assign n_1044 = 1'b0;
  assign n_1043 = 1'b0;
  assign n_1042 = 1'b0;
  assign n_1041 = 1'b0;
  assign n_1040 = 1'b0;
  assign n_1039 = 1'b0;
  assign n_1038 = 1'b0;
  assign n_1037 = 1'b0;
  assign n_1036 = 1'b0;
  assign n_1035 = 1'b0;
  assign n_1034 = 1'b0;
  assign n_1033 = 1'b0;
  assign n_1032 = 1'b0;
  assign n_1031 = 1'b0;
  assign n_1030 = 1'b0;
  assign n_1029 = 1'b0;
  assign n_1092 = 1'b0;
  assign n_1091 = 1'b0;
  assign n_1090 = 1'b0;
  assign n_1089 = 1'b0;
  assign n_1088 = 1'b0;
  assign n_1087 = 1'b0;
  assign n_1086 = 1'b0;
  assign n_1085 = 1'b0;
  assign n_1084 = 1'b0;
  assign n_1083 = 1'b0;
  assign n_1082 = 1'b0;
  assign n_1081 = 1'b0;
  assign n_1080 = 1'b0;
  assign n_1079 = 1'b0;
  assign n_1078 = 1'b0;
  assign n_1077 = 1'b0;
  assign n_1076 = 1'b0;
  assign n_1075 = 1'b0;
  assign n_1074 = 1'b0;
  assign n_1073 = 1'b0;
  assign n_1072 = 1'b0;
  assign n_1071 = 1'b0;
  assign n_1070 = 1'b0;
  assign n_1069 = 1'b0;
  assign n_1068 = 1'b0;
  assign n_1067 = 1'b0;
  assign n_1066 = 1'b0;
  assign n_1065 = 1'b0;
  assign n_1064 = 1'b0;
  assign n_1063 = 1'b0;
  assign n_1062 = 1'b0;
  assign n_1061 = 1'b0;
  mux_32 r_mux0(.sel (index[0]), .src0 ({n_1061, n_1062, n_1063,
       n_1064, n_1065, n_1066, n_1067, n_1068, n_1069, n_1070, n_1071,
       n_1072, n_1073, n_1074, n_1075, n_1076, n_1077, n_1078, n_1079,
       n_1080, n_1081, n_1082, n_1083, n_1084, n_1085, n_1086, n_1087,
       n_1088, n_1089, n_1090, n_1091, n_1092}), .src1 ({n_1029,
       n_1030, n_1031, n_1032, n_1033, n_1034, n_1035, n_1036, n_1037,
       n_1038, n_1039, n_1040, n_1041, n_1042, n_1043, n_1044, n_1045,
       n_1046, n_1047, n_1048, n_1049, n_1050, n_1051, n_1052, n_1053,
       n_1054, n_1055, n_1056, n_1057, n_1058, n_1059, n_1060}), .z
       (t0));
  mux_32 r_mux1(.sel (index[1]), .src0 (t0), .src1 (r1), .z (t1));
  mux_32 r_mux2(.sel (index[2]), .src0 (t1), .src1 (r2), .z (t2));
  mux_32 r_mux3(.sel (index[3]), .src0 (t2), .src1 (r3), .z (t3));
  mux_32 r_mux4(.sel (index[4]), .src0 (t3), .src1 (r4), .z (t4));
  mux_32 r_mux5(.sel (index[5]), .src0 (t4), .src1 (r5), .z (t5));
  mux_32 r_mux6(.sel (index[6]), .src0 (t5), .src1 (r6), .z (t6));
  mux_32 r_mux7(.sel (index[7]), .src0 (t6), .src1 (r7), .z (t7));
  mux_32 r_mux8(.sel (index[8]), .src0 (t7), .src1 (r8), .z (t8));
  mux_32 r_mux9(.sel (index[9]), .src0 (t8), .src1 (r9), .z (t9));
  mux_32 r_mux10(.sel (index[10]), .src0 (t9), .src1 (r10), .z (t10));
  mux_32 r_mux11(.sel (index[11]), .src0 (t10), .src1 (r11), .z (t11));
  mux_32 r_mux12(.sel (index[12]), .src0 (t11), .src1 (r12), .z (t12));
  mux_32 r_mux13(.sel (index[13]), .src0 (t12), .src1 (r13), .z (t13));
  mux_32 r_mux14(.sel (index[14]), .src0 (t13), .src1 (r14), .z (t14));
  mux_32 r_mux15(.sel (index[15]), .src0 (t14), .src1 (r15), .z (t15));
  mux_32 r_mux16(.sel (index[16]), .src0 (t15), .src1 (r16), .z (t16));
  mux_32 r_mux17(.sel (index[17]), .src0 (t16), .src1 (r17), .z (t17));
  mux_32 r_mux18(.sel (index[18]), .src0 (t17), .src1 (r18), .z (t18));
  mux_32 r_mux19(.sel (index[19]), .src0 (t18), .src1 (r19), .z (t19));
  mux_32 r_mux20(.sel (index[20]), .src0 (t19), .src1 (r20), .z (t20));
  mux_32 r_mux21(.sel (index[21]), .src0 (t20), .src1 (r21), .z (t21));
  mux_32 r_mux22(.sel (index[22]), .src0 (t21), .src1 (r22), .z (t22));
  mux_32 r_mux23(.sel (index[23]), .src0 (t22), .src1 (r23), .z (t23));
  mux_32 r_mux24(.sel (index[24]), .src0 (t23), .src1 (r24), .z (t24));
  mux_32 r_mux25(.sel (index[25]), .src0 (t24), .src1 (r25), .z (t25));
  mux_32 r_mux26(.sel (index[26]), .src0 (t25), .src1 (r26), .z (t26));
  mux_32 r_mux27(.sel (index[27]), .src0 (t26), .src1 (r27), .z (t27));
  mux_32 r_mux28(.sel (index[28]), .src0 (t27), .src1 (r28), .z (t28));
  mux_32 r_mux29(.sel (index[29]), .src0 (t28), .src1 (r29), .z (t29));
  mux_32 r_mux30(.sel (index[30]), .src0 (t29), .src1 (r30), .z (t30));
  mux_32 r_mux31(.sel (index[31]), .src0 (t30), .src1 (r31), .z
       (dataout));
  dec_n_n5 read_dec_0(.src (sel), .z (index));
endmodule

module write32(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_1(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_2(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_3(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_4(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_5(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_6(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_7(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_8(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_9(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_10(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_11(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_12(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_13(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_14(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_15(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_16(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_17(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_18(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_19(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_20(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_21(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_22(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_23(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_24(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_25(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_26(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_27(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_28(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_29(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_30(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module write32_31(clk, din, to);
  input clk;
  input [31:0] din;
  output [31:0] to;
  wire clk;
  wire [31:0] din;
  wire [31:0] to;
  dff \genblk1[0].dff_w_32 (.clk (clk), .d (din[0]), .q (to[0]));
  dff \genblk1[1].dff_w_32 (.clk (clk), .d (din[1]), .q (to[1]));
  dff \genblk1[2].dff_w_32 (.clk (clk), .d (din[2]), .q (to[2]));
  dff \genblk1[3].dff_w_32 (.clk (clk), .d (din[3]), .q (to[3]));
  dff \genblk1[4].dff_w_32 (.clk (clk), .d (din[4]), .q (to[4]));
  dff \genblk1[5].dff_w_32 (.clk (clk), .d (din[5]), .q (to[5]));
  dff \genblk1[6].dff_w_32 (.clk (clk), .d (din[6]), .q (to[6]));
  dff \genblk1[7].dff_w_32 (.clk (clk), .d (din[7]), .q (to[7]));
  dff \genblk1[8].dff_w_32 (.clk (clk), .d (din[8]), .q (to[8]));
  dff \genblk1[9].dff_w_32 (.clk (clk), .d (din[9]), .q (to[9]));
  dff \genblk1[10].dff_w_32 (.clk (clk), .d (din[10]), .q (to[10]));
  dff \genblk1[11].dff_w_32 (.clk (clk), .d (din[11]), .q (to[11]));
  dff \genblk1[12].dff_w_32 (.clk (clk), .d (din[12]), .q (to[12]));
  dff \genblk1[13].dff_w_32 (.clk (clk), .d (din[13]), .q (to[13]));
  dff \genblk1[14].dff_w_32 (.clk (clk), .d (din[14]), .q (to[14]));
  dff \genblk1[15].dff_w_32 (.clk (clk), .d (din[15]), .q (to[15]));
  dff \genblk1[16].dff_w_32 (.clk (clk), .d (din[16]), .q (to[16]));
  dff \genblk1[17].dff_w_32 (.clk (clk), .d (din[17]), .q (to[17]));
  dff \genblk1[18].dff_w_32 (.clk (clk), .d (din[18]), .q (to[18]));
  dff \genblk1[19].dff_w_32 (.clk (clk), .d (din[19]), .q (to[19]));
  dff \genblk1[20].dff_w_32 (.clk (clk), .d (din[20]), .q (to[20]));
  dff \genblk1[21].dff_w_32 (.clk (clk), .d (din[21]), .q (to[21]));
  dff \genblk1[22].dff_w_32 (.clk (clk), .d (din[22]), .q (to[22]));
  dff \genblk1[23].dff_w_32 (.clk (clk), .d (din[23]), .q (to[23]));
  dff \genblk1[24].dff_w_32 (.clk (clk), .d (din[24]), .q (to[24]));
  dff \genblk1[25].dff_w_32 (.clk (clk), .d (din[25]), .q (to[25]));
  dff \genblk1[26].dff_w_32 (.clk (clk), .d (din[26]), .q (to[26]));
  dff \genblk1[27].dff_w_32 (.clk (clk), .d (din[27]), .q (to[27]));
  dff \genblk1[28].dff_w_32 (.clk (clk), .d (din[28]), .q (to[28]));
  dff \genblk1[29].dff_w_32 (.clk (clk), .d (din[29]), .q (to[29]));
  dff \genblk1[30].dff_w_32 (.clk (clk), .d (din[30]), .q (to[30]));
  dff \genblk1[31].dff_w_32 (.clk (clk), .d (din[31]), .q (to[31]));
endmodule

module RegisterFiles(clk, writenable, readsel1, readsel2, writesel,
     Din, Dout1, Dout2);
  input clk, writenable;
  input [4:0] readsel1, readsel2, writesel;
  input [31:0] Din;
  output [31:0] Dout1, Dout2;
  wire clk, writenable;
  wire [4:0] readsel1, readsel2, writesel;
  wire [31:0] Din;
  wire [31:0] Dout1, Dout2;
  wire [31:0] r1;
  wire [31:0] r2;
  wire [31:0] r3;
  wire [31:0] r4;
  wire [31:0] r5;
  wire [31:0] r6;
  wire [31:0] r7;
  wire [31:0] r8;
  wire [31:0] r9;
  wire [31:0] r10;
  wire [31:0] r11;
  wire [31:0] r12;
  wire [31:0] r13;
  wire [31:0] r14;
  wire [31:0] r15;
  wire [31:0] r16;
  wire [31:0] r17;
  wire [31:0] r18;
  wire [31:0] r19;
  wire [31:0] r20;
  wire [31:0] r21;
  wire [31:0] r22;
  wire [31:0] r23;
  wire [31:0] r24;
  wire [31:0] r25;
  wire [31:0] r26;
  wire [31:0] r27;
  wire [31:0] r28;
  wire [31:0] r29;
  wire [31:0] r30;
  wire [31:0] r31;
  wire [31:0] wR0_result;
  wire [31:0] r0;
  wire [31:0] wR0_t0;
  wire [31:0] wR0_t1;
  wire [31:0] wR0_t2;
  wire [31:0] wR0_t3;
  wire [31:0] wR0_t4;
  wire [31:0] wR0_t5;
  wire [31:0] wR0_t6;
  wire [31:0] wR0_t7;
  wire [31:0] wR0_t8;
  wire [31:0] wR0_t9;
  wire [31:0] wR0_t10;
  wire [31:0] wR0_t11;
  wire [31:0] wR0_t12;
  wire [31:0] wR0_t13;
  wire [31:0] wR0_t14;
  wire [31:0] wR0_t15;
  wire [31:0] wR0_t16;
  wire [31:0] wR0_t17;
  wire [31:0] wR0_t18;
  wire [31:0] wR0_t19;
  wire [31:0] wR0_t20;
  wire [31:0] wR0_t21;
  wire [31:0] wR0_t22;
  wire [31:0] wR0_t23;
  wire [31:0] wR0_t24;
  wire [31:0] wR0_t25;
  wire [31:0] wR0_t26;
  wire [31:0] wR0_t27;
  wire [31:0] wR0_t28;
  wire [31:0] wR0_t29;
  wire [31:0] wR0_t30;
  wire [31:0] wR0_t31;
  wire [31:0] wR0_index;
  wire UNCONNECTED_HIER_Z350, UNCONNECTED_HIER_Z351,
       UNCONNECTED_HIER_Z352, UNCONNECTED_HIER_Z353,
       UNCONNECTED_HIER_Z354, UNCONNECTED_HIER_Z355,
       UNCONNECTED_HIER_Z356, UNCONNECTED_HIER_Z357;
  wire UNCONNECTED_HIER_Z358, UNCONNECTED_HIER_Z359,
       UNCONNECTED_HIER_Z360, UNCONNECTED_HIER_Z361,
       UNCONNECTED_HIER_Z362, UNCONNECTED_HIER_Z363,
       UNCONNECTED_HIER_Z364, UNCONNECTED_HIER_Z365;
  wire UNCONNECTED_HIER_Z366, UNCONNECTED_HIER_Z367,
       UNCONNECTED_HIER_Z368, UNCONNECTED_HIER_Z369,
       UNCONNECTED_HIER_Z370, UNCONNECTED_HIER_Z371,
       UNCONNECTED_HIER_Z372, UNCONNECTED_HIER_Z373;
  wire UNCONNECTED_HIER_Z374, UNCONNECTED_HIER_Z375,
       UNCONNECTED_HIER_Z376, UNCONNECTED_HIER_Z377,
       UNCONNECTED_HIER_Z378, UNCONNECTED_HIER_Z379,
       UNCONNECTED_HIER_Z380, UNCONNECTED_HIER_Z381;
  wire UNCONNECTED_HIER_Z382, UNCONNECTED_HIER_Z383,
       UNCONNECTED_HIER_Z384, UNCONNECTED_HIER_Z385,
       UNCONNECTED_HIER_Z386, UNCONNECTED_HIER_Z387,
       UNCONNECTED_HIER_Z388, UNCONNECTED_HIER_Z389;
  wire UNCONNECTED_HIER_Z390, UNCONNECTED_HIER_Z391,
       UNCONNECTED_HIER_Z392, UNCONNECTED_HIER_Z393,
       UNCONNECTED_HIER_Z394, UNCONNECTED_HIER_Z395,
       UNCONNECTED_HIER_Z396, UNCONNECTED_HIER_Z397;
  wire UNCONNECTED_HIER_Z398, UNCONNECTED_HIER_Z399,
       UNCONNECTED_HIER_Z400, UNCONNECTED_HIER_Z401,
       UNCONNECTED_HIER_Z402, UNCONNECTED_HIER_Z403,
       UNCONNECTED_HIER_Z404, UNCONNECTED_HIER_Z405;
  wire UNCONNECTED_HIER_Z406, UNCONNECTED_HIER_Z407,
       UNCONNECTED_HIER_Z408, UNCONNECTED_HIER_Z409,
       UNCONNECTED_HIER_Z410, UNCONNECTED_HIER_Z411,
       UNCONNECTED_HIER_Z412, UNCONNECTED_HIER_Z413;
  assign r0[0] = 1'b0;
  assign r0[1] = 1'b0;
  assign r0[2] = 1'b0;
  assign r0[3] = 1'b0;
  assign r0[4] = 1'b0;
  assign r0[5] = 1'b0;
  assign r0[6] = 1'b0;
  assign r0[7] = 1'b0;
  assign r0[8] = 1'b0;
  assign r0[9] = 1'b0;
  assign r0[10] = 1'b0;
  assign r0[11] = 1'b0;
  assign r0[12] = 1'b0;
  assign r0[13] = 1'b0;
  assign r0[14] = 1'b0;
  assign r0[15] = 1'b0;
  assign r0[16] = 1'b0;
  assign r0[17] = 1'b0;
  assign r0[18] = 1'b0;
  assign r0[19] = 1'b0;
  assign r0[20] = 1'b0;
  assign r0[21] = 1'b0;
  assign r0[22] = 1'b0;
  assign r0[23] = 1'b0;
  assign r0[24] = 1'b0;
  assign r0[25] = 1'b0;
  assign r0[26] = 1'b0;
  assign r0[27] = 1'b0;
  assign r0[28] = 1'b0;
  assign r0[29] = 1'b0;
  assign r0[30] = 1'b0;
  assign r0[31] = 1'b0;
  assign r31[0] = 1'b0;
  assign r31[1] = 1'b0;
  assign r31[2] = 1'b0;
  assign r31[3] = 1'b0;
  assign r31[4] = 1'b0;
  assign r31[5] = 1'b0;
  assign r31[6] = 1'b0;
  assign r31[7] = 1'b0;
  assign r31[8] = 1'b0;
  assign r31[9] = 1'b0;
  assign r31[10] = 1'b0;
  assign r31[11] = 1'b0;
  assign r31[12] = 1'b0;
  assign r31[13] = 1'b0;
  assign r31[14] = 1'b0;
  assign r31[15] = 1'b0;
  assign r31[16] = 1'b0;
  assign r31[17] = 1'b0;
  assign r31[18] = 1'b0;
  assign r31[19] = 1'b0;
  assign r31[20] = 1'b0;
  assign r31[21] = 1'b0;
  assign r31[22] = 1'b0;
  assign r31[23] = 1'b0;
  assign r31[24] = 1'b0;
  assign r31[25] = 1'b0;
  assign r31[26] = 1'b0;
  assign r31[27] = 1'b0;
  assign r31[28] = 1'b0;
  assign r31[29] = 1'b0;
  assign r31[30] = 1'b0;
  assign r31[31] = 1'b0;
  assign r30[0] = 1'b0;
  assign r30[1] = 1'b0;
  assign r30[2] = 1'b0;
  assign r30[3] = 1'b0;
  assign r30[4] = 1'b0;
  assign r30[5] = 1'b0;
  assign r30[6] = 1'b0;
  assign r30[7] = 1'b0;
  assign r30[8] = 1'b0;
  assign r30[9] = 1'b0;
  assign r30[10] = 1'b0;
  assign r30[11] = 1'b0;
  assign r30[12] = 1'b0;
  assign r30[13] = 1'b0;
  assign r30[14] = 1'b0;
  assign r30[15] = 1'b0;
  assign r30[16] = 1'b0;
  assign r30[17] = 1'b0;
  assign r30[18] = 1'b0;
  assign r30[19] = 1'b0;
  assign r30[20] = 1'b0;
  assign r30[21] = 1'b0;
  assign r30[22] = 1'b0;
  assign r30[23] = 1'b0;
  assign r30[24] = 1'b0;
  assign r30[25] = 1'b0;
  assign r30[26] = 1'b0;
  assign r30[27] = 1'b0;
  assign r30[28] = 1'b0;
  assign r30[29] = 1'b0;
  assign r30[30] = 1'b0;
  assign r30[31] = 1'b0;
  assign r29[0] = 1'b0;
  assign r29[1] = 1'b0;
  assign r29[2] = 1'b0;
  assign r29[3] = 1'b0;
  assign r29[4] = 1'b0;
  assign r29[5] = 1'b0;
  assign r29[6] = 1'b0;
  assign r29[7] = 1'b0;
  assign r29[8] = 1'b0;
  assign r29[9] = 1'b0;
  assign r29[10] = 1'b0;
  assign r29[11] = 1'b0;
  assign r29[12] = 1'b0;
  assign r29[13] = 1'b0;
  assign r29[14] = 1'b0;
  assign r29[15] = 1'b0;
  assign r29[16] = 1'b0;
  assign r29[17] = 1'b0;
  assign r29[18] = 1'b0;
  assign r29[19] = 1'b0;
  assign r29[20] = 1'b0;
  assign r29[21] = 1'b0;
  assign r29[22] = 1'b0;
  assign r29[23] = 1'b0;
  assign r29[24] = 1'b0;
  assign r29[25] = 1'b0;
  assign r29[26] = 1'b0;
  assign r29[27] = 1'b0;
  assign r29[28] = 1'b0;
  assign r29[29] = 1'b0;
  assign r29[30] = 1'b0;
  assign r29[31] = 1'b0;
  assign r28[0] = 1'b0;
  assign r28[1] = 1'b0;
  assign r28[2] = 1'b0;
  assign r28[3] = 1'b0;
  assign r28[4] = 1'b0;
  assign r28[5] = 1'b0;
  assign r28[6] = 1'b0;
  assign r28[7] = 1'b0;
  assign r28[8] = 1'b0;
  assign r28[9] = 1'b0;
  assign r28[10] = 1'b0;
  assign r28[11] = 1'b0;
  assign r28[12] = 1'b0;
  assign r28[13] = 1'b0;
  assign r28[14] = 1'b0;
  assign r28[15] = 1'b0;
  assign r28[16] = 1'b0;
  assign r28[17] = 1'b0;
  assign r28[18] = 1'b0;
  assign r28[19] = 1'b0;
  assign r28[20] = 1'b0;
  assign r28[21] = 1'b0;
  assign r28[22] = 1'b0;
  assign r28[23] = 1'b0;
  assign r28[24] = 1'b0;
  assign r28[25] = 1'b0;
  assign r28[26] = 1'b0;
  assign r28[27] = 1'b0;
  assign r28[28] = 1'b0;
  assign r28[29] = 1'b0;
  assign r28[30] = 1'b0;
  assign r28[31] = 1'b0;
  assign r27[0] = 1'b0;
  assign r27[1] = 1'b0;
  assign r27[2] = 1'b0;
  assign r27[3] = 1'b0;
  assign r27[4] = 1'b0;
  assign r27[5] = 1'b0;
  assign r27[6] = 1'b0;
  assign r27[7] = 1'b0;
  assign r27[8] = 1'b0;
  assign r27[9] = 1'b0;
  assign r27[10] = 1'b0;
  assign r27[11] = 1'b0;
  assign r27[12] = 1'b0;
  assign r27[13] = 1'b0;
  assign r27[14] = 1'b0;
  assign r27[15] = 1'b0;
  assign r27[16] = 1'b0;
  assign r27[17] = 1'b0;
  assign r27[18] = 1'b0;
  assign r27[19] = 1'b0;
  assign r27[20] = 1'b0;
  assign r27[21] = 1'b0;
  assign r27[22] = 1'b0;
  assign r27[23] = 1'b0;
  assign r27[24] = 1'b0;
  assign r27[25] = 1'b0;
  assign r27[26] = 1'b0;
  assign r27[27] = 1'b0;
  assign r27[28] = 1'b0;
  assign r27[29] = 1'b0;
  assign r27[30] = 1'b0;
  assign r27[31] = 1'b0;
  assign r26[0] = 1'b0;
  assign r26[1] = 1'b0;
  assign r26[2] = 1'b0;
  assign r26[3] = 1'b0;
  assign r26[4] = 1'b0;
  assign r26[5] = 1'b0;
  assign r26[6] = 1'b0;
  assign r26[7] = 1'b0;
  assign r26[8] = 1'b0;
  assign r26[9] = 1'b0;
  assign r26[10] = 1'b0;
  assign r26[11] = 1'b0;
  assign r26[12] = 1'b0;
  assign r26[13] = 1'b0;
  assign r26[14] = 1'b0;
  assign r26[15] = 1'b0;
  assign r26[16] = 1'b0;
  assign r26[17] = 1'b0;
  assign r26[18] = 1'b0;
  assign r26[19] = 1'b0;
  assign r26[20] = 1'b0;
  assign r26[21] = 1'b0;
  assign r26[22] = 1'b0;
  assign r26[23] = 1'b0;
  assign r26[24] = 1'b0;
  assign r26[25] = 1'b0;
  assign r26[26] = 1'b0;
  assign r26[27] = 1'b0;
  assign r26[28] = 1'b0;
  assign r26[29] = 1'b0;
  assign r26[30] = 1'b0;
  assign r26[31] = 1'b0;
  assign r25[0] = 1'b0;
  assign r25[1] = 1'b0;
  assign r25[2] = 1'b0;
  assign r25[3] = 1'b0;
  assign r25[4] = 1'b0;
  assign r25[5] = 1'b0;
  assign r25[6] = 1'b0;
  assign r25[7] = 1'b0;
  assign r25[8] = 1'b0;
  assign r25[9] = 1'b0;
  assign r25[10] = 1'b0;
  assign r25[11] = 1'b0;
  assign r25[12] = 1'b0;
  assign r25[13] = 1'b0;
  assign r25[14] = 1'b0;
  assign r25[15] = 1'b0;
  assign r25[16] = 1'b0;
  assign r25[17] = 1'b0;
  assign r25[18] = 1'b0;
  assign r25[19] = 1'b0;
  assign r25[20] = 1'b0;
  assign r25[21] = 1'b0;
  assign r25[22] = 1'b0;
  assign r25[23] = 1'b0;
  assign r25[24] = 1'b0;
  assign r25[25] = 1'b0;
  assign r25[26] = 1'b0;
  assign r25[27] = 1'b0;
  assign r25[28] = 1'b0;
  assign r25[29] = 1'b0;
  assign r25[30] = 1'b0;
  assign r25[31] = 1'b0;
  assign r24[0] = 1'b0;
  assign r24[1] = 1'b0;
  assign r24[2] = 1'b0;
  assign r24[3] = 1'b0;
  assign r24[4] = 1'b0;
  assign r24[5] = 1'b0;
  assign r24[6] = 1'b0;
  assign r24[7] = 1'b0;
  assign r24[8] = 1'b0;
  assign r24[9] = 1'b0;
  assign r24[10] = 1'b0;
  assign r24[11] = 1'b0;
  assign r24[12] = 1'b0;
  assign r24[13] = 1'b0;
  assign r24[14] = 1'b0;
  assign r24[15] = 1'b0;
  assign r24[16] = 1'b0;
  assign r24[17] = 1'b0;
  assign r24[18] = 1'b0;
  assign r24[19] = 1'b0;
  assign r24[20] = 1'b0;
  assign r24[21] = 1'b0;
  assign r24[22] = 1'b0;
  assign r24[23] = 1'b0;
  assign r24[24] = 1'b0;
  assign r24[25] = 1'b0;
  assign r24[26] = 1'b0;
  assign r24[27] = 1'b0;
  assign r24[28] = 1'b0;
  assign r24[29] = 1'b0;
  assign r24[30] = 1'b0;
  assign r24[31] = 1'b0;
  assign r23[0] = 1'b0;
  assign r23[1] = 1'b0;
  assign r23[2] = 1'b0;
  assign r23[3] = 1'b0;
  assign r23[4] = 1'b0;
  assign r23[5] = 1'b0;
  assign r23[6] = 1'b0;
  assign r23[7] = 1'b0;
  assign r23[8] = 1'b0;
  assign r23[9] = 1'b0;
  assign r23[10] = 1'b0;
  assign r23[11] = 1'b0;
  assign r23[12] = 1'b0;
  assign r23[13] = 1'b0;
  assign r23[14] = 1'b0;
  assign r23[15] = 1'b0;
  assign r23[16] = 1'b0;
  assign r23[17] = 1'b0;
  assign r23[18] = 1'b0;
  assign r23[19] = 1'b0;
  assign r23[20] = 1'b0;
  assign r23[21] = 1'b0;
  assign r23[22] = 1'b0;
  assign r23[23] = 1'b0;
  assign r23[24] = 1'b0;
  assign r23[25] = 1'b0;
  assign r23[26] = 1'b0;
  assign r23[27] = 1'b0;
  assign r23[28] = 1'b0;
  assign r23[29] = 1'b0;
  assign r23[30] = 1'b0;
  assign r23[31] = 1'b0;
  assign r22[0] = 1'b0;
  assign r22[1] = 1'b0;
  assign r22[2] = 1'b0;
  assign r22[3] = 1'b0;
  assign r22[4] = 1'b0;
  assign r22[5] = 1'b0;
  assign r22[6] = 1'b0;
  assign r22[7] = 1'b0;
  assign r22[8] = 1'b0;
  assign r22[9] = 1'b0;
  assign r22[10] = 1'b0;
  assign r22[11] = 1'b0;
  assign r22[12] = 1'b0;
  assign r22[13] = 1'b0;
  assign r22[14] = 1'b0;
  assign r22[15] = 1'b0;
  assign r22[16] = 1'b0;
  assign r22[17] = 1'b0;
  assign r22[18] = 1'b0;
  assign r22[19] = 1'b0;
  assign r22[20] = 1'b0;
  assign r22[21] = 1'b0;
  assign r22[22] = 1'b0;
  assign r22[23] = 1'b0;
  assign r22[24] = 1'b0;
  assign r22[25] = 1'b0;
  assign r22[26] = 1'b0;
  assign r22[27] = 1'b0;
  assign r22[28] = 1'b0;
  assign r22[29] = 1'b0;
  assign r22[30] = 1'b0;
  assign r22[31] = 1'b0;
  assign r21[0] = 1'b0;
  assign r21[1] = 1'b0;
  assign r21[2] = 1'b0;
  assign r21[3] = 1'b0;
  assign r21[4] = 1'b0;
  assign r21[5] = 1'b0;
  assign r21[6] = 1'b0;
  assign r21[7] = 1'b0;
  assign r21[8] = 1'b0;
  assign r21[9] = 1'b0;
  assign r21[10] = 1'b0;
  assign r21[11] = 1'b0;
  assign r21[12] = 1'b0;
  assign r21[13] = 1'b0;
  assign r21[14] = 1'b0;
  assign r21[15] = 1'b0;
  assign r21[16] = 1'b0;
  assign r21[17] = 1'b0;
  assign r21[18] = 1'b0;
  assign r21[19] = 1'b0;
  assign r21[20] = 1'b0;
  assign r21[21] = 1'b0;
  assign r21[22] = 1'b0;
  assign r21[23] = 1'b0;
  assign r21[24] = 1'b0;
  assign r21[25] = 1'b0;
  assign r21[26] = 1'b0;
  assign r21[27] = 1'b0;
  assign r21[28] = 1'b0;
  assign r21[29] = 1'b0;
  assign r21[30] = 1'b0;
  assign r21[31] = 1'b0;
  assign r20[0] = 1'b0;
  assign r20[1] = 1'b0;
  assign r20[2] = 1'b0;
  assign r20[3] = 1'b0;
  assign r20[4] = 1'b0;
  assign r20[5] = 1'b0;
  assign r20[6] = 1'b0;
  assign r20[7] = 1'b0;
  assign r20[8] = 1'b0;
  assign r20[9] = 1'b0;
  assign r20[10] = 1'b0;
  assign r20[11] = 1'b0;
  assign r20[12] = 1'b0;
  assign r20[13] = 1'b0;
  assign r20[14] = 1'b0;
  assign r20[15] = 1'b0;
  assign r20[16] = 1'b0;
  assign r20[17] = 1'b0;
  assign r20[18] = 1'b0;
  assign r20[19] = 1'b0;
  assign r20[20] = 1'b0;
  assign r20[21] = 1'b0;
  assign r20[22] = 1'b0;
  assign r20[23] = 1'b0;
  assign r20[24] = 1'b0;
  assign r20[25] = 1'b0;
  assign r20[26] = 1'b0;
  assign r20[27] = 1'b0;
  assign r20[28] = 1'b0;
  assign r20[29] = 1'b0;
  assign r20[30] = 1'b0;
  assign r20[31] = 1'b0;
  assign r19[0] = 1'b0;
  assign r19[1] = 1'b0;
  assign r19[2] = 1'b0;
  assign r19[3] = 1'b0;
  assign r19[4] = 1'b0;
  assign r19[5] = 1'b0;
  assign r19[6] = 1'b0;
  assign r19[7] = 1'b0;
  assign r19[8] = 1'b0;
  assign r19[9] = 1'b0;
  assign r19[10] = 1'b0;
  assign r19[11] = 1'b0;
  assign r19[12] = 1'b0;
  assign r19[13] = 1'b0;
  assign r19[14] = 1'b0;
  assign r19[15] = 1'b0;
  assign r19[16] = 1'b0;
  assign r19[17] = 1'b0;
  assign r19[18] = 1'b0;
  assign r19[19] = 1'b0;
  assign r19[20] = 1'b0;
  assign r19[21] = 1'b0;
  assign r19[22] = 1'b0;
  assign r19[23] = 1'b0;
  assign r19[24] = 1'b0;
  assign r19[25] = 1'b0;
  assign r19[26] = 1'b0;
  assign r19[27] = 1'b0;
  assign r19[28] = 1'b0;
  assign r19[29] = 1'b0;
  assign r19[30] = 1'b0;
  assign r19[31] = 1'b0;
  assign r18[0] = 1'b0;
  assign r18[1] = 1'b0;
  assign r18[2] = 1'b0;
  assign r18[3] = 1'b0;
  assign r18[4] = 1'b0;
  assign r18[5] = 1'b0;
  assign r18[6] = 1'b0;
  assign r18[7] = 1'b0;
  assign r18[8] = 1'b0;
  assign r18[9] = 1'b0;
  assign r18[10] = 1'b0;
  assign r18[11] = 1'b0;
  assign r18[12] = 1'b0;
  assign r18[13] = 1'b0;
  assign r18[14] = 1'b0;
  assign r18[15] = 1'b0;
  assign r18[16] = 1'b0;
  assign r18[17] = 1'b0;
  assign r18[18] = 1'b0;
  assign r18[19] = 1'b0;
  assign r18[20] = 1'b0;
  assign r18[21] = 1'b0;
  assign r18[22] = 1'b0;
  assign r18[23] = 1'b0;
  assign r18[24] = 1'b0;
  assign r18[25] = 1'b0;
  assign r18[26] = 1'b0;
  assign r18[27] = 1'b0;
  assign r18[28] = 1'b0;
  assign r18[29] = 1'b0;
  assign r18[30] = 1'b0;
  assign r18[31] = 1'b0;
  assign r17[0] = 1'b0;
  assign r17[1] = 1'b0;
  assign r17[2] = 1'b0;
  assign r17[3] = 1'b0;
  assign r17[4] = 1'b0;
  assign r17[5] = 1'b0;
  assign r17[6] = 1'b0;
  assign r17[7] = 1'b0;
  assign r17[8] = 1'b0;
  assign r17[9] = 1'b0;
  assign r17[10] = 1'b0;
  assign r17[11] = 1'b0;
  assign r17[12] = 1'b0;
  assign r17[13] = 1'b0;
  assign r17[14] = 1'b0;
  assign r17[15] = 1'b0;
  assign r17[16] = 1'b0;
  assign r17[17] = 1'b0;
  assign r17[18] = 1'b0;
  assign r17[19] = 1'b0;
  assign r17[20] = 1'b0;
  assign r17[21] = 1'b0;
  assign r17[22] = 1'b0;
  assign r17[23] = 1'b0;
  assign r17[24] = 1'b0;
  assign r17[25] = 1'b0;
  assign r17[26] = 1'b0;
  assign r17[27] = 1'b0;
  assign r17[28] = 1'b0;
  assign r17[29] = 1'b0;
  assign r17[30] = 1'b0;
  assign r17[31] = 1'b0;
  assign r16[0] = 1'b0;
  assign r16[1] = 1'b0;
  assign r16[2] = 1'b0;
  assign r16[3] = 1'b0;
  assign r16[4] = 1'b0;
  assign r16[5] = 1'b0;
  assign r16[6] = 1'b0;
  assign r16[7] = 1'b0;
  assign r16[8] = 1'b0;
  assign r16[9] = 1'b0;
  assign r16[10] = 1'b0;
  assign r16[11] = 1'b0;
  assign r16[12] = 1'b0;
  assign r16[13] = 1'b0;
  assign r16[14] = 1'b0;
  assign r16[15] = 1'b0;
  assign r16[16] = 1'b0;
  assign r16[17] = 1'b0;
  assign r16[18] = 1'b0;
  assign r16[19] = 1'b0;
  assign r16[20] = 1'b0;
  assign r16[21] = 1'b0;
  assign r16[22] = 1'b0;
  assign r16[23] = 1'b0;
  assign r16[24] = 1'b0;
  assign r16[25] = 1'b0;
  assign r16[26] = 1'b0;
  assign r16[27] = 1'b0;
  assign r16[28] = 1'b0;
  assign r16[29] = 1'b0;
  assign r16[30] = 1'b0;
  assign r16[31] = 1'b0;
  assign r15[0] = 1'b0;
  assign r15[1] = 1'b0;
  assign r15[2] = 1'b0;
  assign r15[3] = 1'b0;
  assign r15[4] = 1'b0;
  assign r15[5] = 1'b0;
  assign r15[6] = 1'b0;
  assign r15[7] = 1'b0;
  assign r15[8] = 1'b0;
  assign r15[9] = 1'b0;
  assign r15[10] = 1'b0;
  assign r15[11] = 1'b0;
  assign r15[12] = 1'b0;
  assign r15[13] = 1'b0;
  assign r15[14] = 1'b0;
  assign r15[15] = 1'b0;
  assign r15[16] = 1'b0;
  assign r15[17] = 1'b0;
  assign r15[18] = 1'b0;
  assign r15[19] = 1'b0;
  assign r15[20] = 1'b0;
  assign r15[21] = 1'b0;
  assign r15[22] = 1'b0;
  assign r15[23] = 1'b0;
  assign r15[24] = 1'b0;
  assign r15[25] = 1'b0;
  assign r15[26] = 1'b0;
  assign r15[27] = 1'b0;
  assign r15[28] = 1'b0;
  assign r15[29] = 1'b0;
  assign r15[30] = 1'b0;
  assign r15[31] = 1'b0;
  assign r14[0] = 1'b0;
  assign r14[1] = 1'b0;
  assign r14[2] = 1'b0;
  assign r14[3] = 1'b0;
  assign r14[4] = 1'b0;
  assign r14[5] = 1'b0;
  assign r14[6] = 1'b0;
  assign r14[7] = 1'b0;
  assign r14[8] = 1'b0;
  assign r14[9] = 1'b0;
  assign r14[10] = 1'b0;
  assign r14[11] = 1'b0;
  assign r14[12] = 1'b0;
  assign r14[13] = 1'b0;
  assign r14[14] = 1'b0;
  assign r14[15] = 1'b0;
  assign r14[16] = 1'b0;
  assign r14[17] = 1'b0;
  assign r14[18] = 1'b0;
  assign r14[19] = 1'b0;
  assign r14[20] = 1'b0;
  assign r14[21] = 1'b0;
  assign r14[22] = 1'b0;
  assign r14[23] = 1'b0;
  assign r14[24] = 1'b0;
  assign r14[25] = 1'b0;
  assign r14[26] = 1'b0;
  assign r14[27] = 1'b0;
  assign r14[28] = 1'b0;
  assign r14[29] = 1'b0;
  assign r14[30] = 1'b0;
  assign r14[31] = 1'b0;
  assign r13[0] = 1'b0;
  assign r13[1] = 1'b0;
  assign r13[2] = 1'b0;
  assign r13[3] = 1'b0;
  assign r13[4] = 1'b0;
  assign r13[5] = 1'b0;
  assign r13[6] = 1'b0;
  assign r13[7] = 1'b0;
  assign r13[8] = 1'b0;
  assign r13[9] = 1'b0;
  assign r13[10] = 1'b0;
  assign r13[11] = 1'b0;
  assign r13[12] = 1'b0;
  assign r13[13] = 1'b0;
  assign r13[14] = 1'b0;
  assign r13[15] = 1'b0;
  assign r13[16] = 1'b0;
  assign r13[17] = 1'b0;
  assign r13[18] = 1'b0;
  assign r13[19] = 1'b0;
  assign r13[20] = 1'b0;
  assign r13[21] = 1'b0;
  assign r13[22] = 1'b0;
  assign r13[23] = 1'b0;
  assign r13[24] = 1'b0;
  assign r13[25] = 1'b0;
  assign r13[26] = 1'b0;
  assign r13[27] = 1'b0;
  assign r13[28] = 1'b0;
  assign r13[29] = 1'b0;
  assign r13[30] = 1'b0;
  assign r13[31] = 1'b0;
  assign r12[0] = 1'b0;
  assign r12[1] = 1'b0;
  assign r12[2] = 1'b0;
  assign r12[3] = 1'b0;
  assign r12[4] = 1'b0;
  assign r12[5] = 1'b0;
  assign r12[6] = 1'b0;
  assign r12[7] = 1'b0;
  assign r12[8] = 1'b0;
  assign r12[9] = 1'b0;
  assign r12[10] = 1'b0;
  assign r12[11] = 1'b0;
  assign r12[12] = 1'b0;
  assign r12[13] = 1'b0;
  assign r12[14] = 1'b0;
  assign r12[15] = 1'b0;
  assign r12[16] = 1'b0;
  assign r12[17] = 1'b0;
  assign r12[18] = 1'b0;
  assign r12[19] = 1'b0;
  assign r12[20] = 1'b0;
  assign r12[21] = 1'b0;
  assign r12[22] = 1'b0;
  assign r12[23] = 1'b0;
  assign r12[24] = 1'b0;
  assign r12[25] = 1'b0;
  assign r12[26] = 1'b0;
  assign r12[27] = 1'b0;
  assign r12[28] = 1'b0;
  assign r12[29] = 1'b0;
  assign r12[30] = 1'b0;
  assign r12[31] = 1'b0;
  assign r11[0] = 1'b0;
  assign r11[1] = 1'b0;
  assign r11[2] = 1'b0;
  assign r11[3] = 1'b0;
  assign r11[4] = 1'b0;
  assign r11[5] = 1'b0;
  assign r11[6] = 1'b0;
  assign r11[7] = 1'b0;
  assign r11[8] = 1'b0;
  assign r11[9] = 1'b0;
  assign r11[10] = 1'b0;
  assign r11[11] = 1'b0;
  assign r11[12] = 1'b0;
  assign r11[13] = 1'b0;
  assign r11[14] = 1'b0;
  assign r11[15] = 1'b0;
  assign r11[16] = 1'b0;
  assign r11[17] = 1'b0;
  assign r11[18] = 1'b0;
  assign r11[19] = 1'b0;
  assign r11[20] = 1'b0;
  assign r11[21] = 1'b0;
  assign r11[22] = 1'b0;
  assign r11[23] = 1'b0;
  assign r11[24] = 1'b0;
  assign r11[25] = 1'b0;
  assign r11[26] = 1'b0;
  assign r11[27] = 1'b0;
  assign r11[28] = 1'b0;
  assign r11[29] = 1'b0;
  assign r11[30] = 1'b0;
  assign r11[31] = 1'b0;
  assign r10[0] = 1'b0;
  assign r10[1] = 1'b0;
  assign r10[2] = 1'b0;
  assign r10[3] = 1'b0;
  assign r10[4] = 1'b0;
  assign r10[5] = 1'b0;
  assign r10[6] = 1'b0;
  assign r10[7] = 1'b0;
  assign r10[8] = 1'b0;
  assign r10[9] = 1'b0;
  assign r10[10] = 1'b0;
  assign r10[11] = 1'b0;
  assign r10[12] = 1'b0;
  assign r10[13] = 1'b0;
  assign r10[14] = 1'b0;
  assign r10[15] = 1'b0;
  assign r10[16] = 1'b0;
  assign r10[17] = 1'b0;
  assign r10[18] = 1'b0;
  assign r10[19] = 1'b0;
  assign r10[20] = 1'b0;
  assign r10[21] = 1'b0;
  assign r10[22] = 1'b0;
  assign r10[23] = 1'b0;
  assign r10[24] = 1'b0;
  assign r10[25] = 1'b0;
  assign r10[26] = 1'b0;
  assign r10[27] = 1'b0;
  assign r10[28] = 1'b0;
  assign r10[29] = 1'b0;
  assign r10[30] = 1'b0;
  assign r10[31] = 1'b0;
  assign r9[0] = 1'b0;
  assign r9[1] = 1'b0;
  assign r9[2] = 1'b0;
  assign r9[3] = 1'b0;
  assign r9[4] = 1'b0;
  assign r9[5] = 1'b0;
  assign r9[6] = 1'b0;
  assign r9[7] = 1'b0;
  assign r9[8] = 1'b0;
  assign r9[9] = 1'b0;
  assign r9[10] = 1'b0;
  assign r9[11] = 1'b0;
  assign r9[12] = 1'b0;
  assign r9[13] = 1'b0;
  assign r9[14] = 1'b0;
  assign r9[15] = 1'b0;
  assign r9[16] = 1'b0;
  assign r9[17] = 1'b0;
  assign r9[18] = 1'b0;
  assign r9[19] = 1'b0;
  assign r9[20] = 1'b0;
  assign r9[21] = 1'b0;
  assign r9[22] = 1'b0;
  assign r9[23] = 1'b0;
  assign r9[24] = 1'b0;
  assign r9[25] = 1'b0;
  assign r9[26] = 1'b0;
  assign r9[27] = 1'b0;
  assign r9[28] = 1'b0;
  assign r9[29] = 1'b0;
  assign r9[30] = 1'b0;
  assign r9[31] = 1'b0;
  assign r8[0] = 1'b0;
  assign r8[1] = 1'b0;
  assign r8[2] = 1'b0;
  assign r8[3] = 1'b0;
  assign r8[4] = 1'b0;
  assign r8[5] = 1'b0;
  assign r8[6] = 1'b0;
  assign r8[7] = 1'b0;
  assign r8[8] = 1'b0;
  assign r8[9] = 1'b0;
  assign r8[10] = 1'b0;
  assign r8[11] = 1'b0;
  assign r8[12] = 1'b0;
  assign r8[13] = 1'b0;
  assign r8[14] = 1'b0;
  assign r8[15] = 1'b0;
  assign r8[16] = 1'b0;
  assign r8[17] = 1'b0;
  assign r8[18] = 1'b0;
  assign r8[19] = 1'b0;
  assign r8[20] = 1'b0;
  assign r8[21] = 1'b0;
  assign r8[22] = 1'b0;
  assign r8[23] = 1'b0;
  assign r8[24] = 1'b0;
  assign r8[25] = 1'b0;
  assign r8[26] = 1'b0;
  assign r8[27] = 1'b0;
  assign r8[28] = 1'b0;
  assign r8[29] = 1'b0;
  assign r8[30] = 1'b0;
  assign r8[31] = 1'b0;
  assign r7[0] = 1'b0;
  assign r7[1] = 1'b0;
  assign r7[2] = 1'b0;
  assign r7[3] = 1'b0;
  assign r7[4] = 1'b0;
  assign r7[5] = 1'b0;
  assign r7[6] = 1'b0;
  assign r7[7] = 1'b0;
  assign r7[8] = 1'b0;
  assign r7[9] = 1'b0;
  assign r7[10] = 1'b0;
  assign r7[11] = 1'b0;
  assign r7[12] = 1'b0;
  assign r7[13] = 1'b0;
  assign r7[14] = 1'b0;
  assign r7[15] = 1'b0;
  assign r7[16] = 1'b0;
  assign r7[17] = 1'b0;
  assign r7[18] = 1'b0;
  assign r7[19] = 1'b0;
  assign r7[20] = 1'b0;
  assign r7[21] = 1'b0;
  assign r7[22] = 1'b0;
  assign r7[23] = 1'b0;
  assign r7[24] = 1'b0;
  assign r7[25] = 1'b0;
  assign r7[26] = 1'b0;
  assign r7[27] = 1'b0;
  assign r7[28] = 1'b0;
  assign r7[29] = 1'b0;
  assign r7[30] = 1'b0;
  assign r7[31] = 1'b0;
  assign r6[0] = 1'b0;
  assign r6[1] = 1'b0;
  assign r6[2] = 1'b0;
  assign r6[3] = 1'b0;
  assign r6[4] = 1'b0;
  assign r6[5] = 1'b0;
  assign r6[6] = 1'b0;
  assign r6[7] = 1'b0;
  assign r6[8] = 1'b0;
  assign r6[9] = 1'b0;
  assign r6[10] = 1'b0;
  assign r6[11] = 1'b0;
  assign r6[12] = 1'b0;
  assign r6[13] = 1'b0;
  assign r6[14] = 1'b0;
  assign r6[15] = 1'b0;
  assign r6[16] = 1'b0;
  assign r6[17] = 1'b0;
  assign r6[18] = 1'b0;
  assign r6[19] = 1'b0;
  assign r6[20] = 1'b0;
  assign r6[21] = 1'b0;
  assign r6[22] = 1'b0;
  assign r6[23] = 1'b0;
  assign r6[24] = 1'b0;
  assign r6[25] = 1'b0;
  assign r6[26] = 1'b0;
  assign r6[27] = 1'b0;
  assign r6[28] = 1'b0;
  assign r6[29] = 1'b0;
  assign r6[30] = 1'b0;
  assign r6[31] = 1'b0;
  assign r5[0] = 1'b0;
  assign r5[1] = 1'b0;
  assign r5[2] = 1'b0;
  assign r5[3] = 1'b0;
  assign r5[4] = 1'b0;
  assign r5[5] = 1'b0;
  assign r5[6] = 1'b0;
  assign r5[7] = 1'b0;
  assign r5[8] = 1'b0;
  assign r5[9] = 1'b0;
  assign r5[10] = 1'b0;
  assign r5[11] = 1'b0;
  assign r5[12] = 1'b0;
  assign r5[13] = 1'b0;
  assign r5[14] = 1'b0;
  assign r5[15] = 1'b0;
  assign r5[16] = 1'b0;
  assign r5[17] = 1'b0;
  assign r5[18] = 1'b0;
  assign r5[19] = 1'b0;
  assign r5[20] = 1'b0;
  assign r5[21] = 1'b0;
  assign r5[22] = 1'b0;
  assign r5[23] = 1'b0;
  assign r5[24] = 1'b0;
  assign r5[25] = 1'b0;
  assign r5[26] = 1'b0;
  assign r5[27] = 1'b0;
  assign r5[28] = 1'b0;
  assign r5[29] = 1'b0;
  assign r5[30] = 1'b0;
  assign r5[31] = 1'b0;
  assign r4[0] = 1'b0;
  assign r4[1] = 1'b0;
  assign r4[2] = 1'b0;
  assign r4[3] = 1'b0;
  assign r4[4] = 1'b0;
  assign r4[5] = 1'b0;
  assign r4[6] = 1'b0;
  assign r4[7] = 1'b0;
  assign r4[8] = 1'b0;
  assign r4[9] = 1'b0;
  assign r4[10] = 1'b0;
  assign r4[11] = 1'b0;
  assign r4[12] = 1'b0;
  assign r4[13] = 1'b0;
  assign r4[14] = 1'b0;
  assign r4[15] = 1'b0;
  assign r4[16] = 1'b0;
  assign r4[17] = 1'b0;
  assign r4[18] = 1'b0;
  assign r4[19] = 1'b0;
  assign r4[20] = 1'b0;
  assign r4[21] = 1'b0;
  assign r4[22] = 1'b0;
  assign r4[23] = 1'b0;
  assign r4[24] = 1'b0;
  assign r4[25] = 1'b0;
  assign r4[26] = 1'b0;
  assign r4[27] = 1'b0;
  assign r4[28] = 1'b0;
  assign r4[29] = 1'b0;
  assign r4[30] = 1'b0;
  assign r4[31] = 1'b0;
  assign r3[0] = 1'b0;
  assign r3[1] = 1'b0;
  assign r3[2] = 1'b0;
  assign r3[3] = 1'b0;
  assign r3[4] = 1'b0;
  assign r3[5] = 1'b0;
  assign r3[6] = 1'b0;
  assign r3[7] = 1'b0;
  assign r3[8] = 1'b0;
  assign r3[9] = 1'b0;
  assign r3[10] = 1'b0;
  assign r3[11] = 1'b0;
  assign r3[12] = 1'b0;
  assign r3[13] = 1'b0;
  assign r3[14] = 1'b0;
  assign r3[15] = 1'b0;
  assign r3[16] = 1'b0;
  assign r3[17] = 1'b0;
  assign r3[18] = 1'b0;
  assign r3[19] = 1'b0;
  assign r3[20] = 1'b0;
  assign r3[21] = 1'b0;
  assign r3[22] = 1'b0;
  assign r3[23] = 1'b0;
  assign r3[24] = 1'b0;
  assign r3[25] = 1'b0;
  assign r3[26] = 1'b0;
  assign r3[27] = 1'b0;
  assign r3[28] = 1'b0;
  assign r3[29] = 1'b0;
  assign r3[30] = 1'b0;
  assign r3[31] = 1'b0;
  assign r2[0] = 1'b0;
  assign r2[1] = 1'b0;
  assign r2[2] = 1'b0;
  assign r2[3] = 1'b0;
  assign r2[4] = 1'b0;
  assign r2[5] = 1'b0;
  assign r2[6] = 1'b0;
  assign r2[7] = 1'b0;
  assign r2[8] = 1'b0;
  assign r2[9] = 1'b0;
  assign r2[10] = 1'b0;
  assign r2[11] = 1'b0;
  assign r2[12] = 1'b0;
  assign r2[13] = 1'b0;
  assign r2[14] = 1'b0;
  assign r2[15] = 1'b0;
  assign r2[16] = 1'b0;
  assign r2[17] = 1'b0;
  assign r2[18] = 1'b0;
  assign r2[19] = 1'b0;
  assign r2[20] = 1'b0;
  assign r2[21] = 1'b0;
  assign r2[22] = 1'b0;
  assign r2[23] = 1'b0;
  assign r2[24] = 1'b0;
  assign r2[25] = 1'b0;
  assign r2[26] = 1'b0;
  assign r2[27] = 1'b0;
  assign r2[28] = 1'b0;
  assign r2[29] = 1'b0;
  assign r2[30] = 1'b0;
  assign r2[31] = 1'b0;
  assign r1[0] = 1'b0;
  assign r1[1] = 1'b0;
  assign r1[2] = 1'b0;
  assign r1[3] = 1'b0;
  assign r1[4] = 1'b0;
  assign r1[5] = 1'b0;
  assign r1[6] = 1'b0;
  assign r1[7] = 1'b0;
  assign r1[8] = 1'b0;
  assign r1[9] = 1'b0;
  assign r1[10] = 1'b0;
  assign r1[11] = 1'b0;
  assign r1[12] = 1'b0;
  assign r1[13] = 1'b0;
  assign r1[14] = 1'b0;
  assign r1[15] = 1'b0;
  assign r1[16] = 1'b0;
  assign r1[17] = 1'b0;
  assign r1[18] = 1'b0;
  assign r1[19] = 1'b0;
  assign r1[20] = 1'b0;
  assign r1[21] = 1'b0;
  assign r1[22] = 1'b0;
  assign r1[23] = 1'b0;
  assign r1[24] = 1'b0;
  assign r1[25] = 1'b0;
  assign r1[26] = 1'b0;
  assign r1[27] = 1'b0;
  assign r1[28] = 1'b0;
  assign r1[29] = 1'b0;
  assign r1[30] = 1'b0;
  assign r1[31] = 1'b0;
  readReg rR0(.sel (readsel1), .r0 ({UNCONNECTED_HIER_Z381,
       UNCONNECTED_HIER_Z380, UNCONNECTED_HIER_Z379,
       UNCONNECTED_HIER_Z378, UNCONNECTED_HIER_Z377,
       UNCONNECTED_HIER_Z376, UNCONNECTED_HIER_Z375,
       UNCONNECTED_HIER_Z374, UNCONNECTED_HIER_Z373,
       UNCONNECTED_HIER_Z372, UNCONNECTED_HIER_Z371,
       UNCONNECTED_HIER_Z370, UNCONNECTED_HIER_Z369,
       UNCONNECTED_HIER_Z368, UNCONNECTED_HIER_Z367,
       UNCONNECTED_HIER_Z366, UNCONNECTED_HIER_Z365,
       UNCONNECTED_HIER_Z364, UNCONNECTED_HIER_Z363,
       UNCONNECTED_HIER_Z362, UNCONNECTED_HIER_Z361,
       UNCONNECTED_HIER_Z360, UNCONNECTED_HIER_Z359,
       UNCONNECTED_HIER_Z358, UNCONNECTED_HIER_Z357,
       UNCONNECTED_HIER_Z356, UNCONNECTED_HIER_Z355,
       UNCONNECTED_HIER_Z354, UNCONNECTED_HIER_Z353,
       UNCONNECTED_HIER_Z352, UNCONNECTED_HIER_Z351,
       UNCONNECTED_HIER_Z350}), .r1 (r1), .r2 (r2), .r3 (r3), .r4 (r4),
       .r5 (r5), .r6 (r6), .r7 (r7), .r8 (r8), .r9 (r9), .r10 (r10),
       .r11 (r11), .r12 (r12), .r13 (r13), .r14 (r14), .r15 (r15), .r16
       (r16), .r17 (r17), .r18 (r18), .r19 (r19), .r20 (r20), .r21
       (r21), .r22 (r22), .r23 (r23), .r24 (r24), .r25 (r25), .r26
       (r26), .r27 (r27), .r28 (r28), .r29 (r29), .r30 (r30), .r31
       (r31), .dataout (Dout1));
  readReg_1 rR1(.sel (readsel2), .r0 ({UNCONNECTED_HIER_Z413,
       UNCONNECTED_HIER_Z412, UNCONNECTED_HIER_Z411,
       UNCONNECTED_HIER_Z410, UNCONNECTED_HIER_Z409,
       UNCONNECTED_HIER_Z408, UNCONNECTED_HIER_Z407,
       UNCONNECTED_HIER_Z406, UNCONNECTED_HIER_Z405,
       UNCONNECTED_HIER_Z404, UNCONNECTED_HIER_Z403,
       UNCONNECTED_HIER_Z402, UNCONNECTED_HIER_Z401,
       UNCONNECTED_HIER_Z400, UNCONNECTED_HIER_Z399,
       UNCONNECTED_HIER_Z398, UNCONNECTED_HIER_Z397,
       UNCONNECTED_HIER_Z396, UNCONNECTED_HIER_Z395,
       UNCONNECTED_HIER_Z394, UNCONNECTED_HIER_Z393,
       UNCONNECTED_HIER_Z392, UNCONNECTED_HIER_Z391,
       UNCONNECTED_HIER_Z390, UNCONNECTED_HIER_Z389,
       UNCONNECTED_HIER_Z388, UNCONNECTED_HIER_Z387,
       UNCONNECTED_HIER_Z386, UNCONNECTED_HIER_Z385,
       UNCONNECTED_HIER_Z384, UNCONNECTED_HIER_Z383,
       UNCONNECTED_HIER_Z382}), .r1 (r1), .r2 (r2), .r3 (r3), .r4 (r4),
       .r5 (r5), .r6 (r6), .r7 (r7), .r8 (r8), .r9 (r9), .r10 (r10),
       .r11 (r11), .r12 (r12), .r13 (r13), .r14 (r14), .r15 (r15), .r16
       (r16), .r17 (r17), .r18 (r18), .r19 (r19), .r20 (r20), .r21
       (r21), .r22 (r22), .r23 (r23), .r24 (r24), .r25 (r25), .r26
       (r26), .r27 (r27), .r28 (r28), .r29 (r29), .r30 (r30), .r31
       (r31), .dataout (Dout2));
  mux_32 wR0_w_mux0(.sel (wR0_result[0]), .src0 (r0), .src1 (Din), .z
       (wR0_t0));
  mux_32 wR0_w_mux1(.sel (wR0_result[1]), .src0 (r1), .src1 (Din), .z
       (wR0_t1));
  mux_32 wR0_w_mux2(.sel (wR0_result[2]), .src0 (r2), .src1 (Din), .z
       (wR0_t2));
  mux_32 wR0_w_mux3(.sel (wR0_result[3]), .src0 (r3), .src1 (Din), .z
       (wR0_t3));
  mux_32 wR0_w_mux4(.sel (wR0_result[4]), .src0 (r4), .src1 (Din), .z
       (wR0_t4));
  mux_32 wR0_w_mux5(.sel (wR0_result[5]), .src0 (r5), .src1 (Din), .z
       (wR0_t5));
  mux_32 wR0_w_mux6(.sel (wR0_result[6]), .src0 (r6), .src1 (Din), .z
       (wR0_t6));
  mux_32 wR0_w_mux7(.sel (wR0_result[7]), .src0 (r7), .src1 (Din), .z
       (wR0_t7));
  mux_32 wR0_w_mux8(.sel (wR0_result[8]), .src0 (r8), .src1 (Din), .z
       (wR0_t8));
  mux_32 wR0_w_mux9(.sel (wR0_result[9]), .src0 (r9), .src1 (Din), .z
       (wR0_t9));
  mux_32 wR0_w_mux10(.sel (wR0_result[10]), .src0 (r10), .src1 (Din),
       .z (wR0_t10));
  mux_32 wR0_w_mux11(.sel (wR0_result[11]), .src0 (r11), .src1 (Din),
       .z (wR0_t11));
  mux_32 wR0_w_mux12(.sel (wR0_result[12]), .src0 (r12), .src1 (Din),
       .z (wR0_t12));
  mux_32 wR0_w_mux13(.sel (wR0_result[13]), .src0 (r13), .src1 (Din),
       .z (wR0_t13));
  mux_32 wR0_w_mux14(.sel (wR0_result[14]), .src0 (r14), .src1 (Din),
       .z (wR0_t14));
  mux_32 wR0_w_mux15(.sel (wR0_result[15]), .src0 (r15), .src1 (Din),
       .z (wR0_t15));
  mux_32 wR0_w_mux16(.sel (wR0_result[16]), .src0 (r16), .src1 (Din),
       .z (wR0_t16));
  mux_32 wR0_w_mux17(.sel (wR0_result[17]), .src0 (r17), .src1 (Din),
       .z (wR0_t17));
  mux_32 wR0_w_mux18(.sel (wR0_result[18]), .src0 (r18), .src1 (Din),
       .z (wR0_t18));
  mux_32 wR0_w_mux19(.sel (wR0_result[19]), .src0 (r19), .src1 (Din),
       .z (wR0_t19));
  mux_32 wR0_w_mux20(.sel (wR0_result[20]), .src0 (r20), .src1 (Din),
       .z (wR0_t20));
  mux_32 wR0_w_mux21(.sel (wR0_result[21]), .src0 (r21), .src1 (Din),
       .z (wR0_t21));
  mux_32 wR0_w_mux22(.sel (wR0_result[22]), .src0 (r22), .src1 (Din),
       .z (wR0_t22));
  mux_32 wR0_w_mux23(.sel (wR0_result[23]), .src0 (r23), .src1 (Din),
       .z (wR0_t23));
  mux_32 wR0_w_mux24(.sel (wR0_result[24]), .src0 (r24), .src1 (Din),
       .z (wR0_t24));
  mux_32 wR0_w_mux25(.sel (wR0_result[25]), .src0 (r25), .src1 (Din),
       .z (wR0_t25));
  mux_32 wR0_w_mux26(.sel (wR0_result[26]), .src0 (r26), .src1 (Din),
       .z (wR0_t26));
  mux_32 wR0_w_mux27(.sel (wR0_result[27]), .src0 (r27), .src1 (Din),
       .z (wR0_t27));
  mux_32 wR0_w_mux28(.sel (wR0_result[28]), .src0 (r28), .src1 (Din),
       .z (wR0_t28));
  mux_32 wR0_w_mux29(.sel (wR0_result[29]), .src0 (r29), .src1 (Din),
       .z (wR0_t29));
  mux_32 wR0_w_mux30(.sel (wR0_result[30]), .src0 (r30), .src1 (Din),
       .z (wR0_t30));
  mux_32 wR0_w_mux31(.sel (wR0_result[31]), .src0 (r31), .src1 (Din),
       .z (wR0_t31));
  and_gate wR0_wag0(.x (wR0_index[0]), .y (writenable), .z
       (wR0_result[0]));
  and_gate wR0_wag1(.x (wR0_index[1]), .y (writenable), .z
       (wR0_result[1]));
  and_gate wR0_wag2(.x (wR0_index[2]), .y (writenable), .z
       (wR0_result[2]));
  and_gate wR0_wag3(.x (wR0_index[3]), .y (writenable), .z
       (wR0_result[3]));
  and_gate wR0_wag4(.x (wR0_index[4]), .y (writenable), .z
       (wR0_result[4]));
  and_gate wR0_wag5(.x (wR0_index[5]), .y (writenable), .z
       (wR0_result[5]));
  and_gate wR0_wag6(.x (wR0_index[6]), .y (writenable), .z
       (wR0_result[6]));
  and_gate wR0_wag7(.x (wR0_index[7]), .y (writenable), .z
       (wR0_result[7]));
  and_gate wR0_wag8(.x (wR0_index[8]), .y (writenable), .z
       (wR0_result[8]));
  and_gate wR0_wag9(.x (wR0_index[9]), .y (writenable), .z
       (wR0_result[9]));
  and_gate wR0_wag10(.x (wR0_index[10]), .y (writenable), .z
       (wR0_result[10]));
  and_gate wR0_wag11(.x (wR0_index[11]), .y (writenable), .z
       (wR0_result[11]));
  and_gate wR0_wag12(.x (wR0_index[12]), .y (writenable), .z
       (wR0_result[12]));
  and_gate wR0_wag13(.x (wR0_index[13]), .y (writenable), .z
       (wR0_result[13]));
  and_gate wR0_wag14(.x (wR0_index[14]), .y (writenable), .z
       (wR0_result[14]));
  and_gate wR0_wag15(.x (wR0_index[15]), .y (writenable), .z
       (wR0_result[15]));
  and_gate wR0_wag16(.x (wR0_index[16]), .y (writenable), .z
       (wR0_result[16]));
  and_gate wR0_wag17(.x (wR0_index[17]), .y (writenable), .z
       (wR0_result[17]));
  and_gate wR0_wag18(.x (wR0_index[18]), .y (writenable), .z
       (wR0_result[18]));
  and_gate wR0_wag19(.x (wR0_index[19]), .y (writenable), .z
       (wR0_result[19]));
  and_gate wR0_wag20(.x (wR0_index[20]), .y (writenable), .z
       (wR0_result[20]));
  and_gate wR0_wag21(.x (wR0_index[21]), .y (writenable), .z
       (wR0_result[21]));
  and_gate wR0_wag22(.x (wR0_index[22]), .y (writenable), .z
       (wR0_result[22]));
  and_gate wR0_wag23(.x (wR0_index[23]), .y (writenable), .z
       (wR0_result[23]));
  and_gate wR0_wag24(.x (wR0_index[24]), .y (writenable), .z
       (wR0_result[24]));
  and_gate wR0_wag25(.x (wR0_index[25]), .y (writenable), .z
       (wR0_result[25]));
  and_gate wR0_wag26(.x (wR0_index[26]), .y (writenable), .z
       (wR0_result[26]));
  and_gate wR0_wag27(.x (wR0_index[27]), .y (writenable), .z
       (wR0_result[27]));
  and_gate wR0_wag28(.x (wR0_index[28]), .y (writenable), .z
       (wR0_result[28]));
  and_gate wR0_wag29(.x (wR0_index[29]), .y (writenable), .z
       (wR0_result[29]));
  and_gate wR0_wag30(.x (wR0_index[30]), .y (writenable), .z
       (wR0_result[30]));
  and_gate wR0_wag31(.x (wR0_index[31]), .y (writenable), .z
       (wR0_result[31]));
  dec_n_n5 wR0_write_dec_0(.src (writesel), .z (wR0_index));
  write32 wR0_ww0(.clk (clk), .din (wR0_t0), .to (r0));
  write32_1 wR0_ww1(.clk (clk), .din (wR0_t1), .to (r1));
  write32_2 wR0_ww2(.clk (clk), .din (wR0_t2), .to (r2));
  write32_3 wR0_ww3(.clk (clk), .din (wR0_t3), .to (r3));
  write32_4 wR0_ww4(.clk (clk), .din (wR0_t4), .to (r4));
  write32_5 wR0_ww5(.clk (clk), .din (wR0_t5), .to (r5));
  write32_6 wR0_ww6(.clk (clk), .din (wR0_t6), .to (r6));
  write32_7 wR0_ww7(.clk (clk), .din (wR0_t7), .to (r7));
  write32_8 wR0_ww8(.clk (clk), .din (wR0_t8), .to (r8));
  write32_9 wR0_ww9(.clk (clk), .din (wR0_t9), .to (r9));
  write32_10 wR0_ww10(.clk (clk), .din (wR0_t10), .to (r10));
  write32_11 wR0_ww11(.clk (clk), .din (wR0_t11), .to (r11));
  write32_12 wR0_ww12(.clk (clk), .din (wR0_t12), .to (r12));
  write32_13 wR0_ww13(.clk (clk), .din (wR0_t13), .to (r13));
  write32_14 wR0_ww14(.clk (clk), .din (wR0_t14), .to (r14));
  write32_15 wR0_ww15(.clk (clk), .din (wR0_t15), .to (r15));
  write32_16 wR0_ww16(.clk (clk), .din (wR0_t16), .to (r16));
  write32_17 wR0_ww17(.clk (clk), .din (wR0_t17), .to (r17));
  write32_18 wR0_ww18(.clk (clk), .din (wR0_t18), .to (r18));
  write32_19 wR0_ww19(.clk (clk), .din (wR0_t19), .to (r19));
  write32_20 wR0_ww20(.clk (clk), .din (wR0_t20), .to (r20));
  write32_21 wR0_ww21(.clk (clk), .din (wR0_t21), .to (r21));
  write32_22 wR0_ww22(.clk (clk), .din (wR0_t22), .to (r22));
  write32_23 wR0_ww23(.clk (clk), .din (wR0_t23), .to (r23));
  write32_24 wR0_ww24(.clk (clk), .din (wR0_t24), .to (r24));
  write32_25 wR0_ww25(.clk (clk), .din (wR0_t25), .to (r25));
  write32_26 wR0_ww26(.clk (clk), .din (wR0_t26), .to (r26));
  write32_27 wR0_ww27(.clk (clk), .din (wR0_t27), .to (r27));
  write32_28 wR0_ww28(.clk (clk), .din (wR0_t28), .to (r28));
  write32_29 wR0_ww29(.clk (clk), .din (wR0_t29), .to (r29));
  write32_30 wR0_ww30(.clk (clk), .din (wR0_t30), .to (r30));
  write32_31 wR0_ww31(.clk (clk), .din (wR0_t31), .to (r31));
endmodule

module Signextend_1(Extop, Din, Dout);
  input Extop;
  input [15:0] Din;
  output [31:0] Dout;
  wire Extop;
  wire [15:0] Din;
  wire [31:0] Dout;
  assign Dout[0] = Din[0];
  assign Dout[1] = Din[1];
  assign Dout[2] = Din[2];
  assign Dout[3] = Din[3];
  assign Dout[4] = Din[4];
  assign Dout[5] = Din[5];
  assign Dout[6] = Din[6];
  assign Dout[7] = Din[7];
  assign Dout[8] = Din[8];
  assign Dout[9] = Din[9];
  assign Dout[10] = Din[10];
  assign Dout[11] = Din[11];
  assign Dout[12] = Din[12];
  assign Dout[13] = Din[13];
  assign Dout[14] = Din[14];
  assign Dout[15] = Din[15];
  assign Dout[16] = Dout[31];
  assign Dout[17] = Dout[31];
  assign Dout[18] = Dout[31];
  assign Dout[19] = Dout[31];
  assign Dout[20] = Dout[31];
  assign Dout[21] = Dout[31];
  assign Dout[22] = Dout[31];
  assign Dout[23] = Dout[31];
  assign Dout[24] = Dout[31];
  assign Dout[25] = Dout[31];
  assign Dout[26] = Dout[31];
  assign Dout[27] = Dout[31];
  assign Dout[28] = Dout[31];
  assign Dout[29] = Dout[31];
  assign Dout[30] = Dout[31];
  and_gate se_ag_0(.x (Extop), .y (Din[15]), .z (Dout[31]));
endmodule

module WB_stage(MemtoReg, Result, Memread, wDin);
  input MemtoReg;
  input [31:0] Result, Memread;
  output [31:0] wDin;
  wire MemtoReg;
  wire [31:0] Result, Memread;
  wire [31:0] wDin;
  mux_32 cpu_mux1(.sel (MemtoReg), .src0 (Result), .src1 (Memread), .z
       (wDin));
endmodule

module CPU(clk, initPC, nextPC, regPC, inst, wDin, Dout1, Dout2, rt,
     rs, rd, Memread, shamt, opcode, funct, immed, RegDst, ALUSrc,
     MemtoReg, RegWrite, MemWrite, Branch, Extop, ALUop, Result,
     alu_input, alu_control);
  input clk, initPC;
  output [31:0] nextPC, regPC, inst, wDin, Dout1, Dout2, Memread,
       Result, alu_input;
  output [4:0] rt, rs, rd, shamt;
  output [5:0] opcode, funct;
  output [15:0] immed;
  output RegDst, MemtoReg, RegWrite, MemWrite, Branch, Extop;
  output [1:0] ALUSrc, ALUop;
  output [3:0] alu_control;
  wire clk, initPC;
  wire [31:0] nextPC, regPC, inst, wDin, Dout1, Dout2, Memread, Result,
       alu_input;
  wire [4:0] rt, rs, rd, shamt;
  wire [5:0] opcode, funct;
  wire [15:0] immed;
  wire RegDst, MemtoReg, RegWrite, MemWrite, Branch, Extop;
  wire [1:0] ALUSrc, ALUop;
  wire [3:0] alu_control;
  wire [4:0] towrite;
  wire [4:0] towrite_mem;
  wire [15:0] immed_ex;
  wire [5:0] opcode_ex;
  wire [4:0] towrite_ex;
  wire [31:0] mem_data_ex;
  wire [5:0] opcode_if;
  wire [5:0] funct_if;
  wire [31:0] result_mem;
  wire [31:0] se_immed;
  wire [31:0] alu_input_new;
  wire Branch_ex, Branch_stall_forwarding, Branch_taken, Carryout,
       MemWrite_ex, MemtoReg_ex, MemtoReg_mem, Overflow;
  wire RegWrite_ex, RegWrite_mem, Set, UNCONNECTED, UNCONNECTED0,
       UNCONNECTED1, UNCONNECTED2, UNCONNECTED3;
  wire UNCONNECTED4, UNCONNECTED5, UNCONNECTED_HIER_Z414,
       UNCONNECTED_HIER_Z415, UNCONNECTED_HIER_Z416,
       UNCONNECTED_HIER_Z417, UNCONNECTED_HIER_Z418,
       UNCONNECTED_HIER_Z419;
  wire UNCONNECTED_HIER_Z420, UNCONNECTED_HIER_Z421,
       UNCONNECTED_HIER_Z422, UNCONNECTED_HIER_Z423,
       UNCONNECTED_HIER_Z424, UNCONNECTED_HIER_Z425,
       UNCONNECTED_HIER_Z426, UNCONNECTED_HIER_Z427;
  wire UNCONNECTED_HIER_Z428, UNCONNECTED_HIER_Z429,
       UNCONNECTED_HIER_Z430, UNCONNECTED_HIER_Z431,
       UNCONNECTED_HIER_Z432, UNCONNECTED_HIER_Z433,
       UNCONNECTED_HIER_Z434, UNCONNECTED_HIER_Z435;
  wire UNCONNECTED_HIER_Z436, UNCONNECTED_HIER_Z437,
       UNCONNECTED_HIER_Z438, UNCONNECTED_HIER_Z439,
       UNCONNECTED_HIER_Z440, UNCONNECTED_HIER_Z441,
       UNCONNECTED_HIER_Z442, UNCONNECTED_HIER_Z443;
  wire UNCONNECTED_HIER_Z444, UNCONNECTED_HIER_Z445,
       UNCONNECTED_HIER_Z446, UNCONNECTED_HIER_Z447,
       UNCONNECTED_HIER_Z448, UNCONNECTED_HIER_Z449, Zero,
       initPC_delay4;
  wire initPC_delay6, init_delay, lw_stall, lw_stall_id, n_347, n_348,
       n_349, n_350;
  wire n_351, n_352, n_353, n_354, n_355, n_356, n_357, n_358;
  wire n_359, n_360, n_361, n_362, n_363, n_364, n_365, n_366;
  wire n_367, n_368, n_369, n_370, n_371, n_372, n_373, n_374;
  wire n_375, n_376, n_377, n_378, n_379, n_380, n_381, n_382;
  wire n_383, n_384, n_385, n_386, n_387, n_388, n_389, n_390;
  wire n_391, n_392, n_393, n_394, n_395, n_396, n_397, n_398;
  wire n_399, n_400, n_401, n_402, n_403, n_404, n_405, valid;
  assign n_373 = 1'b0;
  assign n_372 = 1'b0;
  assign n_371 = 1'b0;
  assign n_370 = 1'b0;
  assign n_369 = 1'b0;
  assign n_368 = 1'b0;
  assign n_367 = 1'b0;
  assign n_366 = 1'b0;
  assign n_365 = 1'b0;
  assign n_364 = 1'b0;
  assign n_363 = 1'b0;
  assign n_362 = 1'b0;
  assign n_361 = 1'b0;
  assign n_360 = 1'b0;
  assign n_359 = 1'b0;
  assign n_358 = 1'b0;
  assign n_357 = 1'b0;
  assign n_356 = 1'b0;
  assign n_355 = 1'b0;
  assign n_354 = 1'b0;
  assign n_353 = 1'b0;
  assign n_352 = 1'b0;
  assign n_351 = 1'b0;
  assign n_350 = 1'b0;
  assign n_349 = 1'b0;
  assign n_348 = 1'b0;
  assign n_347 = 1'b0;
  assign n_405 = 1'b0;
  assign n_404 = 1'b0;
  assign n_403 = 1'b0;
  assign n_402 = 1'b0;
  assign n_401 = 1'b0;
  assign n_400 = 1'b1;
  assign n_399 = 1'b0;
  assign n_398 = 1'b0;
  assign n_397 = 1'b0;
  assign n_396 = 1'b0;
  assign n_395 = 1'b0;
  assign n_394 = 1'b0;
  assign n_393 = 1'b0;
  assign n_392 = 1'b0;
  assign n_391 = 1'b0;
  assign n_390 = 1'b0;
  assign n_389 = 1'b0;
  assign n_388 = 1'b0;
  assign n_387 = 1'b0;
  assign n_386 = 1'b0;
  assign n_385 = 1'b0;
  assign n_384 = 1'b0;
  assign n_383 = 1'b1;
  assign n_382 = 1'b0;
  assign n_381 = 1'b0;
  assign n_380 = 1'b0;
  assign n_379 = 1'b0;
  assign n_378 = 1'b0;
  assign n_377 = 1'b0;
  assign n_376 = 1'b0;
  assign n_375 = 1'b0;
  assign n_374 = 1'b0;
  assign Extop = 1'b1;
  assign immed[0] = funct[0];
  assign immed[1] = funct[1];
  assign immed[2] = funct[2];
  assign immed[3] = funct[3];
  assign immed[4] = funct[4];
  assign immed[5] = funct[5];
  ALUctrl cpu_A(.ALUop (ALUop), .funct ({funct[5],
       UNCONNECTED_HIER_Z414, funct[3:0]}), .Control (alu_control));
  Control cpu_c0(.clk (clk), .Opcode (opcode), .funct (funct), .RegDst
       (RegDst), .ALUSrc (ALUSrc), .MemtoReg (MemtoReg), .RegWrite
       (RegWrite), .MemWrite (MemWrite), .Branch (Branch), .Extop
       (UNCONNECTED), .ALUop (ALUop), .valid (valid));
  EX_stage cpu_ex(.clk (clk), .A (Dout1), .B (alu_input), .Op
       (alu_control), .Carryout (Carryout), .Overflow (Overflow), .Zero
       (Zero), .Result (Result), .result_mem (wDin), .Set (Set), .immed
       ({immed[15:6], funct}), .immed_ex (immed_ex), .opcode (opcode),
       .opcode_ex (opcode_ex), .Branch (Branch), .MemtoReg (MemtoReg),
       .RegWrite (RegWrite), .MemWrite (MemWrite), .Branch_ex
       (Branch_ex), .MemtoReg_ex (MemtoReg_ex), .RegWrite_ex
       (RegWrite_ex), .MemWrite_ex (MemWrite_ex), .towrite (towrite),
       .towrite_ex (towrite_ex), .towrite_mem (towrite_mem), .mem_data
       (Dout2), .mem_data_ex (mem_data_ex), .rs (rs), .rt (rt), .ALUSrc
       (ALUSrc), .lw_stall_id (lw_stall_id), .Branch_stall_forwarding
       (Branch_stall_forwarding), .initPC_delay4 (initPC_delay4),
       .initPC_delay6 (initPC_delay6), .valid (valid));
  ID_stage cpu_id(.clk (clk), .opcode (opcode), .opcode_if (opcode_if),
       .rs (rs), .rt (rt), .rd (rd), .shamt (shamt), .funct (funct),
       .funct_if (funct_if), .instr_if (inst), .immi ({immed[15:6],
       UNCONNECTED5, UNCONNECTED4, UNCONNECTED3, UNCONNECTED2,
       UNCONNECTED1, UNCONNECTED0}), .lw_stall (lw_stall), .lw_stall_id
       (lw_stall_id));
  IF_stage_inst_name168h646174612f756e7369676e65645f73756d2e646174
       cpu_if0(.clk (clk), .PC (regPC), .instr_if (inst));
  mux_n_n5 cpu_m(.sel (RegDst), .src0 (rt), .src1 (rd), .z (towrite));
  Mem_stage_mem_file168h646174612f756e7369676e65645f73756d2e646174
       cpu_mem(.clk (clk), .cs (1'b1), .oe (1'b1), .we (MemWrite_ex),
       .addr (Result), .din (mem_data_ex), .dout (Memread), .result_mem
       (result_mem), .MemtoReg_ex (MemtoReg_ex), .RegWrite_ex
       (RegWrite_ex), .towrite_ex (towrite_ex), .MemtoReg_mem
       (MemtoReg_mem), .RegWrite_mem (RegWrite_mem), .towrite_mem
       (towrite_mem), .Branch_ex (Branch_taken), .init_delay
       (init_delay), .Branch_stall_forwarding
       (Branch_stall_forwarding));
  mux_32 cpu_mux0(.sel (ALUSrc[0]), .src0 (Dout2), .src1 (se_immed), .z
       (alu_input_new));
  mux_32 cpu_mux2(.sel (initPC), .src0 (nextPC), .src1 ({n_374, n_375,
       n_376, n_377, n_378, n_379, n_380, n_381, n_382, n_383, n_384,
       n_385, n_386, n_387, n_388, n_389, n_390, n_391, n_392, n_393,
       n_394, n_395, n_396, n_397, n_398, n_399, n_400, n_401, n_402,
       n_403, n_404, n_405}), .z (regPC));
  mux_32 cpu_mux4(.sel (ALUSrc[1]), .src0 (alu_input_new), .src1
       ({n_347, n_348, n_349, n_350, n_351, n_352, n_353, n_354, n_355,
       n_356, n_357, n_358, n_359, n_360, n_361, n_362, n_363, n_364,
       n_365, n_366, n_367, n_368, n_369, n_370, n_371, n_372, n_373,
       shamt}), .z (alu_input));
  PC cpu_pc(.clk (clk), .initPC (initPC), .Branch (Branch_ex), .Zero
       (Zero), .Overflow (Overflow), .Op ({UNCONNECTED_HIER_Z418,
       UNCONNECTED_HIER_Z417, UNCONNECTED_HIER_Z416,
       UNCONNECTED_HIER_Z415, opcode_ex[1:0]}), .Immed (immed_ex),
       .ALUOutput ({Result[31], UNCONNECTED_HIER_Z449,
       UNCONNECTED_HIER_Z448, UNCONNECTED_HIER_Z447,
       UNCONNECTED_HIER_Z446, UNCONNECTED_HIER_Z445,
       UNCONNECTED_HIER_Z444, UNCONNECTED_HIER_Z443,
       UNCONNECTED_HIER_Z442, UNCONNECTED_HIER_Z441,
       UNCONNECTED_HIER_Z440, UNCONNECTED_HIER_Z439,
       UNCONNECTED_HIER_Z438, UNCONNECTED_HIER_Z437,
       UNCONNECTED_HIER_Z436, UNCONNECTED_HIER_Z435,
       UNCONNECTED_HIER_Z434, UNCONNECTED_HIER_Z433,
       UNCONNECTED_HIER_Z432, UNCONNECTED_HIER_Z431,
       UNCONNECTED_HIER_Z430, UNCONNECTED_HIER_Z429,
       UNCONNECTED_HIER_Z428, UNCONNECTED_HIER_Z427,
       UNCONNECTED_HIER_Z426, UNCONNECTED_HIER_Z425,
       UNCONNECTED_HIER_Z424, UNCONNECTED_HIER_Z423,
       UNCONNECTED_HIER_Z422, UNCONNECTED_HIER_Z421,
       UNCONNECTED_HIER_Z420, UNCONNECTED_HIER_Z419}), .CurrPC (regPC),
       .NextPC (nextPC), .lw_stall (lw_stall), .sel (Branch_taken),
       .initPC_delay9 (init_delay), .initPC_delay4 (initPC_delay4),
       .initPC_delay6 (initPC_delay6));
  RegisterFiles cpu_rf(.clk (clk), .writenable (RegWrite_mem),
       .readsel1 (rs), .readsel2 (rt), .writesel (towrite_mem), .Din
       (wDin), .Dout1 (Dout1), .Dout2 (Dout2));
  Signextend_1 cpu_se(.Extop (1'b1), .Din ({immed[15:6], funct}), .Dout
       (se_immed));
  WB_stage cpu_wb(.MemtoReg (MemtoReg_mem), .Result (result_mem),
       .Memread (Memread), .wDin (wDin));
endmodule

